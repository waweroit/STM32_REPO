
09.GardeningBlackPillSTM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005418  08005418  00006418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005578  08005578  00006578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005580  08005580  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005584  08005584  00006584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005588  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000005c  080055e4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080055e4  00007464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103a1  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cd  00000000  00000000  0001742d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00019d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af7  00000000  00000000  0001ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195f9  00000000  00000000  0001b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a73  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8a6  00000000  00000000  00048693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  000e2f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e6e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005400 	.word	0x08005400

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005400 	.word	0x08005400

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ScaleADC_Light_To_Percentage>:
#include "MoistureSensor.h"



int ScaleADC_Light_To_Percentage(const uint32_t *adc_buffer, int size, int adc_dark, int adc_bright)
{
 80005bc:	b480      	push	{r7}
 80005be:	b08b      	sub	sp, #44	@ 0x2c
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	603b      	str	r3, [r7, #0]
    if (adc_buffer == NULL || size <= 0 || adc_bright <= adc_dark)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <ScaleADC_Light_To_Percentage+0x22>
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd03      	ble.n	80005de <ScaleADC_Light_To_Percentage+0x22>
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dc01      	bgt.n	80005e2 <ScaleADC_Light_To_Percentage+0x26>
        return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e03f      	b.n	8000662 <ScaleADC_Light_To_Percentage+0xa6>

    uint32_t sum = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < size; i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
 80005ea:	e00a      	b.n	8000602 <ScaleADC_Light_To_Percentage+0x46>
        sum += adc_buffer[i];
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005f8:	4413      	add	r3, r2
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < size; i++) {
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	3301      	adds	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
 8000602:	6a3a      	ldr	r2, [r7, #32]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbf0      	blt.n	80005ec <ScaleADC_Light_To_Percentage+0x30>
    }

    int avg = sum / size;
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	61fb      	str	r3, [r7, #28]

    // Ogranicz średnią do zakresu [adc_dark, adc_bright]
    if (avg < adc_dark) avg = adc_dark;
 8000614:	69fa      	ldr	r2, [r7, #28]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	da01      	bge.n	8000620 <ScaleADC_Light_To_Percentage+0x64>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	61fb      	str	r3, [r7, #28]
    if (avg > adc_bright) avg = adc_bright;
 8000620:	69fa      	ldr	r2, [r7, #28]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	dd01      	ble.n	800062c <ScaleADC_Light_To_Percentage+0x70>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	61fb      	str	r3, [r7, #28]

    int range = adc_bright - adc_dark;
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
    int delta = avg - adc_dark;
 8000634:	69fa      	ldr	r2, [r7, #28]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	613b      	str	r3, [r7, #16]

    int percent = (delta * 100) / range;
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	2264      	movs	r2, #100	@ 0x64
 8000640:	fb03 f202 	mul.w	r2, r3, r2
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	61bb      	str	r3, [r7, #24]

    // Zabezpieczenie
    if (percent < 0) percent = 0;
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	2b00      	cmp	r3, #0
 8000650:	da01      	bge.n	8000656 <ScaleADC_Light_To_Percentage+0x9a>
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
    if (percent > 100) percent = 100;
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2b64      	cmp	r3, #100	@ 0x64
 800065a:	dd01      	ble.n	8000660 <ScaleADC_Light_To_Percentage+0xa4>
 800065c:	2364      	movs	r3, #100	@ 0x64
 800065e:	61bb      	str	r3, [r7, #24]

    return percent;
 8000660:	69bb      	ldr	r3, [r7, #24]
}
 8000662:	4618      	mov	r0, r3
 8000664:	372c      	adds	r7, #44	@ 0x2c
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <ScaleADC_To_Percent_Inverted_Ranged>:

//dray- 2900/2500
//wet 1790/1700
int ScaleADC_To_Percent_Inverted_Ranged(const uint32_t *adc_buffer, int size, int dry_value, int wet_value)
{
 800066e:	b480      	push	{r7}
 8000670:	b08b      	sub	sp, #44	@ 0x2c
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	603b      	str	r3, [r7, #0]
    if (adc_buffer == NULL || size <= 0 )// || dry_value <= wet_value)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <ScaleADC_To_Percent_Inverted_Ranged+0x1a>
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	dc01      	bgt.n	800068c <ScaleADC_To_Percent_Inverted_Ranged+0x1e>
        return 0;
 8000688:	2300      	movs	r3, #0
 800068a:	e035      	b.n	80006f8 <ScaleADC_To_Percent_Inverted_Ranged+0x8a>

    uint32_t sum = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < size; i++) {
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	e00a      	b.n	80006ac <ScaleADC_To_Percent_Inverted_Ranged+0x3e>
        sum += adc_buffer[i];
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4413      	add	r3, r2
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a2:	4413      	add	r3, r2
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < size; i++) {
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	3301      	adds	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	6a3a      	ldr	r2, [r7, #32]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbf0      	blt.n	8000696 <ScaleADC_To_Percent_Inverted_Ranged+0x28>
    }

    int avg = sum / size;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	61bb      	str	r3, [r7, #24]
//    if (avg > dry_value)
//    	avg = dry_value;
//    if (avg < wet_value)
//    	avg = wet_value;

    int range = dry_value - wet_value;
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	617b      	str	r3, [r7, #20]
    int delta = avg - wet_value;
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	613b      	str	r3, [r7, #16]

    int percent = 100 - ((delta * 100) / range);
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2264      	movs	r2, #100	@ 0x64
 80006d2:	fb03 f202 	mul.w	r2, r3, r2
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006dc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80006e0:	61fb      	str	r3, [r7, #28]

    // Graniczne zabezpieczenie
    if (percent < 0) percent = 0;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da01      	bge.n	80006ec <ScaleADC_To_Percent_Inverted_Ranged+0x7e>
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    if (percent > 100) percent = 100;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	2b64      	cmp	r3, #100	@ 0x64
 80006f0:	dd01      	ble.n	80006f6 <ScaleADC_To_Percent_Inverted_Ranged+0x88>
 80006f2:	2364      	movs	r3, #100	@ 0x64
 80006f4:	61fb      	str	r3, [r7, #28]

    return percent;
 80006f6:	69fb      	ldr	r3, [r7, #28]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	372c      	adds	r7, #44	@ 0x2c
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <Send>:
	//HAL_UART_Receive_IT(Channel_USART, (uint8_t *)&rxData, 1);  // Włącz przerwania RX
}


HAL_StatusTypeDef Send(const char *text)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
//    HAL_StatusTypeDef retStatus = HAL_UART_Transmit(ESP_USART, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
    HAL_StatusTypeDef retStatus = HAL_UART_Transmit_IT(Channel_USART, (uint8_t*)text, strlen(text));
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fd67 	bl	80001e0 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29b      	uxth	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <Send+0x60>)
 800071c:	f003 fab8 	bl	8003c90 <HAL_UART_Transmit_IT>
 8000720:	4603      	mov	r3, r0
 8000722:	75fb      	strb	r3, [r7, #23]

    if (retStatus == HAL_OK)
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d117      	bne.n	800075a <Send+0x56>
    {
    	int breakTimeStart = HAL_GetTick();
 800072a:	f000 fea7 	bl	800147c <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	613b      	str	r3, [r7, #16]
    	int breakAfterMS = 10000;
 8000732:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000736:	60fb      	str	r3, [r7, #12]
    	int breakTimeNOW = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]

        while (!isTransmissionComplete)
 800073c:	e003      	b.n	8000746 <Send+0x42>
        {
        	breakTimeNOW = HAL_GetTick();
 800073e:	f000 fe9d 	bl	800147c <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
 8000744:	60bb      	str	r3, [r7, #8]
        while (!isTransmissionComplete)
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <Send+0x64>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f083 0301 	eor.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f4      	bne.n	800073e <Send+0x3a>
    			// send timeout
    		}
        }


        isTransmissionComplete = false; // Reset flagi
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <Send+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
    else
    {

        // Obsłuż błąd transmisji
    }
    return retStatus;
 800075a:	7dfb      	ldrb	r3, [r7, #23]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200002d0 	.word	0x200002d0
 8000768:	20000078 	.word	0x20000078

0800076c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <MX_ADC1_Init+0xd0>)
 8000780:	4a2f      	ldr	r2, [pc, #188]	@ (8000840 <MX_ADC1_Init+0xd4>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000784:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <MX_ADC1_Init+0xd0>)
 8000786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_ADC1_Init+0xd0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000792:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <MX_ADC1_Init+0xd0>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000798:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_ADC1_Init+0xd0>)
 800079a:	2201      	movs	r2, #1
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b25      	ldr	r3, [pc, #148]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007ae:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <MX_ADC1_Init+0xd8>)
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007ba:	2203      	movs	r2, #3
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	481b      	ldr	r0, [pc, #108]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007ce:	f000 fe61 	bl	8001494 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 fc0c 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80007e4:	2305      	movs	r3, #5
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	@ (800083c <MX_ADC1_Init+0xd0>)
 80007ee:	f000 fff7 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 fbfc 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_ADC1_Init+0xd0>)
 800080a:	f000 ffe9 	bl	80017e0 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 fbee 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000818:	2303      	movs	r3, #3
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_ADC1_Init+0xd0>)
 8000826:	f000 ffdb 	bl	80017e0 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000830:	f000 fbe0 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000144 	.word	0x20000144
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a2e      	ldr	r2, [pc, #184]	@ (8000920 <HAL_ADC_MspInit+0xd8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d156      	bne.n	8000918 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a2c      	ldr	r2, [pc, #176]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <HAL_ADC_MspInit+0xdc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_MoistureSensor_1_Pin|ADC_MoistureSensor_2_Pin|ADC_LightSensor_Pin;
 80008a2:	230e      	movs	r3, #14
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	@ (8000928 <HAL_ADC_MspInit+0xe0>)
 80008b6:	f001 ff57 	bl	8002768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <HAL_ADC_MspInit+0xe8>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 80008fe:	f001 fb31 	bl	8001f64 <HAL_DMA_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000908:	f000 fb74 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 8000910:	639a      	str	r2, [r3, #56]	@ 0x38
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_ADC_MspInit+0xe4>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40012000 	.word	0x40012000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	2000018c 	.word	0x2000018c
 8000930:	40026410 	.word	0x40026410

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	2038      	movs	r0, #56	@ 0x38
 800095c:	f001 facb 	bl	8001ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000960:	2038      	movs	r0, #56	@ 0x38
 8000962:	f001 fae4 	bl	8001f2e <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b31      	ldr	r3, [pc, #196]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a30      	ldr	r2, [pc, #192]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a29      	ldr	r2, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a00:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <MX_GPIO_Init+0xe4>)
 8000a02:	f002 f835 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PIN_PB10_Pump_Pin|PIN_PB11_Light_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2106      	movs	r1, #6
 8000a0a:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <MX_GPIO_Init+0xe8>)
 8000a0c:	f002 f830 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_01_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_01_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <MX_GPIO_Init+0xe4>)
 8000a2a:	f001 fe9d 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_PB10_Pump_Pin PIN_PB11_Light_Pin */
  GPIO_InitStruct.Pin = PIN_PB10_Pump_Pin|PIN_PB11_Light_Pin;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_GPIO_Init+0xe8>)
 8000a46:	f001 fe8f 	bl	8002768 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b092      	sub	sp, #72	@ 0x48
 8000a64:	af02      	add	r7, sp, #8
		DARK =20,
		NIGHT_OR_MORNING = 90,
		BRIGHT = 99
	} Light_State;

  uint32_t TimeNOW = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28

  int GetMoistureAvg_TimeLenghtDefault = 10000; // 10 sek
 8000a6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  int GetMoistureAvg_TimeLenghtFast = 1000; // 1sek
 8000a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a74:	623b      	str	r3, [r7, #32]
  int GetMoistureAvg_TimeLenght = GetMoistureAvg_TimeLenghtDefault;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t GetSoilMoisture_FromTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38

  int MoistureHumidityPercent_Dev_1 = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  int MoistureHumidityPercent_Dev_2 = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  int MoistureGeneral = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]

  bool PumpIsRunnign = false;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int StartPumpWhenMoistureLower = 35;
 8000a90:	2323      	movs	r3, #35	@ 0x23
 8000a92:	613b      	str	r3, [r7, #16]
  int StopPumpWhenMoistureHigher = 50;
 8000a94:	2332      	movs	r3, #50	@ 0x32
 8000a96:	60fb      	str	r3, [r7, #12]


  int GetLightMesurment_TimeLenghtDefault = 5000; // 5 sek
 8000a98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a9c:	60bb      	str	r3, [r7, #8]
  uint32_t GetLightMesurment_FromTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30

  int LightSensorPercent = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  Light_State LightSensor = DARK;
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  bool LightIsON = false;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fc7d 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f9ed 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff ff5b 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 8000abe:	f7ff ff39 	bl	8000934 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ac2:	f7ff fe53 	bl	800076c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ac6:	f000 fb59 	bl	800117c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000aca:	f000 fbcd 	bl	8001268 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 8000ace:	2203      	movs	r2, #3
 8000ad0:	49a2      	ldr	r1, [pc, #648]	@ (8000d5c <main+0x2fc>)
 8000ad2:	48a3      	ldr	r0, [pc, #652]	@ (8000d60 <main+0x300>)
 8000ad4:	f000 fd22 	bl	800151c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ad8:	48a2      	ldr	r0, [pc, #648]	@ (8000d64 <main+0x304>)
 8000ada:	f002 fca5 	bl	8003428 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 if(adc_ready == true)
 8000ade:	4ba2      	ldr	r3, [pc, #648]	@ (8000d68 <main+0x308>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d061      	beq.n	8000bac <main+0x14c>
		 {
				if(Buffer2_TableCount < Channel_2_BUF_SIZE && DMA_Channel_2_Was_Filled == false)
 8000ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8000d6c <main+0x30c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b09      	cmp	r3, #9
 8000aee:	dc13      	bgt.n	8000b18 <main+0xb8>
 8000af0:	4b9f      	ldr	r3, [pc, #636]	@ (8000d70 <main+0x310>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f083 0301 	eor.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00c      	beq.n	8000b18 <main+0xb8>
				{
					ADC_MoistureSensor_Dev_1[Buffer2_TableCount]= adc_buffer[0];
 8000afe:	4b9b      	ldr	r3, [pc, #620]	@ (8000d6c <main+0x30c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a96      	ldr	r2, [pc, #600]	@ (8000d5c <main+0x2fc>)
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	499b      	ldr	r1, [pc, #620]	@ (8000d74 <main+0x314>)
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					Buffer2_TableCount++;
 8000b0c:	4b97      	ldr	r3, [pc, #604]	@ (8000d6c <main+0x30c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a96      	ldr	r2, [pc, #600]	@ (8000d6c <main+0x30c>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e005      	b.n	8000b24 <main+0xc4>
				}
				else
				{
					DMA_Channel_2_Was_Filled = true;
 8000b18:	4b95      	ldr	r3, [pc, #596]	@ (8000d70 <main+0x310>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
					Buffer2_TableCount = 0;
 8000b1e:	4b93      	ldr	r3, [pc, #588]	@ (8000d6c <main+0x30c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
				}

				if(Buffer3_TableCount < Channel_3_BUF_SIZE && DMA_Channel_3_Was_Filled == false)
 8000b24:	4b94      	ldr	r3, [pc, #592]	@ (8000d78 <main+0x318>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	dc13      	bgt.n	8000b54 <main+0xf4>
 8000b2c:	4b93      	ldr	r3, [pc, #588]	@ (8000d7c <main+0x31c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	f083 0301 	eor.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00c      	beq.n	8000b54 <main+0xf4>
				{
					ADC_MoistureSensor_Dev_2[Buffer3_TableCount]= adc_buffer[1];
 8000b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8000d78 <main+0x318>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a87      	ldr	r2, [pc, #540]	@ (8000d5c <main+0x2fc>)
 8000b40:	6852      	ldr	r2, [r2, #4]
 8000b42:	498f      	ldr	r1, [pc, #572]	@ (8000d80 <main+0x320>)
 8000b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					Buffer3_TableCount++;
 8000b48:	4b8b      	ldr	r3, [pc, #556]	@ (8000d78 <main+0x318>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d78 <main+0x318>)
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e005      	b.n	8000b60 <main+0x100>
				}
				else
				{
					DMA_Channel_3_Was_Filled = true;
 8000b54:	4b89      	ldr	r3, [pc, #548]	@ (8000d7c <main+0x31c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
					Buffer3_TableCount = 0;
 8000b5a:	4b87      	ldr	r3, [pc, #540]	@ (8000d78 <main+0x318>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
				}

				if(Buffer4_TableCount < Channel_4_BUF_SIZE && DMA_Channel_4_Was_Filled == false)
 8000b60:	4b88      	ldr	r3, [pc, #544]	@ (8000d84 <main+0x324>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	dc13      	bgt.n	8000b90 <main+0x130>
 8000b68:	4b87      	ldr	r3, [pc, #540]	@ (8000d88 <main+0x328>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00c      	beq.n	8000b90 <main+0x130>
				{
					ADC_LightSensor_Dev[Buffer4_TableCount]= adc_buffer[2];
 8000b76:	4b83      	ldr	r3, [pc, #524]	@ (8000d84 <main+0x324>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a78      	ldr	r2, [pc, #480]	@ (8000d5c <main+0x2fc>)
 8000b7c:	6892      	ldr	r2, [r2, #8]
 8000b7e:	4983      	ldr	r1, [pc, #524]	@ (8000d8c <main+0x32c>)
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					Buffer4_TableCount++;
 8000b84:	4b7f      	ldr	r3, [pc, #508]	@ (8000d84 <main+0x324>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8000d84 <main+0x324>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e005      	b.n	8000b9c <main+0x13c>
				}
				else
				{
					DMA_Channel_4_Was_Filled = true;
 8000b90:	4b7d      	ldr	r3, [pc, #500]	@ (8000d88 <main+0x328>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
					Buffer4_TableCount = 0;
 8000b96:	4b7b      	ldr	r3, [pc, #492]	@ (8000d84 <main+0x324>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
				}

				 adc_ready = false;
 8000b9c:	4b72      	ldr	r3, [pc, #456]	@ (8000d68 <main+0x308>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
				 HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	496d      	ldr	r1, [pc, #436]	@ (8000d5c <main+0x2fc>)
 8000ba6:	486e      	ldr	r0, [pc, #440]	@ (8000d60 <main+0x300>)
 8000ba8:	f000 fcb8 	bl	800151c <HAL_ADC_Start_DMA>
		 }



		TimeNOW = HAL_GetTick();
 8000bac:	f000 fc66 	bl	800147c <HAL_GetTick>
 8000bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if(((uint32_t)TimeNOW - GetSoilMoisture_FromTime) >= GetMoistureAvg_TimeLenght)
 8000bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	f0c0 809c 	bcc.w	8000cf8 <main+0x298>
		{
			GetSoilMoisture_FromTime = TimeNOW;
 8000bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38

			 if(DMA_Channel_2_Was_Filled && DMA_Channel_3_Was_Filled)
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d70 <main+0x310>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8095 	beq.w	8000cf8 <main+0x298>
 8000bce:	4b6b      	ldr	r3, [pc, #428]	@ (8000d7c <main+0x31c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8090 	beq.w	8000cf8 <main+0x298>
			 {
				 DMA_Channel_2_Was_Filled = false;
 8000bd8:	4b65      	ldr	r3, [pc, #404]	@ (8000d70 <main+0x310>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
				 DMA_Channel_3_Was_Filled = false;
 8000bde:	4b67      	ldr	r3, [pc, #412]	@ (8000d7c <main+0x31c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
//				 MoistureHumidityPercent_Dev_1 = ScaleADC_To_Percent_Inverted_Ranged(ADC_MoistureSensor_Dev_1, Channel_2_BUF_SIZE, 4095, 2910);
//				 MoistureHumidityPercent_Dev_2 = ScaleADC_To_Percent_Inverted_Ranged(ADC_MoistureSensor_Dev_2, Channel_3_BUF_SIZE, 4095, 2840);

				 //MakerSoil MoistureSensor 3.3 Volt

				 MoistureHumidityPercent_Dev_1 = ScaleADC_To_Percent_Inverted_Ranged(ADC_MoistureSensor_Dev_1, Channel_2_BUF_SIZE, 2600, 1730);
 8000be4:	f240 63c2 	movw	r3, #1730	@ 0x6c2
 8000be8:	f640 2228 	movw	r2, #2600	@ 0xa28
 8000bec:	210a      	movs	r1, #10
 8000bee:	4861      	ldr	r0, [pc, #388]	@ (8000d74 <main+0x314>)
 8000bf0:	f7ff fd3d 	bl	800066e <ScaleADC_To_Percent_Inverted_Ranged>
 8000bf4:	61f8      	str	r0, [r7, #28]
				 MoistureHumidityPercent_Dev_2 = ScaleADC_To_Percent_Inverted_Ranged(ADC_MoistureSensor_Dev_2, Channel_3_BUF_SIZE, 2600, 1730);
 8000bf6:	f240 63c2 	movw	r3, #1730	@ 0x6c2
 8000bfa:	f640 2228 	movw	r2, #2600	@ 0xa28
 8000bfe:	210a      	movs	r1, #10
 8000c00:	485f      	ldr	r0, [pc, #380]	@ (8000d80 <main+0x320>)
 8000c02:	f7ff fd34 	bl	800066e <ScaleADC_To_Percent_Inverted_Ranged>
 8000c06:	61b8      	str	r0, [r7, #24]


				 memset(txBuffer, 0, sizeof(txBuffer));
 8000c08:	22c8      	movs	r2, #200	@ 0xc8
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4860      	ldr	r0, [pc, #384]	@ (8000d90 <main+0x330>)
 8000c0e:	f003 ff79 	bl	8004b04 <memset>
				 snprintf(txBuffer, sizeof(txBuffer), "Moisture sensor Dev 1: %d %%\r\n", MoistureHumidityPercent_Dev_1);
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	4a5f      	ldr	r2, [pc, #380]	@ (8000d94 <main+0x334>)
 8000c16:	21c8      	movs	r1, #200	@ 0xc8
 8000c18:	485d      	ldr	r0, [pc, #372]	@ (8000d90 <main+0x330>)
 8000c1a:	f003 ff3d 	bl	8004a98 <sniprintf>
				 Send(txBuffer);
 8000c1e:	485c      	ldr	r0, [pc, #368]	@ (8000d90 <main+0x330>)
 8000c20:	f7ff fd70 	bl	8000704 <Send>

				 memset(txBuffer, 0, sizeof(txBuffer));
 8000c24:	22c8      	movs	r2, #200	@ 0xc8
 8000c26:	2100      	movs	r1, #0
 8000c28:	4859      	ldr	r0, [pc, #356]	@ (8000d90 <main+0x330>)
 8000c2a:	f003 ff6b 	bl	8004b04 <memset>
				 snprintf(txBuffer, sizeof(txBuffer), "Moisture sensor Dev 2: %d %%\r\n", MoistureHumidityPercent_Dev_2);
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4a59      	ldr	r2, [pc, #356]	@ (8000d98 <main+0x338>)
 8000c32:	21c8      	movs	r1, #200	@ 0xc8
 8000c34:	4856      	ldr	r0, [pc, #344]	@ (8000d90 <main+0x330>)
 8000c36:	f003 ff2f 	bl	8004a98 <sniprintf>
				 Send(txBuffer);
 8000c3a:	4855      	ldr	r0, [pc, #340]	@ (8000d90 <main+0x330>)
 8000c3c:	f7ff fd62 	bl	8000704 <Send>

				 MoistureGeneral = (MoistureHumidityPercent_Dev_1 +MoistureHumidityPercent_Dev_2)/2;
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4413      	add	r3, r2
 8000c46:	0fda      	lsrs	r2, r3, #31
 8000c48:	4413      	add	r3, r2
 8000c4a:	105b      	asrs	r3, r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
				 memset(txBuffer, 0, sizeof(txBuffer));
 8000c4e:	22c8      	movs	r2, #200	@ 0xc8
 8000c50:	2100      	movs	r1, #0
 8000c52:	484f      	ldr	r0, [pc, #316]	@ (8000d90 <main+0x330>)
 8000c54:	f003 ff56 	bl	8004b04 <memset>
				 snprintf(txBuffer, sizeof(txBuffer), "Soil moisture avg: %d %%\r\n", MoistureGeneral);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4a50      	ldr	r2, [pc, #320]	@ (8000d9c <main+0x33c>)
 8000c5c:	21c8      	movs	r1, #200	@ 0xc8
 8000c5e:	484c      	ldr	r0, [pc, #304]	@ (8000d90 <main+0x330>)
 8000c60:	f003 ff1a 	bl	8004a98 <sniprintf>
				 Send(txBuffer);
 8000c64:	484a      	ldr	r0, [pc, #296]	@ (8000d90 <main+0x330>)
 8000c66:	f7ff fd4d 	bl	8000704 <Send>

				 if(MoistureGeneral <= StartPumpWhenMoistureLower && PumpIsRunnign == false)
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dc20      	bgt.n	8000cb4 <main+0x254>
 8000c72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d019      	beq.n	8000cb4 <main+0x254>
				 {
					 memset(txBuffer, 0, sizeof(txBuffer));
 8000c80:	22c8      	movs	r2, #200	@ 0xc8
 8000c82:	2100      	movs	r1, #0
 8000c84:	4842      	ldr	r0, [pc, #264]	@ (8000d90 <main+0x330>)
 8000c86:	f003 ff3d 	bl	8004b04 <memset>
					 snprintf(txBuffer, sizeof(txBuffer), "Soil moisture avg: %d is <= %d \r\n", MoistureGeneral, StartPumpWhenMoistureLower);
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	4a43      	ldr	r2, [pc, #268]	@ (8000da0 <main+0x340>)
 8000c92:	21c8      	movs	r1, #200	@ 0xc8
 8000c94:	483e      	ldr	r0, [pc, #248]	@ (8000d90 <main+0x330>)
 8000c96:	f003 feff 	bl	8004a98 <sniprintf>
					 Send(txBuffer);
 8000c9a:	483d      	ldr	r0, [pc, #244]	@ (8000d90 <main+0x330>)
 8000c9c:	f7ff fd32 	bl	8000704 <Send>

					 GetMoistureAvg_TimeLenght = GetMoistureAvg_TimeLenghtFast;
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
					 HAL_GPIO_WritePin(PIN_PB10_Pump_GPIO_Port, PIN_PB10_Pump_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	483e      	ldr	r0, [pc, #248]	@ (8000da4 <main+0x344>)
 8000caa:	f001 fee1 	bl	8002a70 <HAL_GPIO_WritePin>
					 PumpIsRunnign = true;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				 }

				 if(MoistureGeneral >= StopPumpWhenMoistureHigher && PumpIsRunnign == true)
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	db1d      	blt.n	8000cf8 <main+0x298>
 8000cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d019      	beq.n	8000cf8 <main+0x298>
				 {
					 memset(txBuffer, 0, sizeof(txBuffer));
 8000cc4:	22c8      	movs	r2, #200	@ 0xc8
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4831      	ldr	r0, [pc, #196]	@ (8000d90 <main+0x330>)
 8000cca:	f003 ff1b 	bl	8004b04 <memset>
					 snprintf(txBuffer, sizeof(txBuffer), "Soil moisture avg: %d is >= %d \r\n", MoistureGeneral, StopPumpWhenMoistureHigher);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4a34      	ldr	r2, [pc, #208]	@ (8000da8 <main+0x348>)
 8000cd6:	21c8      	movs	r1, #200	@ 0xc8
 8000cd8:	482d      	ldr	r0, [pc, #180]	@ (8000d90 <main+0x330>)
 8000cda:	f003 fedd 	bl	8004a98 <sniprintf>
					 Send(txBuffer);
 8000cde:	482c      	ldr	r0, [pc, #176]	@ (8000d90 <main+0x330>)
 8000ce0:	f7ff fd10 	bl	8000704 <Send>
					 HAL_GPIO_WritePin(PIN_PB10_Pump_GPIO_Port, PIN_PB10_Pump_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	482e      	ldr	r0, [pc, #184]	@ (8000da4 <main+0x344>)
 8000cea:	f001 fec1 	bl	8002a70 <HAL_GPIO_WritePin>
					 GetMoistureAvg_TimeLenght = GetMoistureAvg_TimeLenghtDefault;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					 PumpIsRunnign = false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			 }


		}

		TimeNOW = HAL_GetTick();
 8000cf8:	f000 fbc0 	bl	800147c <HAL_GetTick>
 8000cfc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if(((uint32_t)TimeNOW - GetLightMesurment_FromTime) >= GetLightMesurment_TimeLenghtDefault)
 8000cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d02:	1ad2      	subs	r2, r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	f4ff aee9 	bcc.w	8000ade <main+0x7e>
		{
			GetLightMesurment_FromTime = TimeNOW;
 8000d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30

			 if(DMA_Channel_4_Was_Filled)
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <main+0x328>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f43f aee2 	beq.w	8000ade <main+0x7e>
			 {
				 DMA_Channel_4_Was_Filled = false;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <main+0x328>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]

				 //jasno → niska rezystancja LDR → wysokie napięcie → wysokie ADC (np. 3500)
				 //ciemno → wysoka rezystancja LDR → niskie napięcie → niskie ADC (np. 100)
				 LightSensorPercent = ScaleADC_Light_To_Percentage(ADC_LightSensor_Dev, Channel_4_BUF_SIZE, 100, 3700);
 8000d20:	f640 6374 	movw	r3, #3700	@ 0xe74
 8000d24:	2264      	movs	r2, #100	@ 0x64
 8000d26:	210a      	movs	r1, #10
 8000d28:	4818      	ldr	r0, [pc, #96]	@ (8000d8c <main+0x32c>)
 8000d2a:	f7ff fc47 	bl	80005bc <ScaleADC_Light_To_Percentage>
 8000d2e:	6078      	str	r0, [r7, #4]

				 memset(txBuffer, 0, sizeof(txBuffer));
 8000d30:	22c8      	movs	r2, #200	@ 0xc8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4816      	ldr	r0, [pc, #88]	@ (8000d90 <main+0x330>)
 8000d36:	f003 fee5 	bl	8004b04 <memset>
				 snprintf(txBuffer, sizeof(txBuffer), "Light sensor: %d %% light\r\n", LightSensorPercent);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <main+0x34c>)
 8000d3e:	21c8      	movs	r1, #200	@ 0xc8
 8000d40:	4813      	ldr	r0, [pc, #76]	@ (8000d90 <main+0x330>)
 8000d42:	f003 fea9 	bl	8004a98 <sniprintf>
				 Send(txBuffer);
 8000d46:	4812      	ldr	r0, [pc, #72]	@ (8000d90 <main+0x330>)
 8000d48:	f7ff fcdc 	bl	8000704 <Send>

				 if(LightSensorPercent<= DARK)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b14      	cmp	r3, #20
 8000d50:	dc2e      	bgt.n	8000db0 <main+0x350>
					 LightSensor = DARK;
 8000d52:	2314      	movs	r3, #20
 8000d54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d58:	e03a      	b.n	8000dd0 <main+0x370>
 8000d5a:	bf00      	nop
 8000d5c:	20000278 	.word	0x20000278
 8000d60:	20000144 	.word	0x20000144
 8000d64:	20000288 	.word	0x20000288
 8000d68:	200001fc 	.word	0x200001fc
 8000d6c:	200001f0 	.word	0x200001f0
 8000d70:	200001ec 	.word	0x200001ec
 8000d74:	20000200 	.word	0x20000200
 8000d78:	200001f4 	.word	0x200001f4
 8000d7c:	200001ed 	.word	0x200001ed
 8000d80:	20000228 	.word	0x20000228
 8000d84:	200001f8 	.word	0x200001f8
 8000d88:	200001ee 	.word	0x200001ee
 8000d8c:	20000250 	.word	0x20000250
 8000d90:	2000007c 	.word	0x2000007c
 8000d94:	08005418 	.word	0x08005418
 8000d98:	08005438 	.word	0x08005438
 8000d9c:	08005458 	.word	0x08005458
 8000da0:	08005474 	.word	0x08005474
 8000da4:	40020400 	.word	0x40020400
 8000da8:	08005498 	.word	0x08005498
 8000dac:	080054bc 	.word	0x080054bc
				 else if(LightSensorPercent> DARK && LightSensorPercent< BRIGHT)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b14      	cmp	r3, #20
 8000db4:	dd06      	ble.n	8000dc4 <main+0x364>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b62      	cmp	r3, #98	@ 0x62
 8000dba:	dc03      	bgt.n	8000dc4 <main+0x364>
					 LightSensor = NIGHT_OR_MORNING;
 8000dbc:	235a      	movs	r3, #90	@ 0x5a
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000dc2:	e005      	b.n	8000dd0 <main+0x370>
				 else if(LightSensorPercent > BRIGHT)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b63      	cmp	r3, #99	@ 0x63
 8000dc8:	dd02      	ble.n	8000dd0 <main+0x370>
					 LightSensor = BRIGHT;
 8000dca:	2363      	movs	r3, #99	@ 0x63
 8000dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


				 memset(txBuffer, 0, sizeof(txBuffer));
 8000dd0:	22c8      	movs	r2, #200	@ 0xc8
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	482b      	ldr	r0, [pc, #172]	@ (8000e84 <main+0x424>)
 8000dd6:	f003 fe95 	bl	8004b04 <memset>
				 switch (LightSensor)
 8000dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dde:	2b63      	cmp	r3, #99	@ 0x63
 8000de0:	d033      	beq.n	8000e4a <main+0x3ea>
 8000de2:	2b63      	cmp	r3, #99	@ 0x63
 8000de4:	dc46      	bgt.n	8000e74 <main+0x414>
 8000de6:	2b14      	cmp	r3, #20
 8000de8:	d002      	beq.n	8000df0 <main+0x390>
 8000dea:	2b5a      	cmp	r3, #90	@ 0x5a
 8000dec:	d015      	beq.n	8000e1a <main+0x3ba>
							 LightIsON = false;
						 }
						break;

					 default:
						break;
 8000dee:	e041      	b.n	8000e74 <main+0x414>
						 if(LightIsON == true)
 8000df0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d03f      	beq.n	8000e78 <main+0x418>
							 HAL_GPIO_WritePin(PIN_PB11_Light_GPIO_Port, PIN_PB11_Light_Pin,GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4822      	ldr	r0, [pc, #136]	@ (8000e88 <main+0x428>)
 8000dfe:	f001 fe37 	bl	8002a70 <HAL_GPIO_WritePin>
							 snprintf(txBuffer, sizeof(txBuffer), "Light sensor DARK disable LED\r\n");
 8000e02:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <main+0x42c>)
 8000e04:	21c8      	movs	r1, #200	@ 0xc8
 8000e06:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <main+0x424>)
 8000e08:	f003 fe46 	bl	8004a98 <sniprintf>
							 Send(txBuffer);
 8000e0c:	481d      	ldr	r0, [pc, #116]	@ (8000e84 <main+0x424>)
 8000e0e:	f7ff fc79 	bl	8000704 <Send>
							 LightIsON = false;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						break;
 8000e18:	e02e      	b.n	8000e78 <main+0x418>
						 if(LightIsON == false)
 8000e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d029      	beq.n	8000e7c <main+0x41c>
							 HAL_GPIO_WritePin(PIN_PB11_Light_GPIO_Port, PIN_PB11_Light_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <main+0x428>)
 8000e2e:	f001 fe1f 	bl	8002a70 <HAL_GPIO_WritePin>
							 snprintf(txBuffer, sizeof(txBuffer), "Light sensor NIGHT_OR_MORNING enable LED\r\n");
 8000e32:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <main+0x430>)
 8000e34:	21c8      	movs	r1, #200	@ 0xc8
 8000e36:	4813      	ldr	r0, [pc, #76]	@ (8000e84 <main+0x424>)
 8000e38:	f003 fe2e 	bl	8004a98 <sniprintf>
							 Send(txBuffer);
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <main+0x424>)
 8000e3e:	f7ff fc61 	bl	8000704 <Send>
							 LightIsON = true;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						break;
 8000e48:	e018      	b.n	8000e7c <main+0x41c>
						 if(LightIsON == true)
 8000e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d016      	beq.n	8000e80 <main+0x420>
							 HAL_GPIO_WritePin(PIN_PB11_Light_GPIO_Port, PIN_PB11_Light_Pin,GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <main+0x428>)
 8000e58:	f001 fe0a 	bl	8002a70 <HAL_GPIO_WritePin>
							 snprintf(txBuffer, sizeof(txBuffer), "Light sensor DARK disable LED\r\n");
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <main+0x42c>)
 8000e5e:	21c8      	movs	r1, #200	@ 0xc8
 8000e60:	4808      	ldr	r0, [pc, #32]	@ (8000e84 <main+0x424>)
 8000e62:	f003 fe19 	bl	8004a98 <sniprintf>
							 Send(txBuffer);
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <main+0x424>)
 8000e68:	f7ff fc4c 	bl	8000704 <Send>
							 LightIsON = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						break;
 8000e72:	e005      	b.n	8000e80 <main+0x420>
						break;
 8000e74:	bf00      	nop
 8000e76:	e632      	b.n	8000ade <main+0x7e>
						break;
 8000e78:	bf00      	nop
 8000e7a:	e630      	b.n	8000ade <main+0x7e>
						break;
 8000e7c:	bf00      	nop
 8000e7e:	e62e      	b.n	8000ade <main+0x7e>
						break;
 8000e80:	bf00      	nop
		 if(adc_ready == true)
 8000e82:	e62c      	b.n	8000ade <main+0x7e>
 8000e84:	2000007c 	.word	0x2000007c
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	080054d8 	.word	0x080054d8
 8000e90:	080054f8 	.word	0x080054f8

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	@ 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	@ 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fe2e 	bl	8004b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <SystemClock_Config+0xc8>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	4a26      	ldr	r2, [pc, #152]	@ (8000f5c <SystemClock_Config+0xc8>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <SystemClock_Config+0xc8>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <SystemClock_Config+0xcc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f04:	2319      	movs	r3, #25
 8000f06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000f08:	2390      	movs	r3, #144	@ 0x90
 8000f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f10:	2304      	movs	r3, #4
 8000f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fddd 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f24:	f000 f866 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2102      	movs	r1, #2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f83f 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f50:	f000 f850 	bl	8000ff4 <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	@ 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	adc_ready = true;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1); // jesli chcial bym wylaczyc timer
 8000f72:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f74:	f000 fbc6 	bl	8001704 <HAL_ADC_Stop_DMA>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200001fc 	.word	0x200001fc
 8000f84:	20000144 	.word	0x20000144

08000f88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d104      	bne.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  1 jako ON 0 jako OFF
		HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8000f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fa0:	f001 fd7f 	bl	8002aa2 <HAL_GPIO_TogglePin>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40000400 	.word	0x40000400
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {

    }
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Sprawdź, czy to Twój UART
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <HAL_UART_TxCpltCallback+0x24>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d102      	bne.n	8000fe0 <HAL_UART_TxCpltCallback+0x18>
    {
        isTransmissionComplete = true;
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_UART_TxCpltCallback+0x28>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
    }
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	20000078 	.word	0x20000078

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <Error_Handler+0x8>

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <HAL_MspInit+0x4c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <NMI_Handler+0x4>

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <MemManage_Handler+0x4>

08001068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <UsageFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a6:	f000 f9d5 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <TIM3_IRQHandler+0x10>)
 80010b6:	f002 fa19 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000288 	.word	0x20000288

080010c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <USART1_IRQHandler+0x10>)
 80010ca:	f002 fe17 	bl	8003cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002d0 	.word	0x200002d0

080010d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA2_Stream0_IRQHandler+0x10>)
 80010de:	f001 f8d9 	bl	8002294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000018c 	.word	0x2000018c

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f003 fcfa 	bl	8004b14 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20020000 	.word	0x20020000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000284 	.word	0x20000284
 8001154:	20000468 	.word	0x20000468

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_TIM3_Init+0x94>)
 800119a:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <MX_TIM3_Init+0x98>)
 800119c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011a0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80011a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011c2:	f002 f8e1 	bl	8003388 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011cc:	f7ff ff12 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011de:	f002 fa75 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011e8:	f7ff ff04 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_TIM3_Init+0x94>)
 80011fa:	f002 fc77 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001204:	f7ff fef6 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000288 	.word	0x20000288
 8001214:	40000400 	.word	0x40000400

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <HAL_TIM_Base_MspInit+0x48>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d115      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_TIM_Base_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0x4c>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_TIM_Base_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201d      	movs	r0, #29
 800124c:	f000 fe53 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001250:	201d      	movs	r0, #29
 8001252:	f000 fe6c 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40000400 	.word	0x40000400
 8001264:	40023800 	.word	0x40023800

08001268 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_USART1_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001274:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_USART1_UART_Init+0x4c>)
 80012a0:	f002 fca6 	bl	8003bf0 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f7ff fea3 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200002d0 	.word	0x200002d0
 80012b8:	40011000 	.word	0x40011000

080012bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <HAL_UART_MspInit+0x94>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d134      	bne.n	8001348 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_UART_MspInit+0x98>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_UART_MspInit+0x98>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_UART_MspInit+0x98>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_UART_MspInit+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <HAL_UART_MspInit+0x98>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_UART_MspInit+0x98>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001316:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4809      	ldr	r0, [pc, #36]	@ (8001358 <HAL_UART_MspInit+0x9c>)
 8001334:	f001 fa18 	bl	8002768 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2025      	movs	r0, #37	@ 0x25
 800133e:	f000 fdda 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001342:	2025      	movs	r0, #37	@ 0x25
 8001344:	f000 fdf3 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	@ 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40011000 	.word	0x40011000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001360:	f7ff fefa 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f003 fbc9 	bl	8004b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fb67 	bl	8000a60 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a0:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 80013a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013a8:	20000464 	.word	0x20000464

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fd81 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe0c 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd99 	bl	8001f4a <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 fd61 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	20000318 	.word	0x20000318

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000318 	.word	0x20000318

08001494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e033      	b.n	8001512 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff f9c8 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 faac 	bl	8001a44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
 8001502:	e001      	b.n	8001508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_Start_DMA+0x22>
 800153a:	2302      	movs	r3, #2
 800153c:	e0d0      	b.n	80016e0 <HAL_ADC_Start_DMA+0x1c4>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d018      	beq.n	8001586 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001564:	4b60      	ldr	r3, [pc, #384]	@ (80016e8 <HAL_ADC_Start_DMA+0x1cc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a60      	ldr	r2, [pc, #384]	@ (80016ec <HAL_ADC_Start_DMA+0x1d0>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9a      	lsrs	r2, r3, #18
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3b01      	subs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001594:	d107      	bne.n	80015a6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 8088 	bne.w	80016c6 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015f4:	d106      	bne.n	8001604 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f023 0206 	bic.w	r2, r3, #6
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44
 8001602:	e002      	b.n	800160a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_ADC_Start_DMA+0x1d4>)
 8001614:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	4a36      	ldr	r2, [pc, #216]	@ (80016f4 <HAL_ADC_Start_DMA+0x1d8>)
 800161c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001622:	4a35      	ldr	r2, [pc, #212]	@ (80016f8 <HAL_ADC_Start_DMA+0x1dc>)
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162a:	4a34      	ldr	r2, [pc, #208]	@ (80016fc <HAL_ADC_Start_DMA+0x1e0>)
 800162c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001636:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001646:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001656:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	334c      	adds	r3, #76	@ 0x4c
 8001662:	4619      	mov	r1, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f000 fd2a 	bl	80020c0 <HAL_DMA_Start_IT>
 800166c:	4603      	mov	r3, r0
 800166e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10f      	bne.n	800169c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d129      	bne.n	80016de <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	e020      	b.n	80016de <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_ADC_Start_DMA+0x1e4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d11b      	bne.n	80016de <HAL_ADC_Start_DMA+0x1c2>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d114      	bne.n	80016de <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	e00b      	b.n	80016de <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80016de:	7ffb      	ldrb	r3, [r7, #31]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	40012300 	.word	0x40012300
 80016f4:	08001c3d 	.word	0x08001c3d
 80016f8:	08001cf7 	.word	0x08001cf7
 80016fc:	08001d13 	.word	0x08001d13
 8001700:	40012000 	.word	0x40012000

08001704 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_Stop_DMA+0x1a>
 800171a:	2302      	movs	r3, #2
 800171c:	e048      	b.n	80017b0 <HAL_ADC_Stop_DMA+0xac>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d130      	bne.n	80017a6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d10f      	bne.n	8001782 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd02 	bl	8002170 <HAL_DMA_Abort>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001790:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e113      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x244>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d925      	bls.n	8001858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	3b1e      	subs	r3, #30
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e022      	b.n	800189e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	2207      	movs	r2, #7
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	4603      	mov	r3, r0
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4403      	add	r3, r0
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d824      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b05      	subs	r3, #5
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b05      	subs	r3, #5
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ee:	e04c      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b23      	subs	r3, #35	@ 0x23
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	@ 0x23
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001940:	e023      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b41      	subs	r3, #65	@ 0x41
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b41      	subs	r3, #65	@ 0x41
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <HAL_ADC_ConfigChannel+0x250>)
 800198c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a28      	ldr	r2, [pc, #160]	@ (8001a34 <HAL_ADC_ConfigChannel+0x254>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d10f      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b12      	cmp	r3, #18
 800199e:	d10b      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a34 <HAL_ADC_ConfigChannel+0x254>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_ADC_ConfigChannel+0x258>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x1f4>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d122      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <HAL_ADC_ConfigChannel+0x258>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d111      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_ADC_ConfigChannel+0x25c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_ADC_ConfigChannel+0x260>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9a      	lsrs	r2, r3, #18
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40012300 	.word	0x40012300
 8001a34:	40012000 	.word	0x40012000
 8001a38:	10000012 	.word	0x10000012
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4c:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <ADC_Init+0x1f0>)
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	021a      	lsls	r2, r3, #8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	4a58      	ldr	r2, [pc, #352]	@ (8001c38 <ADC_Init+0x1f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d022      	beq.n	8001b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6899      	ldr	r1, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e00f      	b.n	8001b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0202 	bic.w	r2, r2, #2
 8001b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
 8001b5c:	005a      	lsls	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	035a      	lsls	r2, r3, #13
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e007      	b.n	8001bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051a      	lsls	r2, r3, #20
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bfa:	025a      	lsls	r2, r3, #9
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	029a      	lsls	r2, r3, #10
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40012300 	.word	0x40012300
 8001c38:	0f000001 	.word	0x0f000001

08001c3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d13c      	bne.n	8001cd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d12b      	bne.n	8001cc8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d127      	bne.n	8001cc8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d119      	bne.n	8001cc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0220 	bic.w	r2, r2, #32
 8001ca2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7ff f94b 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cce:	e00e      	b.n	8001cee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff fd75 	bl	80017cc <HAL_ADC_ErrorCallback>
}
 8001ce2:	e004      	b.n	8001cee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d02:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff fd57 	bl	80017b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	@ 0x40
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f043 0204 	orr.w	r2, r3, #4
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fd4a 	bl	80017cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff3e 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff31 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffa2 	bl	8001e9c <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fa84 	bl	800147c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e099      	b.n	80020b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	e00f      	b.n	8001fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa2:	f7ff fa6b 	bl	800147c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d908      	bls.n	8001fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e078      	b.n	80020b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e8      	bne.n	8001fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <HAL_DMA_Init+0x158>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2b04      	cmp	r3, #4
 8002054:	d117      	bne.n	8002086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb01 	bl	8002670 <DMA_CheckFifoParam>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	@ 0x40
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002082:	2301      	movs	r3, #1
 8002084:	e016      	b.n	80020b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fab8 	bl	8002604 <DMA_CalcBaseAndBitshift>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	223f      	movs	r2, #63	@ 0x3f
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	f010803f 	.word	0xf010803f

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Start_IT+0x26>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e040      	b.n	8002168 <HAL_DMA_Start_IT+0xa8>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12f      	bne.n	800215a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa4a 	bl	80025a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	223f      	movs	r2, #63	@ 0x3f
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0216 	orr.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff f97d 	bl	800147c <HAL_GetTick>
 8002182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e052      	b.n	8002248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_Abort+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	e013      	b.n	800221c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff f942 	bl	800147c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d90c      	bls.n	800221c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e015      	b.n	8002248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	223f      	movs	r2, #63	@ 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00c      	b.n	8002288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2205      	movs	r2, #5
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a0:	4b8e      	ldr	r3, [pc, #568]	@ (80024dc <HAL_DMA_IRQHandler+0x248>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a8e      	ldr	r2, [pc, #568]	@ (80024e0 <HAL_DMA_IRQHandler+0x24c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	2208      	movs	r2, #8
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0204 	bic.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	2208      	movs	r2, #8
 80022ee:	409a      	lsls	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	2204      	movs	r2, #4
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	2210      	movs	r2, #16
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03c      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	2210      	movs	r2, #16
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e01f      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e016      	b.n	8002404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0208 	bic.w	r2, r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	2220      	movs	r2, #32
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 808f 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8087 	beq.w	8002534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2220      	movs	r2, #32
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b05      	cmp	r3, #5
 800243c:	d136      	bne.n	80024ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0216 	bic.w	r2, r2, #22
 800244c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800245c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_DMA_IRQHandler+0x1da>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	223f      	movs	r2, #63	@ 0x3f
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07e      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
        }
        return;
 80024aa:	e079      	b.n	80025a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e02c      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
 80024da:	bf00      	nop
 80024dc:	20000000 	.word	0x20000000
 80024e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e01e      	b.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002538:	2b00      	cmp	r3, #0
 800253a:	d032      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2205      	movs	r2, #5
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d307      	bcc.n	800257c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f2      	bne.n	8002560 <HAL_DMA_IRQHandler+0x2cc>
 800257a:	e000      	b.n	800257e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800257c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e000      	b.n	80025a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a0:	bf00      	nop
    }
  }
}
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	d108      	bne.n	80025e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025e6:	e007      	b.n	80025f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3b10      	subs	r3, #16
 8002614:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <DMA_CalcBaseAndBitshift+0x64>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800261e:	4a13      	ldr	r2, [pc, #76]	@ (800266c <DMA_CalcBaseAndBitshift+0x68>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d909      	bls.n	8002646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	@ 0x58
 8002644:	e007      	b.n	8002656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	aaaaaaab 	.word	0xaaaaaaab
 800266c:	0800553c 	.word	0x0800553c

08002670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11f      	bne.n	80026ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d856      	bhi.n	800273e <DMA_CheckFifoParam+0xce>
 8002690:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <DMA_CheckFifoParam+0x28>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026a9 	.word	0x080026a9
 800269c:	080026bb 	.word	0x080026bb
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	0800273f 	.word	0x0800273f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d046      	beq.n	8002742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e043      	b.n	8002742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026c2:	d140      	bne.n	8002746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c8:	e03d      	b.n	8002746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d2:	d121      	bne.n	8002718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d837      	bhi.n	800274a <DMA_CheckFifoParam+0xda>
 80026da:	a201      	add	r2, pc, #4	@ (adr r2, 80026e0 <DMA_CheckFifoParam+0x70>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	080026f7 	.word	0x080026f7
 80026e8:	080026f1 	.word	0x080026f1
 80026ec:	08002709 	.word	0x08002709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e030      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d025      	beq.n	800274e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e022      	b.n	800274e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002716:	e01c      	b.n	8002752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d903      	bls.n	8002726 <DMA_CheckFifoParam+0xb6>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d003      	beq.n	800272c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002724:	e018      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      break;
 800272a:	e015      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e00b      	b.n	8002756 <DMA_CheckFifoParam+0xe6>
      break;
 800273e:	bf00      	nop
 8002740:	e00a      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e008      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e006      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e004      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e002      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;   
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
    }
  } 
  
  return status; 
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e159      	b.n	8002a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8148 	bne.w	8002a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a2 	beq.w	8002a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b57      	ldr	r3, [pc, #348]	@ (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a56      	ldr	r2, [pc, #344]	@ (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b54      	ldr	r3, [pc, #336]	@ (8002a50 <HAL_GPIO_Init+0x2e8>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290a:	4a52      	ldr	r2, [pc, #328]	@ (8002a54 <HAL_GPIO_Init+0x2ec>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	@ (8002a58 <HAL_GPIO_Init+0x2f0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x202>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a48      	ldr	r2, [pc, #288]	@ (8002a5c <HAL_GPIO_Init+0x2f4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x1fe>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a47      	ldr	r2, [pc, #284]	@ (8002a60 <HAL_GPIO_Init+0x2f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x1fa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a46      	ldr	r2, [pc, #280]	@ (8002a64 <HAL_GPIO_Init+0x2fc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x1f6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a45      	ldr	r2, [pc, #276]	@ (8002a68 <HAL_GPIO_Init+0x300>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x1f2>
 8002956:	2304      	movs	r3, #4
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295a:	2307      	movs	r3, #7
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x204>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	@ (8002a54 <HAL_GPIO_Init+0x2ec>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a2f      	ldr	r2, [pc, #188]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a24      	ldr	r2, [pc, #144]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1a      	ldr	r2, [pc, #104]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <HAL_GPIO_Init+0x304>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f aea2 	bls.w	8002784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002af6:	4b88      	ldr	r3, [pc, #544]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fc74 	bl	800147c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fc70 	bl	800147c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc60 	bl	800147c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fc5c 	bl	800147c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fc15 	bl	800147c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fc11 	bl	800147c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fbf4 	bl	800147c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fbf0 	bl	800147c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fbd4 	bl	800147c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fbd0 	bl	800147c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fbbd 	bl	800147c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fbb9 	bl	800147c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fb79 	bl	800147c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe fb75 	bl	800147c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe fb3a 	bl	800147c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fb36 	bl	800147c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fb24 	bl	800147c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe fb20 	bl	800147c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe faf4 	bl	800147c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe faf0 	bl	800147c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fac9 	bl	800147c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fac5 	bl	800147c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fab2 	bl	800147c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe faae 	bl	800147c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f9e0 	bl	800147c <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe f9dc 	bl	800147c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f940 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08005524 	.word	0x08005524
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b090      	sub	sp, #64	@ 0x40
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b59      	ldr	r3, [pc, #356]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80a1 	bhi.w	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031cc:	e09b      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 80031d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d2:	e098      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b4d      	ldr	r3, [pc, #308]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	623b      	str	r3, [r7, #32]
 80031f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031fc:	2100      	movs	r1, #0
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 8003200:	fb03 f201 	mul.w	r2, r3, r1
 8003204:	2300      	movs	r3, #0
 8003206:	fb00 f303 	mul.w	r3, r0, r3
 800320a:	4413      	add	r3, r2
 800320c:	4a43      	ldr	r2, [pc, #268]	@ (800331c <HAL_RCC_GetSysClockFreq+0x188>)
 800320e:	fba0 1202 	umull	r1, r2, r0, r2
 8003212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003214:	460a      	mov	r2, r1
 8003216:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321a:	4413      	add	r3, r2
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	2200      	movs	r2, #0
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	61fa      	str	r2, [r7, #28]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800322e:	f7fd f82f 	bl	8000290 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4613      	mov	r3, r2
 8003238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323a:	e053      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4b35      	ldr	r3, [pc, #212]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	2200      	movs	r2, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	617a      	str	r2, [r7, #20]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800324e:	f04f 0b00 	mov.w	fp, #0
 8003252:	4652      	mov	r2, sl
 8003254:	465b      	mov	r3, fp
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0159      	lsls	r1, r3, #5
 8003260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003264:	0150      	lsls	r0, r2, #5
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	ebb2 080a 	subs.w	r8, r2, sl
 800326e:	eb63 090b 	sbc.w	r9, r3, fp
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800327e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003286:	ebb2 0408 	subs.w	r4, r2, r8
 800328a:	eb63 0509 	sbc.w	r5, r3, r9
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	00eb      	lsls	r3, r5, #3
 8003298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800329c:	00e2      	lsls	r2, r4, #3
 800329e:	4614      	mov	r4, r2
 80032a0:	461d      	mov	r5, r3
 80032a2:	eb14 030a 	adds.w	r3, r4, sl
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	eb45 030b 	adc.w	r3, r5, fp
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c4:	4621      	mov	r1, r4
 80032c6:	028a      	lsls	r2, r1, #10
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	2200      	movs	r2, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d8:	f7fc ffda 	bl	8000290 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	3301      	adds	r3, #1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x184>)
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003308:	4618      	mov	r0, r3
 800330a:	3740      	adds	r7, #64	@ 0x40
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	017d7840 	.word	0x017d7840

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800333c:	f7ff fff0 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	@ (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	08005534 	.word	0x08005534

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003364:	f7ff ffdc 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0b5b      	lsrs	r3, r3, #13
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	@ (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	08005534 	.word	0x08005534

08003388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e041      	b.n	800341e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd ff32 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fa70 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d001      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e044      	b.n	80034ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x6c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346a:	d013      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x6c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x6c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x6c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x6c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d010      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	e007      	b.n	80034c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40014000 	.word	0x40014000

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d020      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0202 	mvn.w	r2, #2
 8003520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f999 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f98b 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f99c 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f973 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f965 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f976 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0208 	mvn.w	r2, #8
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f94d 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f93f 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f950 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0210 	mvn.w	r2, #16
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2208      	movs	r2, #8
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f927 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f919 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f92a 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0201 	mvn.w	r2, #1
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fc98 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fab0 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8fb 	bl	8003896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa82 	bl	8003bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	@ 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	@ 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	@ 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	f000 f993 	bl	8003aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	f000 f97c 	bl	8003aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 f8f0 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	@ 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f949 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f90f 	bl	8003a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	@ 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f939 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	461a      	mov	r2, r3
 8003814:	f000 f8d0 	bl	80039b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	@ 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f929 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f920 	bl	8003a76 <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a37      	ldr	r2, [pc, #220]	@ (800399c <TIM_Base_SetConfig+0xf0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a34      	ldr	r2, [pc, #208]	@ (80039a0 <TIM_Base_SetConfig+0xf4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a33      	ldr	r2, [pc, #204]	@ (80039a4 <TIM_Base_SetConfig+0xf8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a32      	ldr	r2, [pc, #200]	@ (80039a8 <TIM_Base_SetConfig+0xfc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	@ (800399c <TIM_Base_SetConfig+0xf0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01b      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d017      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a25      	ldr	r2, [pc, #148]	@ (80039a0 <TIM_Base_SetConfig+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <TIM_Base_SetConfig+0xf8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a23      	ldr	r2, [pc, #140]	@ (80039a8 <TIM_Base_SetConfig+0xfc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <TIM_Base_SetConfig+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	@ (80039b0 <TIM_Base_SetConfig+0x104>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	@ (80039b4 <TIM_Base_SetConfig+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <TIM_Base_SetConfig+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d103      	bne.n	8003976 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40010000 	.word	0x40010000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800

080039b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f023 0201 	bic.w	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 030a 	bic.w	r3, r3, #10
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 0210 	bic.w	r2, r3, #16
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	031b      	lsls	r3, r3, #12
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f043 0307 	orr.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e050      	b.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d018      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b50:	d013      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d009      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10c      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40014000 	.word	0x40014000

08003bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e042      	b.n	8003c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fb50 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fcbb 	bl	80045b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d121      	bne.n	8003cee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_UART_Transmit_IT+0x26>
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e01a      	b.n	8003cf0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	@ 0x21
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ce8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0ba      	sub	sp, #232	@ 0xe8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_UART_IRQHandler+0x66>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fb6a 	bl	8004434 <UART_Receive_IT>
      return;
 8003d60:	e273      	b.n	800424a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80de 	beq.w	8003f28 <HAL_UART_IRQHandler+0x22c>
 8003d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80d1 	beq.w	8003f28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_UART_IRQHandler+0xae>
 8003d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f043 0201 	orr.w	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_UART_IRQHandler+0xd2>
 8003db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f043 0202 	orr.w	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_UART_IRQHandler+0xf6>
 8003dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_UART_IRQHandler+0x126>
 8003dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f043 0208 	orr.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 820a 	beq.w	8004240 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x14e>
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 faf5 	bl	8004434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <HAL_UART_IRQHandler+0x17a>
 8003e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d04f      	beq.n	8003f16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa00 	bl	800427c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d141      	bne.n	8003f0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3314      	adds	r3, #20
 8003e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1d9      	bne.n	8003e8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d013      	beq.n	8003f06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee2:	4a8a      	ldr	r2, [pc, #552]	@ (800410c <HAL_UART_IRQHandler+0x410>)
 8003ee4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe f9b0 	bl	8002250 <HAL_DMA_Abort_IT>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f00:	4610      	mov	r0, r2
 8003f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	e00e      	b.n	8003f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9a2 	bl	8004250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00a      	b.n	8003f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f99e 	bl	8004250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e006      	b.n	8003f24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f99a 	bl	8004250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f22:	e18d      	b.n	8004240 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	bf00      	nop
    return;
 8003f26:	e18b      	b.n	8004240 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	f040 8167 	bne.w	8004200 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8160 	beq.w	8004200 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8159 	beq.w	8004200 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	f040 80ce 	bne.w	8004110 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a9 	beq.w	80040dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f92:	429a      	cmp	r2, r3
 8003f94:	f080 80a2 	bcs.w	80040dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003faa:	f000 8088 	beq.w	80040be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1d9      	bne.n	8003fae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800400a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800401e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004022:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004026:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004030:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e1      	bne.n	8003ffa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800405a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800405c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004060:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e3      	bne.n	8004036 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800408c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e3      	bne.n	800407c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe f859 	bl	8002170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8c5 	bl	8004264 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80040da:	e0b3      	b.n	8004244 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040e4:	429a      	cmp	r2, r3
 80040e6:	f040 80ad 	bne.w	8004244 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f4:	f040 80a6 	bne.w	8004244 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f8ad 	bl	8004264 <HAL_UARTEx_RxEventCallback>
      return;
 800410a:	e09b      	b.n	8004244 <HAL_UART_IRQHandler+0x548>
 800410c:	08004343 	.word	0x08004343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 808e 	beq.w	8004248 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800412c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8089 	beq.w	8004248 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800415a:	647a      	str	r2, [r7, #68]	@ 0x44
 800415c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e3      	bne.n	8004136 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	623b      	str	r3, [r7, #32]
   return(result);
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004192:	633a      	str	r2, [r7, #48]	@ 0x30
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e3      	bne.n	800416e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	617b      	str	r3, [r7, #20]
   return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f833 	bl	8004264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041fe:	e023      	b.n	8004248 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_UART_IRQHandler+0x524>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8a3 	bl	8004364 <UART_Transmit_IT>
    return;
 800421e:	e014      	b.n	800424a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <HAL_UART_IRQHandler+0x54e>
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8e3 	bl	8004404 <UART_EndTransmit_IT>
    return;
 800423e:	e004      	b.n	800424a <HAL_UART_IRQHandler+0x54e>
    return;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <HAL_UART_IRQHandler+0x54e>
      return;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <HAL_UART_IRQHandler+0x54e>
      return;
 8004248:	bf00      	nop
  }
}
 800424a:	37e8      	adds	r7, #232	@ 0xe8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b095      	sub	sp, #84	@ 0x54
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800429a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d119      	bne.n	8004328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	60bb      	str	r3, [r7, #8]
   return(result);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	647b      	str	r3, [r7, #68]	@ 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004314:	61ba      	str	r2, [r7, #24]
 8004316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	613b      	str	r3, [r7, #16]
   return(result);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004336:	bf00      	nop
 8004338:	3754      	adds	r7, #84	@ 0x54
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ff7a 	bl	8004250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b21      	cmp	r3, #33	@ 0x21
 8004376:	d13e      	bne.n	80043f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d114      	bne.n	80043ac <UART_Transmit_IT+0x48>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d110      	bne.n	80043ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e008      	b.n	80043be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	1c59      	adds	r1, r3, #1
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6211      	str	r1, [r2, #32]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fc fdcf 	bl	8000fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	@ 0x30
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b22      	cmp	r3, #34	@ 0x22
 800444e:	f040 80aa 	bne.w	80045a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d115      	bne.n	8004488 <UART_Receive_IT+0x54>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	b29a      	uxth	r2, r3
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	@ 0x28
 8004486:	e024      	b.n	80044d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004496:	d007      	beq.n	80044a8 <UART_Receive_IT+0x74>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <UART_Receive_IT+0x82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e008      	b.n	80044c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4619      	mov	r1, r3
 80044e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15d      	bne.n	80045a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0220 	bic.w	r2, r2, #32
 80044f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	2b01      	cmp	r3, #1
 800452a:	d135      	bne.n	8004598 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f023 0310 	bic.w	r3, r3, #16
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004552:	623a      	str	r2, [r7, #32]
 8004554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d10a      	bne.n	800458a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fe67 	bl	8004264 <HAL_UARTEx_RxEventCallback>
 8004596:	e002      	b.n	800459e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc fd0b 	bl	8000fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e002      	b.n	80045a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3730      	adds	r7, #48	@ 0x30
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b0c0      	sub	sp, #256	@ 0x100
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	ea40 0301 	orr.w	r3, r0, r1
 80045d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004608:	f021 010c 	bic.w	r1, r1, #12
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004616:	430b      	orrs	r3, r1
 8004618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	6999      	ldr	r1, [r3, #24]
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	ea40 0301 	orr.w	r3, r0, r1
 8004636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8f      	ldr	r3, [pc, #572]	@ (800487c <UART_SetConfig+0x2cc>)
 8004640:	429a      	cmp	r2, r3
 8004642:	d005      	beq.n	8004650 <UART_SetConfig+0xa0>
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b8d      	ldr	r3, [pc, #564]	@ (8004880 <UART_SetConfig+0x2d0>)
 800464c:	429a      	cmp	r2, r3
 800464e:	d104      	bne.n	800465a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe fe86 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8004654:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004658:	e003      	b.n	8004662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800465a:	f7fe fe6d 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 800465e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466c:	f040 810c 	bne.w	8004888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004674:	2200      	movs	r2, #0
 8004676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800467a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800467e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	1891      	adds	r1, r2, r2
 8004688:	65b9      	str	r1, [r7, #88]	@ 0x58
 800468a:	415b      	adcs	r3, r3
 800468c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800468e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004692:	4621      	mov	r1, r4
 8004694:	eb12 0801 	adds.w	r8, r2, r1
 8004698:	4629      	mov	r1, r5
 800469a:	eb43 0901 	adc.w	r9, r3, r1
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046b2:	4690      	mov	r8, r2
 80046b4:	4699      	mov	r9, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	eb18 0303 	adds.w	r3, r8, r3
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046c0:	462b      	mov	r3, r5
 80046c2:	eb49 0303 	adc.w	r3, r9, r3
 80046c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046de:	460b      	mov	r3, r1
 80046e0:	18db      	adds	r3, r3, r3
 80046e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e4:	4613      	mov	r3, r2
 80046e6:	eb42 0303 	adc.w	r3, r2, r3
 80046ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046f4:	f7fb fdcc 	bl	8000290 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4b61      	ldr	r3, [pc, #388]	@ (8004884 <UART_SetConfig+0x2d4>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011c      	lsls	r4, r3, #4
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004710:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004720:	415b      	adcs	r3, r3
 8004722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004728:	4641      	mov	r1, r8
 800472a:	eb12 0a01 	adds.w	sl, r2, r1
 800472e:	4649      	mov	r1, r9
 8004730:	eb43 0b01 	adc.w	fp, r3, r1
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004748:	4692      	mov	sl, r2
 800474a:	469b      	mov	fp, r3
 800474c:	4643      	mov	r3, r8
 800474e:	eb1a 0303 	adds.w	r3, sl, r3
 8004752:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004756:	464b      	mov	r3, r9
 8004758:	eb4b 0303 	adc.w	r3, fp, r3
 800475c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800476c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004774:	460b      	mov	r3, r1
 8004776:	18db      	adds	r3, r3, r3
 8004778:	643b      	str	r3, [r7, #64]	@ 0x40
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
 8004782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800478a:	f7fb fd81 	bl	8000290 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4611      	mov	r1, r2
 8004794:	4b3b      	ldr	r3, [pc, #236]	@ (8004884 <UART_SetConfig+0x2d4>)
 8004796:	fba3 2301 	umull	r2, r3, r3, r1
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2264      	movs	r2, #100	@ 0x64
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047aa:	4b36      	ldr	r3, [pc, #216]	@ (8004884 <UART_SetConfig+0x2d4>)
 80047ac:	fba3 2302 	umull	r2, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047b8:	441c      	add	r4, r3
 80047ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047d4:	415b      	adcs	r3, r3
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047dc:	4641      	mov	r1, r8
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047e2:	4649      	mov	r1, r9
 80047e4:	414b      	adcs	r3, r1
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047f4:	4659      	mov	r1, fp
 80047f6:	00cb      	lsls	r3, r1, #3
 80047f8:	4651      	mov	r1, sl
 80047fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fe:	4651      	mov	r1, sl
 8004800:	00ca      	lsls	r2, r1, #3
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	4603      	mov	r3, r0
 8004808:	4642      	mov	r2, r8
 800480a:	189b      	adds	r3, r3, r2
 800480c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004810:	464b      	mov	r3, r9
 8004812:	460a      	mov	r2, r1
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004828:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800482c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004830:	460b      	mov	r3, r1
 8004832:	18db      	adds	r3, r3, r3
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004836:	4613      	mov	r3, r2
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004846:	f7fb fd23 	bl	8000290 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <UART_SetConfig+0x2d4>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	@ 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	3332      	adds	r3, #50	@ 0x32
 8004862:	4a08      	ldr	r2, [pc, #32]	@ (8004884 <UART_SetConfig+0x2d4>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 0207 	and.w	r2, r3, #7
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4422      	add	r2, r4
 8004876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004878:	e106      	b.n	8004a88 <UART_SetConfig+0x4d8>
 800487a:	bf00      	nop
 800487c:	40011000 	.word	0x40011000
 8004880:	40011400 	.word	0x40011400
 8004884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004892:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800489a:	4642      	mov	r2, r8
 800489c:	464b      	mov	r3, r9
 800489e:	1891      	adds	r1, r2, r2
 80048a0:	6239      	str	r1, [r7, #32]
 80048a2:	415b      	adcs	r3, r3
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048aa:	4641      	mov	r1, r8
 80048ac:	1854      	adds	r4, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb43 0501 	adc.w	r5, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048d0:	464b      	mov	r3, r9
 80048d2:	eb45 0303 	adc.w	r3, r5, r3
 80048d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048f6:	4629      	mov	r1, r5
 80048f8:	008b      	lsls	r3, r1, #2
 80048fa:	4621      	mov	r1, r4
 80048fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004900:	4621      	mov	r1, r4
 8004902:	008a      	lsls	r2, r1, #2
 8004904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004908:	f7fb fcc2 	bl	8000290 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b60      	ldr	r3, [pc, #384]	@ (8004a94 <UART_SetConfig+0x4e4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004924:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	61b9      	str	r1, [r7, #24]
 8004934:	415b      	adcs	r3, r3
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6139      	str	r1, [r7, #16]
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004986:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004994:	4649      	mov	r1, r9
 8004996:	008b      	lsls	r3, r1, #2
 8004998:	4641      	mov	r1, r8
 800499a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499e:	4641      	mov	r1, r8
 80049a0:	008a      	lsls	r2, r1, #2
 80049a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049a6:	f7fb fc73 	bl	8000290 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 2301 	umull	r2, r3, r3, r1
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2264      	movs	r2, #100	@ 0x64
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	1acb      	subs	r3, r1, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	@ 0x32
 80049c4:	4a33      	ldr	r2, [pc, #204]	@ (8004a94 <UART_SetConfig+0x4e4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d0:	441c      	add	r4, r3
 80049d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d6:	2200      	movs	r2, #0
 80049d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049da:	677a      	str	r2, [r7, #116]	@ 0x74
 80049dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	415b      	adcs	r3, r3
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a22:	464b      	mov	r3, r9
 8004a24:	460a      	mov	r2, r1
 8004a26:	eb42 0303 	adc.w	r3, r2, r3
 8004a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a36:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a44:	4649      	mov	r1, r9
 8004a46:	008b      	lsls	r3, r1, #2
 8004a48:	4641      	mov	r1, r8
 8004a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a4e:	4641      	mov	r1, r8
 8004a50:	008a      	lsls	r2, r1, #2
 8004a52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a56:	f7fb fc1b 	bl	8000290 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <UART_SetConfig+0x4e4>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	@ 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	3332      	adds	r3, #50	@ 0x32
 8004a72:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <UART_SetConfig+0x4e4>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4422      	add	r2, r4
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a94:	51eb851f 	.word	0x51eb851f

08004a98 <sniprintf>:
 8004a98:	b40c      	push	{r2, r3}
 8004a9a:	b530      	push	{r4, r5, lr}
 8004a9c:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <sniprintf+0x68>)
 8004a9e:	1e0c      	subs	r4, r1, #0
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	b09d      	sub	sp, #116	@ 0x74
 8004aa4:	da08      	bge.n	8004ab8 <sniprintf+0x20>
 8004aa6:	238b      	movs	r3, #139	@ 0x8b
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8004aae:	b01d      	add	sp, #116	@ 0x74
 8004ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab4:	b002      	add	sp, #8
 8004ab6:	4770      	bx	lr
 8004ab8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004ac6:	bf14      	ite	ne
 8004ac8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004acc:	4623      	moveq	r3, r4
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	9307      	str	r3, [sp, #28]
 8004ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ad6:	9002      	str	r0, [sp, #8]
 8004ad8:	9006      	str	r0, [sp, #24]
 8004ada:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ade:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ae0:	ab21      	add	r3, sp, #132	@ 0x84
 8004ae2:	a902      	add	r1, sp, #8
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	f000 f994 	bl	8004e14 <_svfiprintf_r>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	bfbc      	itt	lt
 8004af0:	238b      	movlt	r3, #139	@ 0x8b
 8004af2:	602b      	strlt	r3, [r5, #0]
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	d0da      	beq.n	8004aae <sniprintf+0x16>
 8004af8:	9b02      	ldr	r3, [sp, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e7d6      	b.n	8004aae <sniprintf+0x16>
 8004b00:	2000000c 	.word	0x2000000c

08004b04 <memset>:
 8004b04:	4402      	add	r2, r0
 8004b06:	4603      	mov	r3, r0
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d100      	bne.n	8004b0e <memset+0xa>
 8004b0c:	4770      	bx	lr
 8004b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b12:	e7f9      	b.n	8004b08 <memset+0x4>

08004b14 <__errno>:
 8004b14:	4b01      	ldr	r3, [pc, #4]	@ (8004b1c <__errno+0x8>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	2000000c 	.word	0x2000000c

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4d0d      	ldr	r5, [pc, #52]	@ (8004b58 <__libc_init_array+0x38>)
 8004b24:	4c0d      	ldr	r4, [pc, #52]	@ (8004b5c <__libc_init_array+0x3c>)
 8004b26:	1b64      	subs	r4, r4, r5
 8004b28:	10a4      	asrs	r4, r4, #2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	42a6      	cmp	r6, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	4d0b      	ldr	r5, [pc, #44]	@ (8004b60 <__libc_init_array+0x40>)
 8004b32:	4c0c      	ldr	r4, [pc, #48]	@ (8004b64 <__libc_init_array+0x44>)
 8004b34:	f000 fc64 	bl	8005400 <_init>
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	42a6      	cmp	r6, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b48:	4798      	blx	r3
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b52:	4798      	blx	r3
 8004b54:	3601      	adds	r6, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	08005580 	.word	0x08005580
 8004b5c:	08005580 	.word	0x08005580
 8004b60:	08005580 	.word	0x08005580
 8004b64:	08005584 	.word	0x08005584

08004b68 <__retarget_lock_acquire_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_release_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <_free_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d041      	beq.n	8004bf8 <_free_r+0x8c>
 8004b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b78:	1f0c      	subs	r4, r1, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfb8      	it	lt
 8004b7e:	18e4      	addlt	r4, r4, r3
 8004b80:	f000 f8e0 	bl	8004d44 <__malloc_lock>
 8004b84:	4a1d      	ldr	r2, [pc, #116]	@ (8004bfc <_free_r+0x90>)
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	b933      	cbnz	r3, 8004b98 <_free_r+0x2c>
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b94:	f000 b8dc 	b.w	8004d50 <__malloc_unlock>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d908      	bls.n	8004bae <_free_r+0x42>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	1821      	adds	r1, r4, r0
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	e7ed      	b.n	8004b8a <_free_r+0x1e>
 8004bae:	461a      	mov	r2, r3
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b10b      	cbz	r3, 8004bb8 <_free_r+0x4c>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d9fa      	bls.n	8004bae <_free_r+0x42>
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	1850      	adds	r0, r2, r1
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d10b      	bne.n	8004bd8 <_free_r+0x6c>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	4401      	add	r1, r0
 8004bc4:	1850      	adds	r0, r2, r1
 8004bc6:	4283      	cmp	r3, r0
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	d1e0      	bne.n	8004b8e <_free_r+0x22>
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	4408      	add	r0, r1
 8004bd4:	6010      	str	r0, [r2, #0]
 8004bd6:	e7da      	b.n	8004b8e <_free_r+0x22>
 8004bd8:	d902      	bls.n	8004be0 <_free_r+0x74>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	e7d6      	b.n	8004b8e <_free_r+0x22>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf04      	itt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	bf04      	itt	eq
 8004bf0:	1809      	addeq	r1, r1, r0
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	6054      	str	r4, [r2, #4]
 8004bf6:	e7ca      	b.n	8004b8e <_free_r+0x22>
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000460 	.word	0x20000460

08004c00 <sbrk_aligned>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0f      	ldr	r6, [pc, #60]	@ (8004c40 <sbrk_aligned+0x40>)
 8004c04:	460c      	mov	r4, r1
 8004c06:	6831      	ldr	r1, [r6, #0]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	b911      	cbnz	r1, 8004c12 <sbrk_aligned+0x12>
 8004c0c:	f000 fba4 	bl	8005358 <_sbrk_r>
 8004c10:	6030      	str	r0, [r6, #0]
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 fb9f 	bl	8005358 <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d103      	bne.n	8004c26 <sbrk_aligned+0x26>
 8004c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c22:	4620      	mov	r0, r4
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	1cc4      	adds	r4, r0, #3
 8004c28:	f024 0403 	bic.w	r4, r4, #3
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d0f8      	beq.n	8004c22 <sbrk_aligned+0x22>
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 fb90 	bl	8005358 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1f2      	bne.n	8004c22 <sbrk_aligned+0x22>
 8004c3c:	e7ef      	b.n	8004c1e <sbrk_aligned+0x1e>
 8004c3e:	bf00      	nop
 8004c40:	2000045c 	.word	0x2000045c

08004c44 <_malloc_r>:
 8004c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c48:	1ccd      	adds	r5, r1, #3
 8004c4a:	f025 0503 	bic.w	r5, r5, #3
 8004c4e:	3508      	adds	r5, #8
 8004c50:	2d0c      	cmp	r5, #12
 8004c52:	bf38      	it	cc
 8004c54:	250c      	movcc	r5, #12
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	4606      	mov	r6, r0
 8004c5a:	db01      	blt.n	8004c60 <_malloc_r+0x1c>
 8004c5c:	42a9      	cmp	r1, r5
 8004c5e:	d904      	bls.n	8004c6a <_malloc_r+0x26>
 8004c60:	230c      	movs	r3, #12
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d40 <_malloc_r+0xfc>
 8004c6e:	f000 f869 	bl	8004d44 <__malloc_lock>
 8004c72:	f8d8 3000 	ldr.w	r3, [r8]
 8004c76:	461c      	mov	r4, r3
 8004c78:	bb44      	cbnz	r4, 8004ccc <_malloc_r+0x88>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff ffbf 	bl	8004c00 <sbrk_aligned>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	4604      	mov	r4, r0
 8004c86:	d158      	bne.n	8004d3a <_malloc_r+0xf6>
 8004c88:	f8d8 4000 	ldr.w	r4, [r8]
 8004c8c:	4627      	mov	r7, r4
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d143      	bne.n	8004d1a <_malloc_r+0xd6>
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	d04b      	beq.n	8004d2e <_malloc_r+0xea>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	eb04 0903 	add.w	r9, r4, r3
 8004ca0:	f000 fb5a 	bl	8005358 <_sbrk_r>
 8004ca4:	4581      	cmp	r9, r0
 8004ca6:	d142      	bne.n	8004d2e <_malloc_r+0xea>
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	1a6d      	subs	r5, r5, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff ffa6 	bl	8004c00 <sbrk_aligned>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d03a      	beq.n	8004d2e <_malloc_r+0xea>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	442b      	add	r3, r5
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	bb62      	cbnz	r2, 8004d20 <_malloc_r+0xdc>
 8004cc6:	f8c8 7000 	str.w	r7, [r8]
 8004cca:	e00f      	b.n	8004cec <_malloc_r+0xa8>
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	1b52      	subs	r2, r2, r5
 8004cd0:	d420      	bmi.n	8004d14 <_malloc_r+0xd0>
 8004cd2:	2a0b      	cmp	r2, #11
 8004cd4:	d917      	bls.n	8004d06 <_malloc_r+0xc2>
 8004cd6:	1961      	adds	r1, r4, r5
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	6025      	str	r5, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	6059      	strne	r1, [r3, #4]
 8004ce0:	6863      	ldr	r3, [r4, #4]
 8004ce2:	bf08      	it	eq
 8004ce4:	f8c8 1000 	streq.w	r1, [r8]
 8004ce8:	5162      	str	r2, [r4, r5]
 8004cea:	604b      	str	r3, [r1, #4]
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 f82f 	bl	8004d50 <__malloc_unlock>
 8004cf2:	f104 000b 	add.w	r0, r4, #11
 8004cf6:	1d23      	adds	r3, r4, #4
 8004cf8:	f020 0007 	bic.w	r0, r0, #7
 8004cfc:	1ac2      	subs	r2, r0, r3
 8004cfe:	bf1c      	itt	ne
 8004d00:	1a1b      	subne	r3, r3, r0
 8004d02:	50a3      	strne	r3, [r4, r2]
 8004d04:	e7af      	b.n	8004c66 <_malloc_r+0x22>
 8004d06:	6862      	ldr	r2, [r4, #4]
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	bf0c      	ite	eq
 8004d0c:	f8c8 2000 	streq.w	r2, [r8]
 8004d10:	605a      	strne	r2, [r3, #4]
 8004d12:	e7eb      	b.n	8004cec <_malloc_r+0xa8>
 8004d14:	4623      	mov	r3, r4
 8004d16:	6864      	ldr	r4, [r4, #4]
 8004d18:	e7ae      	b.n	8004c78 <_malloc_r+0x34>
 8004d1a:	463c      	mov	r4, r7
 8004d1c:	687f      	ldr	r7, [r7, #4]
 8004d1e:	e7b6      	b.n	8004c8e <_malloc_r+0x4a>
 8004d20:	461a      	mov	r2, r3
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	d1fb      	bne.n	8004d20 <_malloc_r+0xdc>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6053      	str	r3, [r2, #4]
 8004d2c:	e7de      	b.n	8004cec <_malloc_r+0xa8>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f80c 	bl	8004d50 <__malloc_unlock>
 8004d38:	e794      	b.n	8004c64 <_malloc_r+0x20>
 8004d3a:	6005      	str	r5, [r0, #0]
 8004d3c:	e7d6      	b.n	8004cec <_malloc_r+0xa8>
 8004d3e:	bf00      	nop
 8004d40:	20000460 	.word	0x20000460

08004d44 <__malloc_lock>:
 8004d44:	4801      	ldr	r0, [pc, #4]	@ (8004d4c <__malloc_lock+0x8>)
 8004d46:	f7ff bf0f 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000458 	.word	0x20000458

08004d50 <__malloc_unlock>:
 8004d50:	4801      	ldr	r0, [pc, #4]	@ (8004d58 <__malloc_unlock+0x8>)
 8004d52:	f7ff bf0a 	b.w	8004b6a <__retarget_lock_release_recursive>
 8004d56:	bf00      	nop
 8004d58:	20000458 	.word	0x20000458

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	688e      	ldr	r6, [r1, #8]
 8004d62:	461f      	mov	r7, r3
 8004d64:	42be      	cmp	r6, r7
 8004d66:	680b      	ldr	r3, [r1, #0]
 8004d68:	4682      	mov	sl, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4690      	mov	r8, r2
 8004d6e:	d82d      	bhi.n	8004dcc <__ssputs_r+0x70>
 8004d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d78:	d026      	beq.n	8004dc8 <__ssputs_r+0x6c>
 8004d7a:	6965      	ldr	r5, [r4, #20]
 8004d7c:	6909      	ldr	r1, [r1, #16]
 8004d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d82:	eba3 0901 	sub.w	r9, r3, r1
 8004d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d8a:	1c7b      	adds	r3, r7, #1
 8004d8c:	444b      	add	r3, r9
 8004d8e:	106d      	asrs	r5, r5, #1
 8004d90:	429d      	cmp	r5, r3
 8004d92:	bf38      	it	cc
 8004d94:	461d      	movcc	r5, r3
 8004d96:	0553      	lsls	r3, r2, #21
 8004d98:	d527      	bpl.n	8004dea <__ssputs_r+0x8e>
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7ff ff52 	bl	8004c44 <_malloc_r>
 8004da0:	4606      	mov	r6, r0
 8004da2:	b360      	cbz	r0, 8004dfe <__ssputs_r+0xa2>
 8004da4:	6921      	ldr	r1, [r4, #16]
 8004da6:	464a      	mov	r2, r9
 8004da8:	f000 fae6 	bl	8005378 <memcpy>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	6126      	str	r6, [r4, #16]
 8004dba:	6165      	str	r5, [r4, #20]
 8004dbc:	444e      	add	r6, r9
 8004dbe:	eba5 0509 	sub.w	r5, r5, r9
 8004dc2:	6026      	str	r6, [r4, #0]
 8004dc4:	60a5      	str	r5, [r4, #8]
 8004dc6:	463e      	mov	r6, r7
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	d900      	bls.n	8004dce <__ssputs_r+0x72>
 8004dcc:	463e      	mov	r6, r7
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	f000 faa6 	bl	8005324 <memmove>
 8004dd8:	68a3      	ldr	r3, [r4, #8]
 8004dda:	1b9b      	subs	r3, r3, r6
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	4433      	add	r3, r6
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	2000      	movs	r0, #0
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	462a      	mov	r2, r5
 8004dec:	f000 fad2 	bl	8005394 <_realloc_r>
 8004df0:	4606      	mov	r6, r0
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d1e0      	bne.n	8004db8 <__ssputs_r+0x5c>
 8004df6:	6921      	ldr	r1, [r4, #16]
 8004df8:	4650      	mov	r0, sl
 8004dfa:	f7ff feb7 	bl	8004b6c <_free_r>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	f8ca 3000 	str.w	r3, [sl]
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e7e9      	b.n	8004de6 <__ssputs_r+0x8a>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	4698      	mov	r8, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	061b      	lsls	r3, r3, #24
 8004e1e:	b09d      	sub	sp, #116	@ 0x74
 8004e20:	4607      	mov	r7, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	4614      	mov	r4, r2
 8004e26:	d510      	bpl.n	8004e4a <_svfiprintf_r+0x36>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b973      	cbnz	r3, 8004e4a <_svfiprintf_r+0x36>
 8004e2c:	2140      	movs	r1, #64	@ 0x40
 8004e2e:	f7ff ff09 	bl	8004c44 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b930      	cbnz	r0, 8004e46 <_svfiprintf_r+0x32>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b01d      	add	sp, #116	@ 0x74
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	2340      	movs	r3, #64	@ 0x40
 8004e48:	616b      	str	r3, [r5, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4e:	2320      	movs	r3, #32
 8004e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e58:	2330      	movs	r3, #48	@ 0x30
 8004e5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ff8 <_svfiprintf_r+0x1e4>
 8004e5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e62:	f04f 0901 	mov.w	r9, #1
 8004e66:	4623      	mov	r3, r4
 8004e68:	469a      	mov	sl, r3
 8004e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6e:	b10a      	cbz	r2, 8004e74 <_svfiprintf_r+0x60>
 8004e70:	2a25      	cmp	r2, #37	@ 0x25
 8004e72:	d1f9      	bne.n	8004e68 <_svfiprintf_r+0x54>
 8004e74:	ebba 0b04 	subs.w	fp, sl, r4
 8004e78:	d00b      	beq.n	8004e92 <_svfiprintf_r+0x7e>
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff ff6b 	bl	8004d5c <__ssputs_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	f000 80a7 	beq.w	8004fda <_svfiprintf_r+0x1c6>
 8004e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e8e:	445a      	add	r2, fp
 8004e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e92:	f89a 3000 	ldrb.w	r3, [sl]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 809f 	beq.w	8004fda <_svfiprintf_r+0x1c6>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea6:	f10a 0a01 	add.w	sl, sl, #1
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	9307      	str	r3, [sp, #28]
 8004eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eb4:	4654      	mov	r4, sl
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	484e      	ldr	r0, [pc, #312]	@ (8004ff8 <_svfiprintf_r+0x1e4>)
 8004ebe:	f7fb f997 	bl	80001f0 <memchr>
 8004ec2:	9a04      	ldr	r2, [sp, #16]
 8004ec4:	b9d8      	cbnz	r0, 8004efe <_svfiprintf_r+0xea>
 8004ec6:	06d0      	lsls	r0, r2, #27
 8004ec8:	bf44      	itt	mi
 8004eca:	2320      	movmi	r3, #32
 8004ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed0:	0711      	lsls	r1, r2, #28
 8004ed2:	bf44      	itt	mi
 8004ed4:	232b      	movmi	r3, #43	@ 0x2b
 8004ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee0:	d015      	beq.n	8004f0e <_svfiprintf_r+0xfa>
 8004ee2:	9a07      	ldr	r2, [sp, #28]
 8004ee4:	4654      	mov	r4, sl
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f04f 0c0a 	mov.w	ip, #10
 8004eec:	4621      	mov	r1, r4
 8004eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef2:	3b30      	subs	r3, #48	@ 0x30
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	d94b      	bls.n	8004f90 <_svfiprintf_r+0x17c>
 8004ef8:	b1b0      	cbz	r0, 8004f28 <_svfiprintf_r+0x114>
 8004efa:	9207      	str	r2, [sp, #28]
 8004efc:	e014      	b.n	8004f28 <_svfiprintf_r+0x114>
 8004efe:	eba0 0308 	sub.w	r3, r0, r8
 8004f02:	fa09 f303 	lsl.w	r3, r9, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	46a2      	mov	sl, r4
 8004f0c:	e7d2      	b.n	8004eb4 <_svfiprintf_r+0xa0>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfbb      	ittet	lt
 8004f1a:	425b      	neglt	r3, r3
 8004f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f20:	9307      	strge	r3, [sp, #28]
 8004f22:	9307      	strlt	r3, [sp, #28]
 8004f24:	bfb8      	it	lt
 8004f26:	9204      	strlt	r2, [sp, #16]
 8004f28:	7823      	ldrb	r3, [r4, #0]
 8004f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2c:	d10a      	bne.n	8004f44 <_svfiprintf_r+0x130>
 8004f2e:	7863      	ldrb	r3, [r4, #1]
 8004f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f32:	d132      	bne.n	8004f9a <_svfiprintf_r+0x186>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f40:	3402      	adds	r4, #2
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005008 <_svfiprintf_r+0x1f4>
 8004f48:	7821      	ldrb	r1, [r4, #0]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	4650      	mov	r0, sl
 8004f4e:	f7fb f94f 	bl	80001f0 <memchr>
 8004f52:	b138      	cbz	r0, 8004f64 <_svfiprintf_r+0x150>
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	2240      	movs	r2, #64	@ 0x40
 8004f5c:	4082      	lsls	r2, r0
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	3401      	adds	r4, #1
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	4824      	ldr	r0, [pc, #144]	@ (8004ffc <_svfiprintf_r+0x1e8>)
 8004f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f6e:	2206      	movs	r2, #6
 8004f70:	f7fb f93e 	bl	80001f0 <memchr>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d036      	beq.n	8004fe6 <_svfiprintf_r+0x1d2>
 8004f78:	4b21      	ldr	r3, [pc, #132]	@ (8005000 <_svfiprintf_r+0x1ec>)
 8004f7a:	bb1b      	cbnz	r3, 8004fc4 <_svfiprintf_r+0x1b0>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	3307      	adds	r3, #7
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	3308      	adds	r3, #8
 8004f86:	9303      	str	r3, [sp, #12]
 8004f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f8a:	4433      	add	r3, r6
 8004f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8e:	e76a      	b.n	8004e66 <_svfiprintf_r+0x52>
 8004f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f94:	460c      	mov	r4, r1
 8004f96:	2001      	movs	r0, #1
 8004f98:	e7a8      	b.n	8004eec <_svfiprintf_r+0xd8>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	3401      	adds	r4, #1
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f04f 0c0a 	mov.w	ip, #10
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fac:	3a30      	subs	r2, #48	@ 0x30
 8004fae:	2a09      	cmp	r2, #9
 8004fb0:	d903      	bls.n	8004fba <_svfiprintf_r+0x1a6>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0c6      	beq.n	8004f44 <_svfiprintf_r+0x130>
 8004fb6:	9105      	str	r1, [sp, #20]
 8004fb8:	e7c4      	b.n	8004f44 <_svfiprintf_r+0x130>
 8004fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e7f0      	b.n	8004fa6 <_svfiprintf_r+0x192>
 8004fc4:	ab03      	add	r3, sp, #12
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4b0e      	ldr	r3, [pc, #56]	@ (8005004 <_svfiprintf_r+0x1f0>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	4638      	mov	r0, r7
 8004fd0:	f3af 8000 	nop.w
 8004fd4:	1c42      	adds	r2, r0, #1
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	d1d6      	bne.n	8004f88 <_svfiprintf_r+0x174>
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	065b      	lsls	r3, r3, #25
 8004fde:	f53f af2d 	bmi.w	8004e3c <_svfiprintf_r+0x28>
 8004fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fe4:	e72c      	b.n	8004e40 <_svfiprintf_r+0x2c>
 8004fe6:	ab03      	add	r3, sp, #12
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	462a      	mov	r2, r5
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <_svfiprintf_r+0x1f0>)
 8004fee:	a904      	add	r1, sp, #16
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f000 f879 	bl	80050e8 <_printf_i>
 8004ff6:	e7ed      	b.n	8004fd4 <_svfiprintf_r+0x1c0>
 8004ff8:	08005544 	.word	0x08005544
 8004ffc:	0800554e 	.word	0x0800554e
 8005000:	00000000 	.word	0x00000000
 8005004:	08004d5d 	.word	0x08004d5d
 8005008:	0800554a 	.word	0x0800554a

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4698      	mov	r8, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800501c:	4293      	cmp	r3, r2
 800501e:	bfb8      	it	lt
 8005020:	4613      	movlt	r3, r2
 8005022:	6033      	str	r3, [r6, #0]
 8005024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005028:	4607      	mov	r7, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc26      	bgt.n	80050a2 <_printf_common+0x96>
 8005054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	3b00      	subs	r3, #0
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42b      	bmi.n	80050bc <_printf_common+0xb0>
 8005064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005068:	4641      	mov	r1, r8
 800506a:	4638      	mov	r0, r7
 800506c:	47c8      	blx	r9
 800506e:	3001      	adds	r0, #1
 8005070:	d01e      	beq.n	80050b0 <_printf_common+0xa4>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	6922      	ldr	r2, [r4, #16]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf02      	ittt	eq
 800507e:	68e5      	ldreq	r5, [r4, #12]
 8005080:	6833      	ldreq	r3, [r6, #0]
 8005082:	1aed      	subeq	r5, r5, r3
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	bf0c      	ite	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	2500      	movne	r5, #0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfc4      	itt	gt
 8005092:	1a9b      	subgt	r3, r3, r2
 8005094:	18ed      	addgt	r5, r5, r3
 8005096:	2600      	movs	r6, #0
 8005098:	341a      	adds	r4, #26
 800509a:	42b5      	cmp	r5, r6
 800509c:	d11a      	bne.n	80050d4 <_printf_common+0xc8>
 800509e:	2000      	movs	r0, #0
 80050a0:	e008      	b.n	80050b4 <_printf_common+0xa8>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4641      	mov	r1, r8
 80050a8:	4638      	mov	r0, r7
 80050aa:	47c8      	blx	r9
 80050ac:	3001      	adds	r0, #1
 80050ae:	d103      	bne.n	80050b8 <_printf_common+0xac>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7c6      	b.n	800504a <_printf_common+0x3e>
 80050bc:	18e1      	adds	r1, r4, r3
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	2030      	movs	r0, #48	@ 0x30
 80050c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050c6:	4422      	add	r2, r4
 80050c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050d0:	3302      	adds	r3, #2
 80050d2:	e7c7      	b.n	8005064 <_printf_common+0x58>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4622      	mov	r2, r4
 80050d8:	4641      	mov	r1, r8
 80050da:	4638      	mov	r0, r7
 80050dc:	47c8      	blx	r9
 80050de:	3001      	adds	r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xa4>
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7d9      	b.n	800509a <_printf_common+0x8e>
	...

080050e8 <_printf_i>:
 80050e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	7e0f      	ldrb	r7, [r1, #24]
 80050ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050f0:	2f78      	cmp	r7, #120	@ 0x78
 80050f2:	4691      	mov	r9, r2
 80050f4:	4680      	mov	r8, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	469a      	mov	sl, r3
 80050fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050fe:	d807      	bhi.n	8005110 <_printf_i+0x28>
 8005100:	2f62      	cmp	r7, #98	@ 0x62
 8005102:	d80a      	bhi.n	800511a <_printf_i+0x32>
 8005104:	2f00      	cmp	r7, #0
 8005106:	f000 80d1 	beq.w	80052ac <_printf_i+0x1c4>
 800510a:	2f58      	cmp	r7, #88	@ 0x58
 800510c:	f000 80b8 	beq.w	8005280 <_printf_i+0x198>
 8005110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005118:	e03a      	b.n	8005190 <_printf_i+0xa8>
 800511a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800511e:	2b15      	cmp	r3, #21
 8005120:	d8f6      	bhi.n	8005110 <_printf_i+0x28>
 8005122:	a101      	add	r1, pc, #4	@ (adr r1, 8005128 <_printf_i+0x40>)
 8005124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005128:	08005181 	.word	0x08005181
 800512c:	08005195 	.word	0x08005195
 8005130:	08005111 	.word	0x08005111
 8005134:	08005111 	.word	0x08005111
 8005138:	08005111 	.word	0x08005111
 800513c:	08005111 	.word	0x08005111
 8005140:	08005195 	.word	0x08005195
 8005144:	08005111 	.word	0x08005111
 8005148:	08005111 	.word	0x08005111
 800514c:	08005111 	.word	0x08005111
 8005150:	08005111 	.word	0x08005111
 8005154:	08005293 	.word	0x08005293
 8005158:	080051bf 	.word	0x080051bf
 800515c:	0800524d 	.word	0x0800524d
 8005160:	08005111 	.word	0x08005111
 8005164:	08005111 	.word	0x08005111
 8005168:	080052b5 	.word	0x080052b5
 800516c:	08005111 	.word	0x08005111
 8005170:	080051bf 	.word	0x080051bf
 8005174:	08005111 	.word	0x08005111
 8005178:	08005111 	.word	0x08005111
 800517c:	08005255 	.word	0x08005255
 8005180:	6833      	ldr	r3, [r6, #0]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6032      	str	r2, [r6, #0]
 8005188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800518c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005190:	2301      	movs	r3, #1
 8005192:	e09c      	b.n	80052ce <_printf_i+0x1e6>
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	1d19      	adds	r1, r3, #4
 800519a:	6031      	str	r1, [r6, #0]
 800519c:	0606      	lsls	r6, r0, #24
 800519e:	d501      	bpl.n	80051a4 <_printf_i+0xbc>
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	e003      	b.n	80051ac <_printf_i+0xc4>
 80051a4:	0645      	lsls	r5, r0, #25
 80051a6:	d5fb      	bpl.n	80051a0 <_printf_i+0xb8>
 80051a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	da03      	bge.n	80051b8 <_printf_i+0xd0>
 80051b0:	232d      	movs	r3, #45	@ 0x2d
 80051b2:	426d      	negs	r5, r5
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b8:	4858      	ldr	r0, [pc, #352]	@ (800531c <_printf_i+0x234>)
 80051ba:	230a      	movs	r3, #10
 80051bc:	e011      	b.n	80051e2 <_printf_i+0xfa>
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	0608      	lsls	r0, r1, #24
 80051c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c8:	d402      	bmi.n	80051d0 <_printf_i+0xe8>
 80051ca:	0649      	lsls	r1, r1, #25
 80051cc:	bf48      	it	mi
 80051ce:	b2ad      	uxthmi	r5, r5
 80051d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051d2:	4852      	ldr	r0, [pc, #328]	@ (800531c <_printf_i+0x234>)
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	bf14      	ite	ne
 80051d8:	230a      	movne	r3, #10
 80051da:	2308      	moveq	r3, #8
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051e2:	6866      	ldr	r6, [r4, #4]
 80051e4:	60a6      	str	r6, [r4, #8]
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	db05      	blt.n	80051f6 <_printf_i+0x10e>
 80051ea:	6821      	ldr	r1, [r4, #0]
 80051ec:	432e      	orrs	r6, r5
 80051ee:	f021 0104 	bic.w	r1, r1, #4
 80051f2:	6021      	str	r1, [r4, #0]
 80051f4:	d04b      	beq.n	800528e <_printf_i+0x1a6>
 80051f6:	4616      	mov	r6, r2
 80051f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005200:	5dc7      	ldrb	r7, [r0, r7]
 8005202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005206:	462f      	mov	r7, r5
 8005208:	42bb      	cmp	r3, r7
 800520a:	460d      	mov	r5, r1
 800520c:	d9f4      	bls.n	80051f8 <_printf_i+0x110>
 800520e:	2b08      	cmp	r3, #8
 8005210:	d10b      	bne.n	800522a <_printf_i+0x142>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	07df      	lsls	r7, r3, #31
 8005216:	d508      	bpl.n	800522a <_printf_i+0x142>
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	6861      	ldr	r1, [r4, #4]
 800521c:	4299      	cmp	r1, r3
 800521e:	bfde      	ittt	le
 8005220:	2330      	movle	r3, #48	@ 0x30
 8005222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800522a:	1b92      	subs	r2, r2, r6
 800522c:	6122      	str	r2, [r4, #16]
 800522e:	f8cd a000 	str.w	sl, [sp]
 8005232:	464b      	mov	r3, r9
 8005234:	aa03      	add	r2, sp, #12
 8005236:	4621      	mov	r1, r4
 8005238:	4640      	mov	r0, r8
 800523a:	f7ff fee7 	bl	800500c <_printf_common>
 800523e:	3001      	adds	r0, #1
 8005240:	d14a      	bne.n	80052d8 <_printf_i+0x1f0>
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	b004      	add	sp, #16
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	f043 0320 	orr.w	r3, r3, #32
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	4832      	ldr	r0, [pc, #200]	@ (8005320 <_printf_i+0x238>)
 8005256:	2778      	movs	r7, #120	@ 0x78
 8005258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	6831      	ldr	r1, [r6, #0]
 8005260:	061f      	lsls	r7, r3, #24
 8005262:	f851 5b04 	ldr.w	r5, [r1], #4
 8005266:	d402      	bmi.n	800526e <_printf_i+0x186>
 8005268:	065f      	lsls	r7, r3, #25
 800526a:	bf48      	it	mi
 800526c:	b2ad      	uxthmi	r5, r5
 800526e:	6031      	str	r1, [r6, #0]
 8005270:	07d9      	lsls	r1, r3, #31
 8005272:	bf44      	itt	mi
 8005274:	f043 0320 	orrmi.w	r3, r3, #32
 8005278:	6023      	strmi	r3, [r4, #0]
 800527a:	b11d      	cbz	r5, 8005284 <_printf_i+0x19c>
 800527c:	2310      	movs	r3, #16
 800527e:	e7ad      	b.n	80051dc <_printf_i+0xf4>
 8005280:	4826      	ldr	r0, [pc, #152]	@ (800531c <_printf_i+0x234>)
 8005282:	e7e9      	b.n	8005258 <_printf_i+0x170>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	f023 0320 	bic.w	r3, r3, #32
 800528a:	6023      	str	r3, [r4, #0]
 800528c:	e7f6      	b.n	800527c <_printf_i+0x194>
 800528e:	4616      	mov	r6, r2
 8005290:	e7bd      	b.n	800520e <_printf_i+0x126>
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	6825      	ldr	r5, [r4, #0]
 8005296:	6961      	ldr	r1, [r4, #20]
 8005298:	1d18      	adds	r0, r3, #4
 800529a:	6030      	str	r0, [r6, #0]
 800529c:	062e      	lsls	r6, r5, #24
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	d501      	bpl.n	80052a6 <_printf_i+0x1be>
 80052a2:	6019      	str	r1, [r3, #0]
 80052a4:	e002      	b.n	80052ac <_printf_i+0x1c4>
 80052a6:	0668      	lsls	r0, r5, #25
 80052a8:	d5fb      	bpl.n	80052a2 <_printf_i+0x1ba>
 80052aa:	8019      	strh	r1, [r3, #0]
 80052ac:	2300      	movs	r3, #0
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	4616      	mov	r6, r2
 80052b2:	e7bc      	b.n	800522e <_printf_i+0x146>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	6032      	str	r2, [r6, #0]
 80052ba:	681e      	ldr	r6, [r3, #0]
 80052bc:	6862      	ldr	r2, [r4, #4]
 80052be:	2100      	movs	r1, #0
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7fa ff95 	bl	80001f0 <memchr>
 80052c6:	b108      	cbz	r0, 80052cc <_printf_i+0x1e4>
 80052c8:	1b80      	subs	r0, r0, r6
 80052ca:	6060      	str	r0, [r4, #4]
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	2300      	movs	r3, #0
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d6:	e7aa      	b.n	800522e <_printf_i+0x146>
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	4632      	mov	r2, r6
 80052dc:	4649      	mov	r1, r9
 80052de:	4640      	mov	r0, r8
 80052e0:	47d0      	blx	sl
 80052e2:	3001      	adds	r0, #1
 80052e4:	d0ad      	beq.n	8005242 <_printf_i+0x15a>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	079b      	lsls	r3, r3, #30
 80052ea:	d413      	bmi.n	8005314 <_printf_i+0x22c>
 80052ec:	68e0      	ldr	r0, [r4, #12]
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	4298      	cmp	r0, r3
 80052f2:	bfb8      	it	lt
 80052f4:	4618      	movlt	r0, r3
 80052f6:	e7a6      	b.n	8005246 <_printf_i+0x15e>
 80052f8:	2301      	movs	r3, #1
 80052fa:	4632      	mov	r2, r6
 80052fc:	4649      	mov	r1, r9
 80052fe:	4640      	mov	r0, r8
 8005300:	47d0      	blx	sl
 8005302:	3001      	adds	r0, #1
 8005304:	d09d      	beq.n	8005242 <_printf_i+0x15a>
 8005306:	3501      	adds	r5, #1
 8005308:	68e3      	ldr	r3, [r4, #12]
 800530a:	9903      	ldr	r1, [sp, #12]
 800530c:	1a5b      	subs	r3, r3, r1
 800530e:	42ab      	cmp	r3, r5
 8005310:	dcf2      	bgt.n	80052f8 <_printf_i+0x210>
 8005312:	e7eb      	b.n	80052ec <_printf_i+0x204>
 8005314:	2500      	movs	r5, #0
 8005316:	f104 0619 	add.w	r6, r4, #25
 800531a:	e7f5      	b.n	8005308 <_printf_i+0x220>
 800531c:	08005555 	.word	0x08005555
 8005320:	08005566 	.word	0x08005566

08005324 <memmove>:
 8005324:	4288      	cmp	r0, r1
 8005326:	b510      	push	{r4, lr}
 8005328:	eb01 0402 	add.w	r4, r1, r2
 800532c:	d902      	bls.n	8005334 <memmove+0x10>
 800532e:	4284      	cmp	r4, r0
 8005330:	4623      	mov	r3, r4
 8005332:	d807      	bhi.n	8005344 <memmove+0x20>
 8005334:	1e43      	subs	r3, r0, #1
 8005336:	42a1      	cmp	r1, r4
 8005338:	d008      	beq.n	800534c <memmove+0x28>
 800533a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800533e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005342:	e7f8      	b.n	8005336 <memmove+0x12>
 8005344:	4402      	add	r2, r0
 8005346:	4601      	mov	r1, r0
 8005348:	428a      	cmp	r2, r1
 800534a:	d100      	bne.n	800534e <memmove+0x2a>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005356:	e7f7      	b.n	8005348 <memmove+0x24>

08005358 <_sbrk_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d06      	ldr	r5, [pc, #24]	@ (8005374 <_sbrk_r+0x1c>)
 800535c:	2300      	movs	r3, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fb fec2 	bl	80010ec <_sbrk>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_sbrk_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_sbrk_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20000454 	.word	0x20000454

08005378 <memcpy>:
 8005378:	440a      	add	r2, r1
 800537a:	4291      	cmp	r1, r2
 800537c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005380:	d100      	bne.n	8005384 <memcpy+0xc>
 8005382:	4770      	bx	lr
 8005384:	b510      	push	{r4, lr}
 8005386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538e:	4291      	cmp	r1, r2
 8005390:	d1f9      	bne.n	8005386 <memcpy+0xe>
 8005392:	bd10      	pop	{r4, pc}

08005394 <_realloc_r>:
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	4607      	mov	r7, r0
 800539a:	4614      	mov	r4, r2
 800539c:	460d      	mov	r5, r1
 800539e:	b921      	cbnz	r1, 80053aa <_realloc_r+0x16>
 80053a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	4611      	mov	r1, r2
 80053a6:	f7ff bc4d 	b.w	8004c44 <_malloc_r>
 80053aa:	b92a      	cbnz	r2, 80053b8 <_realloc_r+0x24>
 80053ac:	f7ff fbde 	bl	8004b6c <_free_r>
 80053b0:	4625      	mov	r5, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	f000 f81a 	bl	80053f0 <_malloc_usable_size_r>
 80053bc:	4284      	cmp	r4, r0
 80053be:	4606      	mov	r6, r0
 80053c0:	d802      	bhi.n	80053c8 <_realloc_r+0x34>
 80053c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053c6:	d8f4      	bhi.n	80053b2 <_realloc_r+0x1e>
 80053c8:	4621      	mov	r1, r4
 80053ca:	4638      	mov	r0, r7
 80053cc:	f7ff fc3a 	bl	8004c44 <_malloc_r>
 80053d0:	4680      	mov	r8, r0
 80053d2:	b908      	cbnz	r0, 80053d8 <_realloc_r+0x44>
 80053d4:	4645      	mov	r5, r8
 80053d6:	e7ec      	b.n	80053b2 <_realloc_r+0x1e>
 80053d8:	42b4      	cmp	r4, r6
 80053da:	4622      	mov	r2, r4
 80053dc:	4629      	mov	r1, r5
 80053de:	bf28      	it	cs
 80053e0:	4632      	movcs	r2, r6
 80053e2:	f7ff ffc9 	bl	8005378 <memcpy>
 80053e6:	4629      	mov	r1, r5
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff fbbf 	bl	8004b6c <_free_r>
 80053ee:	e7f1      	b.n	80053d4 <_realloc_r+0x40>

080053f0 <_malloc_usable_size_r>:
 80053f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f4:	1f18      	subs	r0, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfbc      	itt	lt
 80053fa:	580b      	ldrlt	r3, [r1, r0]
 80053fc:	18c0      	addlt	r0, r0, r3
 80053fe:	4770      	bx	lr

08005400 <_init>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr

0800540c <_fini>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr
