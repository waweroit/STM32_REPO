
04.UPS_NewMCU_F411CE2_SSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  0000607c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca8  08004ca8  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cac  08004cac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004cb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  2000007c  08004d2c  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  08004d2c  00006b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc7b  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00012d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00015360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ad  00000000  00000000  00016010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001849e  00000000  00000000  000169bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010340  00000000  00000000  0002ee5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009898e  00000000  00000000  0003f19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7b29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  000d7b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000db298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c70 	.word	0x08004c70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08004c70 	.word	0x08004c70

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_uldivmod>:
 8000d90:	b953      	cbnz	r3, 8000da8 <__aeabi_uldivmod+0x18>
 8000d92:	b94a      	cbnz	r2, 8000da8 <__aeabi_uldivmod+0x18>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	bf08      	it	eq
 8000d98:	2800      	cmpeq	r0, #0
 8000d9a:	bf1c      	itt	ne
 8000d9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000da0:	f04f 30ff 	movne.w	r0, #4294967295
 8000da4:	f000 b988 	b.w	80010b8 <__aeabi_idiv0>
 8000da8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db0:	f000 f806 	bl	8000dc0 <__udivmoddi4>
 8000db4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr

08000dc0 <__udivmoddi4>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	9d08      	ldr	r5, [sp, #32]
 8000dc6:	468e      	mov	lr, r1
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4688      	mov	r8, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d14a      	bne.n	8000e66 <__udivmoddi4+0xa6>
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	4617      	mov	r7, r2
 8000dd4:	d962      	bls.n	8000e9c <__udivmoddi4+0xdc>
 8000dd6:	fab2 f682 	clz	r6, r2
 8000dda:	b14e      	cbz	r6, 8000df0 <__udivmoddi4+0x30>
 8000ddc:	f1c6 0320 	rsb	r3, r6, #32
 8000de0:	fa01 f806 	lsl.w	r8, r1, r6
 8000de4:	fa20 f303 	lsr.w	r3, r0, r3
 8000de8:	40b7      	lsls	r7, r6
 8000dea:	ea43 0808 	orr.w	r8, r3, r8
 8000dee:	40b4      	lsls	r4, r6
 8000df0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fb01 f20c 	mul.w	r2, r1, ip
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x62>
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e14:	f080 80ea 	bcs.w	8000fec <__udivmoddi4+0x22c>
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f240 80e7 	bls.w	8000fec <__udivmoddi4+0x22c>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	443b      	add	r3, r7
 8000e22:	1a9a      	subs	r2, r3, r2
 8000e24:	b2a3      	uxth	r3, r4
 8000e26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e32:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e36:	459c      	cmp	ip, r3
 8000e38:	d909      	bls.n	8000e4e <__udivmoddi4+0x8e>
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e40:	f080 80d6 	bcs.w	8000ff0 <__udivmoddi4+0x230>
 8000e44:	459c      	cmp	ip, r3
 8000e46:	f240 80d3 	bls.w	8000ff0 <__udivmoddi4+0x230>
 8000e4a:	443b      	add	r3, r7
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e52:	eba3 030c 	sub.w	r3, r3, ip
 8000e56:	2100      	movs	r1, #0
 8000e58:	b11d      	cbz	r5, 8000e62 <__udivmoddi4+0xa2>
 8000e5a:	40f3      	lsrs	r3, r6
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d905      	bls.n	8000e76 <__udivmoddi4+0xb6>
 8000e6a:	b10d      	cbz	r5, 8000e70 <__udivmoddi4+0xb0>
 8000e6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e70:	2100      	movs	r1, #0
 8000e72:	4608      	mov	r0, r1
 8000e74:	e7f5      	b.n	8000e62 <__udivmoddi4+0xa2>
 8000e76:	fab3 f183 	clz	r1, r3
 8000e7a:	2900      	cmp	r1, #0
 8000e7c:	d146      	bne.n	8000f0c <__udivmoddi4+0x14c>
 8000e7e:	4573      	cmp	r3, lr
 8000e80:	d302      	bcc.n	8000e88 <__udivmoddi4+0xc8>
 8000e82:	4282      	cmp	r2, r0
 8000e84:	f200 8105 	bhi.w	8001092 <__udivmoddi4+0x2d2>
 8000e88:	1a84      	subs	r4, r0, r2
 8000e8a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	4690      	mov	r8, r2
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d0e5      	beq.n	8000e62 <__udivmoddi4+0xa2>
 8000e96:	e9c5 4800 	strd	r4, r8, [r5]
 8000e9a:	e7e2      	b.n	8000e62 <__udivmoddi4+0xa2>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	f000 8090 	beq.w	8000fc2 <__udivmoddi4+0x202>
 8000ea2:	fab2 f682 	clz	r6, r2
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	f040 80a4 	bne.w	8000ff4 <__udivmoddi4+0x234>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ebe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ec6:	fb04 f20c 	mul.w	r2, r4, ip
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x11e>
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ed4:	d202      	bcs.n	8000edc <__udivmoddi4+0x11c>
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	f200 80e0 	bhi.w	800109c <__udivmoddi4+0x2dc>
 8000edc:	46c4      	mov	ip, r8
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ee4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ee8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eec:	fb02 f404 	mul.w	r4, r2, r4
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	d907      	bls.n	8000f04 <__udivmoddi4+0x144>
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x142>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f200 80ca 	bhi.w	8001096 <__udivmoddi4+0x2d6>
 8000f02:	4602      	mov	r2, r0
 8000f04:	1b1b      	subs	r3, r3, r4
 8000f06:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f0a:	e7a5      	b.n	8000e58 <__udivmoddi4+0x98>
 8000f0c:	f1c1 0620 	rsb	r6, r1, #32
 8000f10:	408b      	lsls	r3, r1
 8000f12:	fa22 f706 	lsr.w	r7, r2, r6
 8000f16:	431f      	orrs	r7, r3
 8000f18:	fa0e f401 	lsl.w	r4, lr, r1
 8000f1c:	fa20 f306 	lsr.w	r3, r0, r6
 8000f20:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f24:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f2e:	fa1f fc87 	uxth.w	ip, r7
 8000f32:	fbbe f0f9 	udiv	r0, lr, r9
 8000f36:	0c1c      	lsrs	r4, r3, #16
 8000f38:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f3c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f40:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4a:	d909      	bls.n	8000f60 <__udivmoddi4+0x1a0>
 8000f4c:	193c      	adds	r4, r7, r4
 8000f4e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f52:	f080 809c 	bcs.w	800108e <__udivmoddi4+0x2ce>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	f240 8099 	bls.w	800108e <__udivmoddi4+0x2ce>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	443c      	add	r4, r7
 8000f60:	eba4 040e 	sub.w	r4, r4, lr
 8000f64:	fa1f fe83 	uxth.w	lr, r3
 8000f68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f70:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f74:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f78:	45a4      	cmp	ip, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x1ce>
 8000f7c:	193c      	adds	r4, r7, r4
 8000f7e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f82:	f080 8082 	bcs.w	800108a <__udivmoddi4+0x2ca>
 8000f86:	45a4      	cmp	ip, r4
 8000f88:	d97f      	bls.n	800108a <__udivmoddi4+0x2ca>
 8000f8a:	3b02      	subs	r3, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f92:	eba4 040c 	sub.w	r4, r4, ip
 8000f96:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f9a:	4564      	cmp	r4, ip
 8000f9c:	4673      	mov	r3, lr
 8000f9e:	46e1      	mov	r9, ip
 8000fa0:	d362      	bcc.n	8001068 <__udivmoddi4+0x2a8>
 8000fa2:	d05f      	beq.n	8001064 <__udivmoddi4+0x2a4>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x1fe>
 8000fa6:	ebb8 0203 	subs.w	r2, r8, r3
 8000faa:	eb64 0409 	sbc.w	r4, r4, r9
 8000fae:	fa04 f606 	lsl.w	r6, r4, r6
 8000fb2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fb6:	431e      	orrs	r6, r3
 8000fb8:	40cc      	lsrs	r4, r1
 8000fba:	e9c5 6400 	strd	r6, r4, [r5]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	e74f      	b.n	8000e62 <__udivmoddi4+0xa2>
 8000fc2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fc6:	0c01      	lsrs	r1, r0, #16
 8000fc8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fcc:	b280      	uxth	r0, r0
 8000fce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4638      	mov	r0, r7
 8000fd6:	463c      	mov	r4, r7
 8000fd8:	46b8      	mov	r8, r7
 8000fda:	46be      	mov	lr, r7
 8000fdc:	2620      	movs	r6, #32
 8000fde:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fe2:	eba2 0208 	sub.w	r2, r2, r8
 8000fe6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fea:	e766      	b.n	8000eba <__udivmoddi4+0xfa>
 8000fec:	4601      	mov	r1, r0
 8000fee:	e718      	b.n	8000e22 <__udivmoddi4+0x62>
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	e72c      	b.n	8000e4e <__udivmoddi4+0x8e>
 8000ff4:	f1c6 0220 	rsb	r2, r6, #32
 8000ff8:	fa2e f302 	lsr.w	r3, lr, r2
 8000ffc:	40b7      	lsls	r7, r6
 8000ffe:	40b1      	lsls	r1, r6
 8001000:	fa20 f202 	lsr.w	r2, r0, r2
 8001004:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001008:	430a      	orrs	r2, r1
 800100a:	fbb3 f8fe 	udiv	r8, r3, lr
 800100e:	b2bc      	uxth	r4, r7
 8001010:	fb0e 3318 	mls	r3, lr, r8, r3
 8001014:	0c11      	lsrs	r1, r2, #16
 8001016:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101a:	fb08 f904 	mul.w	r9, r8, r4
 800101e:	40b0      	lsls	r0, r6
 8001020:	4589      	cmp	r9, r1
 8001022:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001026:	b280      	uxth	r0, r0
 8001028:	d93e      	bls.n	80010a8 <__udivmoddi4+0x2e8>
 800102a:	1879      	adds	r1, r7, r1
 800102c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001030:	d201      	bcs.n	8001036 <__udivmoddi4+0x276>
 8001032:	4589      	cmp	r9, r1
 8001034:	d81f      	bhi.n	8001076 <__udivmoddi4+0x2b6>
 8001036:	eba1 0109 	sub.w	r1, r1, r9
 800103a:	fbb1 f9fe 	udiv	r9, r1, lr
 800103e:	fb09 f804 	mul.w	r8, r9, r4
 8001042:	fb0e 1119 	mls	r1, lr, r9, r1
 8001046:	b292      	uxth	r2, r2
 8001048:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800104c:	4542      	cmp	r2, r8
 800104e:	d229      	bcs.n	80010a4 <__udivmoddi4+0x2e4>
 8001050:	18ba      	adds	r2, r7, r2
 8001052:	f109 31ff 	add.w	r1, r9, #4294967295
 8001056:	d2c4      	bcs.n	8000fe2 <__udivmoddi4+0x222>
 8001058:	4542      	cmp	r2, r8
 800105a:	d2c2      	bcs.n	8000fe2 <__udivmoddi4+0x222>
 800105c:	f1a9 0102 	sub.w	r1, r9, #2
 8001060:	443a      	add	r2, r7
 8001062:	e7be      	b.n	8000fe2 <__udivmoddi4+0x222>
 8001064:	45f0      	cmp	r8, lr
 8001066:	d29d      	bcs.n	8000fa4 <__udivmoddi4+0x1e4>
 8001068:	ebbe 0302 	subs.w	r3, lr, r2
 800106c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001070:	3801      	subs	r0, #1
 8001072:	46e1      	mov	r9, ip
 8001074:	e796      	b.n	8000fa4 <__udivmoddi4+0x1e4>
 8001076:	eba7 0909 	sub.w	r9, r7, r9
 800107a:	4449      	add	r1, r9
 800107c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001080:	fbb1 f9fe 	udiv	r9, r1, lr
 8001084:	fb09 f804 	mul.w	r8, r9, r4
 8001088:	e7db      	b.n	8001042 <__udivmoddi4+0x282>
 800108a:	4673      	mov	r3, lr
 800108c:	e77f      	b.n	8000f8e <__udivmoddi4+0x1ce>
 800108e:	4650      	mov	r0, sl
 8001090:	e766      	b.n	8000f60 <__udivmoddi4+0x1a0>
 8001092:	4608      	mov	r0, r1
 8001094:	e6fd      	b.n	8000e92 <__udivmoddi4+0xd2>
 8001096:	443b      	add	r3, r7
 8001098:	3a02      	subs	r2, #2
 800109a:	e733      	b.n	8000f04 <__udivmoddi4+0x144>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443b      	add	r3, r7
 80010a2:	e71c      	b.n	8000ede <__udivmoddi4+0x11e>
 80010a4:	4649      	mov	r1, r9
 80010a6:	e79c      	b.n	8000fe2 <__udivmoddi4+0x222>
 80010a8:	eba1 0109 	sub.w	r1, r1, r9
 80010ac:	46c4      	mov	ip, r8
 80010ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b2:	fb09 f804 	mul.w	r8, r9, r4
 80010b6:	e7c4      	b.n	8001042 <__udivmoddi4+0x282>

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	0000      	movs	r0, r0
	...

080010c0 <ReadDCBattVoltageFromADC>:
#include "BATTERYInfo.h"

volatile bool WasChargedEnough = false;

float ReadDCBattVoltageFromADC(uint32_t  *Buffer, uint32_t  size)// VoltageOfSensor can be 3.3 or 5
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    if (!Buffer || size == 0) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <ReadDCBattVoltageFromADC+0x16>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <ReadDCBattVoltageFromADC+0x1c>
        return 0.0f;
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e03c      	b.n	8001156 <ReadDCBattVoltageFromADC+0x96>
    }

    // uśrednienie ADC
    uint32_t sum = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < size; ++i) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	e00a      	b.n	80010fc <ReadDCBattVoltageFromADC+0x3c>
        sum += Buffer[i];
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < size; ++i) {
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3f0      	bcc.n	80010e6 <ReadDCBattVoltageFromADC+0x26>
    }
    float avg = (float)sum / size;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111c:	edc7 7a02 	vstr	s15, [r7, #8]

	//voltage =(float)readValue/4095*(37.5/7.5*VoltageOfSensor); 37,5 oraz 7.5 to rezystory na płytce PCB
	//voltage =(float)readValue/4095*5*VoltageOfPowerSensor;
	//voltage =(float)readValue/4095*(37.5/7.5*VoltageOfSensor); 37,5 oraz 7.5 to rezystory na płytce PCB
    float voltage =(float)avg/4095*16.5; //(dla 3.3 volta)
 8001120:	ed97 7a02 	vldr	s14, [r7, #8]
 8001124:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001170 <ReadDCBattVoltageFromADC+0xb0>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001174 <ReadDCBattVoltageFromADC+0xb4>
 8001130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001134:	edc7 7a03 	vstr	s15, [r7, #12]
//	    voltage =(float)readValue/4095*25; //(dla 5.0 volta)
	if(voltage <= 0.9)
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff f9b1 	bl	80004a0 <__aeabi_f2d>
 800113e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001168 <ReadDCBattVoltageFromADC+0xa8>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fc80 	bl	8000a48 <__aeabi_dcmple>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <ReadDCBattVoltageFromADC+0x94>
	    	voltage = 0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
	return voltage;
 8001154:	68fb      	ldr	r3, [r7, #12]

}
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	f3af 8000 	nop.w
 8001168:	cccccccd 	.word	0xcccccccd
 800116c:	3feccccc 	.word	0x3feccccc
 8001170:	457ff000 	.word	0x457ff000
 8001174:	41840000 	.word	0x41840000

08001178 <BatteryInformation>:


eBatteryStatus BatteryInformation(float batteryDischarged, float batteryVoltage)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001182:	edc7 0a00 	vstr	s1, [r7]
	//float batteryDischarged = 11.2;
	eBatteryStatus batStatus = NO_BATTERY;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]

	if(batteryVoltage <= batteryDischarged)
 800118a:	ed97 7a00 	vldr	s14, [r7]
 800118e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	d802      	bhi.n	80011a2 <BatteryInformation+0x2a>
		batStatus = DISCHARGED_BATTERY;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e053      	b.n	800124a <BatteryInformation+0xd2>
	else if(batteryVoltage > batteryDischarged && batteryVoltage <= 12.6)
 80011a2:	ed97 7a00 	vldr	s14, [r7]
 80011a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dd0d      	ble.n	80011d0 <BatteryInformation+0x58>
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff f973 	bl	80004a0 <__aeabi_f2d>
 80011ba:	a327      	add	r3, pc, #156	@ (adr r3, 8001258 <BatteryInformation+0xe0>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fc42 	bl	8000a48 <__aeabi_dcmple>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <BatteryInformation+0x58>
		batStatus = OK_BATTERY_LOW;
 80011ca:	2302      	movs	r3, #2
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e03c      	b.n	800124a <BatteryInformation+0xd2>
	else if(batteryVoltage > 12.6 && batteryVoltage <= 13.4)
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7ff f965 	bl	80004a0 <__aeabi_f2d>
 80011d6:	a320      	add	r3, pc, #128	@ (adr r3, 8001258 <BatteryInformation+0xe0>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fc48 	bl	8000a70 <__aeabi_dcmpgt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00d      	beq.n	8001202 <BatteryInformation+0x8a>
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff f95a 	bl	80004a0 <__aeabi_f2d>
 80011ec:	a31c      	add	r3, pc, #112	@ (adr r3, 8001260 <BatteryInformation+0xe8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fc29 	bl	8000a48 <__aeabi_dcmple>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <BatteryInformation+0x8a>
		batStatus = OK_BATTERY_MID;
 80011fc:	2303      	movs	r3, #3
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e023      	b.n	800124a <BatteryInformation+0xd2>
	else if(batteryVoltage > 13.4 && batteryVoltage <= 13.8)
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff f94c 	bl	80004a0 <__aeabi_f2d>
 8001208:	a315      	add	r3, pc, #84	@ (adr r3, 8001260 <BatteryInformation+0xe8>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff fc2f 	bl	8000a70 <__aeabi_dcmpgt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <BatteryInformation+0xbc>
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f7ff f941 	bl	80004a0 <__aeabi_f2d>
 800121e:	a312      	add	r3, pc, #72	@ (adr r3, 8001268 <BatteryInformation+0xf0>)
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f7ff fc10 	bl	8000a48 <__aeabi_dcmple>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <BatteryInformation+0xbc>
		batStatus = OK_BATTERY_HIGH;
 800122e:	2304      	movs	r3, #4
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e00a      	b.n	800124a <BatteryInformation+0xd2>
	else if(batteryVoltage >= 14.0)
 8001234:	edd7 7a00 	vldr	s15, [r7]
 8001238:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	db01      	blt.n	800124a <BatteryInformation+0xd2>
		batStatus = FULL_BATTERY;
 8001246:	2305      	movs	r3, #5
 8001248:	73fb      	strb	r3, [r7, #15]

	return batStatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	f3af 8000 	nop.w
 8001258:	33333333 	.word	0x33333333
 800125c:	40293333 	.word	0x40293333
 8001260:	cccccccd 	.word	0xcccccccd
 8001264:	402acccc 	.word	0x402acccc
 8001268:	9999999a 	.word	0x9999999a
 800126c:	402b9999 	.word	0x402b9999

08001270 <Initialize_ZMPT101B>:

ADC_HandleTypeDef* hadc;


void Initialize_ZMPT101B(ADC_HandleTypeDef* _hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    hadc = _hadc;
 8001278:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <Initialize_ZMPT101B+0x20>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
    //sensitivity = 0.005; //orginalne
    sensitivity = 0.00268; //orginalne
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <Initialize_ZMPT101B+0x24>)
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <Initialize_ZMPT101B+0x28>)
 8001282:	601a      	str	r2, [r3, #0]

}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	200000a0 	.word	0x200000a0
 8001294:	2000009c 	.word	0x2000009c
 8001298:	3b2fa2f0 	.word	0x3b2fa2f0

0800129c <calibrateZeroPointWithTolerance>:
// Parametry:
// - Buffer: wskaźnik na bufor danych z DMA
// - size: rozmiar bufora
// - tolerance: próg tolerancji dla zmiany wartości `zero`
void calibrateZeroPointWithTolerance(uint32_t *Buffer, int size, int tolerance)
{
 800129c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a0:	b08a      	sub	sp, #40	@ 0x28
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
    min = ADC_SCALE;  // Inicjalizacja minimalnej wartości jako maksymalna możliwa wartość ADC
 80012aa:	4b30      	ldr	r3, [pc, #192]	@ (800136c <calibrateZeroPointWithTolerance+0xd0>)
 80012ac:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012b0:	601a      	str	r2, [r3, #0]
    max = 0;
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <calibrateZeroPointWithTolerance+0xd4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    uint64_t sum = 0;          // Użycie uint64_t, aby uniknąć przepełnienia przy dużej liczbie próbek
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (Buffer || size != 0)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <calibrateZeroPointWithTolerance+0x34>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d047      	beq.n	8001360 <calibrateZeroPointWithTolerance+0xc4>
    {
		// Iteracja przez bufor w celu obliczenia sumy i znalezienia minimalnej wartości
		for (int i = 0; i < size; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e024      	b.n	8001320 <calibrateZeroPointWithTolerance+0x84>
		{
			uint32_t value = Buffer[i];
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	617b      	str	r3, [r7, #20]
			sum += value;  // Dodawanie wartości do sumy
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2200      	movs	r2, #0
 80012e6:	461c      	mov	r4, r3
 80012e8:	4615      	mov	r5, r2
 80012ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ee:	eb12 0804 	adds.w	r8, r2, r4
 80012f2:	eb43 0905 	adc.w	r9, r3, r5
 80012f6:	e9c7 8908 	strd	r8, r9, [r7, #32]

			// Znajdowanie minimalnej wartości
			if (value < min)
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <calibrateZeroPointWithTolerance+0xd0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	d202      	bcs.n	800130a <calibrateZeroPointWithTolerance+0x6e>
			{
				min = value;
 8001304:	4a19      	ldr	r2, [pc, #100]	@ (800136c <calibrateZeroPointWithTolerance+0xd0>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	6013      	str	r3, [r2, #0]
			}
			if (value > max)
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <calibrateZeroPointWithTolerance+0xd4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	d902      	bls.n	800131a <calibrateZeroPointWithTolerance+0x7e>
			{
				max = value;
 8001314:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <calibrateZeroPointWithTolerance+0xd4>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < size; i++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbd6      	blt.n	80012d6 <calibrateZeroPointWithTolerance+0x3a>
			}
		}

		// Obliczenie średniej wartości
		uint32_t average = sum / size;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	17da      	asrs	r2, r3, #31
 800132c:	469a      	mov	sl, r3
 800132e:	4693      	mov	fp, r2
 8001330:	4652      	mov	r2, sl
 8001332:	465b      	mov	r3, fp
 8001334:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001338:	f7ff fd2a 	bl	8000d90 <__aeabi_uldivmod>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4613      	mov	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]

		// Wprowadzenie tolerancji, aby zredukować wpływ gwałtownych zmian na zero
		if (abs((int32_t)(zero - average)) > tolerance)
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <calibrateZeroPointWithTolerance+0xd8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	bfb8      	it	lt
 8001352:	425b      	neglt	r3, r3
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	da02      	bge.n	8001360 <calibrateZeroPointWithTolerance+0xc4>
		{
			zero = average;
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <calibrateZeroPointWithTolerance+0xd8>)
 800135e:	6013      	str	r3, [r2, #0]
		}
    }
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800136a:	bf00      	nop
 800136c:	20000004 	.word	0x20000004
 8001370:	20000098 	.word	0x20000098
 8001374:	20000000 	.word	0x20000000

08001378 <getVoltageACFromDMABuff>:
//	return Vrms;
//}

// Zoptymalizowana funkcja
float getVoltageACFromDMABuff(uint32_t *Buffer, int size, bool adjSensivity)
{
 8001378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137c:	b08e      	sub	sp, #56	@ 0x38
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	4613      	mov	r3, r2
 8001386:	71fb      	strb	r3, [r7, #7]
    uint64_t Vsum = 0;     // Suma kwadratów
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int32_t Vnow;          // Aktualna wartość pomiaru przesunięta względem zera
    uint32_t *ptr = Buffer;  // Wskaźnik na początek bufora
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t *end = Buffer + size;  // Wskaźnik na koniec bufora
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    int countWithinZero = 0; // Licznik próbek w granicach punktu zero
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int tolerance = 400; //
 80013a6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80013aa:	623b      	str	r3, [r7, #32]

    if (!Buffer || size < 1) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <getVoltageACFromDMABuff+0x40>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dc02      	bgt.n	80013be <getVoltageACFromDMABuff+0x46>
        return 0.0f;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e0aa      	b.n	8001514 <getVoltageACFromDMABuff+0x19c>
    }

	// Wyliczenie progu 80% dla wcześniejszego zakończenia pętli
	int thresholdWithinZero = size * 0.8;  // Próg dla zakończenia, jeśli 80% próbek mieści się w granicach zero
 80013be:	68b8      	ldr	r0, [r7, #8]
 80013c0:	f7ff f85c 	bl	800047c <__aeabi_i2d>
 80013c4:	a361      	add	r3, pc, #388	@ (adr r3, 800154c <getVoltageACFromDMABuff+0x1d4>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f8c1 	bl	8000550 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fb55 	bl	8000a84 <__aeabi_d2iz>
 80013da:	4603      	mov	r3, r0
 80013dc:	61fb      	str	r3, [r7, #28]

    // Iteracja przez bufor za pomocą wskaźników
    while (ptr < end) {
 80013de:	e031      	b.n	8001444 <getVoltageACFromDMABuff+0xcc>
        Vnow = (int32_t)(*ptr++) - zero;  // Odczyt wartości i przesunięcie wskaźnika
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	1d1a      	adds	r2, r3, #4
 80013e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <getVoltageACFromDMABuff+0x1b8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
        Vsum += (uint32_t)(Vnow * Vnow);  // Sumowanie kwadratów
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fb03 f303 	mul.w	r3, r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	2300      	movs	r3, #0
 80013fc:	4614      	mov	r4, r2
 80013fe:	461d      	mov	r5, r3
 8001400:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001404:	eb12 0804 	adds.w	r8, r2, r4
 8001408:	eb43 0905 	adc.w	r9, r3, r5
 800140c:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30

        // Sprawdzanie, czy wartość mieści się w granicach tolerancji
		if (abs(Vnow) < tolerance)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bfb8      	it	lt
 8001416:	425b      	neglt	r3, r3
 8001418:	6a3a      	ldr	r2, [r7, #32]
 800141a:	429a      	cmp	r2, r3
 800141c:	dd02      	ble.n	8001424 <getVoltageACFromDMABuff+0xac>
		{
			countWithinZero++; // Zliczanie próbek w okolicy zero
 800141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001420:	3301      	adds	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
	    // Sprawdzanie, czy przekroczono próg 80%
	    if (countWithinZero >= thresholdWithinZero || (zero - min) < 400)
 8001424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	da08      	bge.n	800143e <getVoltageACFromDMABuff+0xc6>
 800142c:	4b40      	ldr	r3, [pc, #256]	@ (8001530 <getVoltageACFromDMABuff+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <getVoltageACFromDMABuff+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800143c:	d202      	bcs.n	8001444 <getVoltageACFromDMABuff+0xcc>
	    {
	        return 0.0;  // Zwracaj 0V, jeśli 80% próbek jest blisko zerowego punktu
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	e067      	b.n	8001514 <getVoltageACFromDMABuff+0x19c>
    while (ptr < end) {
 8001444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	429a      	cmp	r2, r3
 800144a:	d3c9      	bcc.n	80013e0 <getVoltageACFromDMABuff+0x68>
    }


    // Obliczanie wartości skutecznej (Vrms)
	//float Vrms = sqrtf((float)Vsum / size) / ADC_SCALE * Vref / sensitivity;
    float Vrms = sqrtf((float)Vsum / size) / max * Vref / sensitivity;
 800144c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001450:	f7ff fc58 	bl	8000d04 <__aeabi_ul2f>
 8001454:	ee06 0a90 	vmov	s13, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001466:	eeb0 0a47 	vmov.f32	s0, s14
 800146a:	f003 fbdf 	bl	8004c2c <sqrtf>
 800146e:	eef0 6a40 	vmov.f32	s13, s0
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <getVoltageACFromDMABuff+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001482:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <getVoltageACFromDMABuff+0x1c4>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee67 6a27 	vmul.f32	s13, s14, s15
 800148c:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <getVoltageACFromDMABuff+0x1c8>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001496:	edc7 7a06 	vstr	s15, [r7, #24]


    // test only - dostrojenie sensivity
    if(adjSensivity== true)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d038      	beq.n	8001512 <getVoltageACFromDMABuff+0x19a>
    {
		 if(Vrms < 236)
 80014a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001544 <getVoltageACFromDMABuff+0x1cc>
 80014a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	d513      	bpl.n	80014da <getVoltageACFromDMABuff+0x162>
			sensitivity -= 0.00001;
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <getVoltageACFromDMABuff+0x1c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe fff2 	bl	80004a0 <__aeabi_f2d>
 80014bc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001528 <getVoltageACFromDMABuff+0x1b0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe fe8d 	bl	80001e0 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb01 	bl	8000ad4 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <getVoltageACFromDMABuff+0x1c8>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e01b      	b.n	8001512 <getVoltageACFromDMABuff+0x19a>
		else if(Vrms > 237)
 80014da:	edd7 7a06 	vldr	s15, [r7, #24]
 80014de:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001548 <getVoltageACFromDMABuff+0x1d0>
 80014e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	dd12      	ble.n	8001512 <getVoltageACFromDMABuff+0x19a>
			sensitivity += 0.00001;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <getVoltageACFromDMABuff+0x1c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ffd5 	bl	80004a0 <__aeabi_f2d>
 80014f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001528 <getVoltageACFromDMABuff+0x1b0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fe72 	bl	80001e4 <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fae4 	bl	8000ad4 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <getVoltageACFromDMABuff+0x1c8>)
 8001510:	6013      	str	r3, [r2, #0]
    }

    return Vrms;
 8001512:	69bb      	ldr	r3, [r7, #24]
}
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	3738      	adds	r7, #56	@ 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001524:	f3af 8000 	nop.w
 8001528:	88e368f1 	.word	0x88e368f1
 800152c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	20000098 	.word	0x20000098
 800153c:	20000008 	.word	0x20000008
 8001540:	2000009c 	.word	0x2000009c
 8001544:	436c0000 	.word	0x436c0000
 8001548:	436d0000 	.word	0x436d0000
 800154c:	9999999a 	.word	0x9999999a
 8001550:	3fe99999 	.word	0x3fe99999

08001554 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	463b      	mov	r3, r7
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001568:	4a2a      	ldr	r2, [pc, #168]	@ (8001614 <MX_ADC1_Init+0xc0>)
 800156a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <MX_ADC1_Init+0xbc>)
 800156e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001572:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <MX_ADC1_Init+0xbc>)
 800157c:	2201      	movs	r2, #1
 800157e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001580:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001582:	2200      	movs	r2, #0
 8001584:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_ADC1_Init+0xbc>)
 8001598:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b8:	4815      	ldr	r0, [pc, #84]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015ba:	f000 ff3b 	bl	8002434 <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015c4:	f000 fc34 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80015d0:	2306      	movs	r3, #6
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015da:	f001 f8d1 	bl	8002780 <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015e4:	f000 fc24 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015f0:	2303      	movs	r3, #3
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_ADC1_Init+0xbc>)
 80015fa:	f001 f8c1 	bl	8002780 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001604:	f000 fc14 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000a4 	.word	0x200000a4
 8001614:	40012000 	.word	0x40012000

08001618 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d157      	bne.n	80016ea <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a2d      	ldr	r2, [pc, #180]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_ADC_MspInit+0xe0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001672:	2303      	movs	r3, #3
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001676:	2303      	movs	r3, #3
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	481d      	ldr	r0, [pc, #116]	@ (80016fc <HAL_ADC_MspInit+0xe4>)
 8001686:	f002 f81d 	bl	80036c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 800168c:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_ADC_MspInit+0xec>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016d0:	f001 fc18 	bl	8002f04 <HAL_DMA_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016da:	f000 fba9 	bl	8001e30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80016e4:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_ADC_MspInit+0xe8>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	@ 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40012000 	.word	0x40012000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000
 8001700:	200000ec 	.word	0x200000ec
 8001704:	40026410 	.word	0x40026410

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <MX_DMA_Init+0x3c>)
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_DMA_Init+0x3c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2038      	movs	r0, #56	@ 0x38
 8001730:	f001 fbb1 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001734:	2038      	movs	r0, #56	@ 0x38
 8001736:	f001 fbca 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <MX_GPIO_Init+0xf0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <MX_GPIO_Init+0xf0>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <MX_GPIO_Init+0xf0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <MX_GPIO_Init+0xf0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a2d      	ldr	r2, [pc, #180]	@ (8001838 <MX_GPIO_Init+0xf0>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <MX_GPIO_Init+0xf0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <MX_GPIO_Init+0xf0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <MX_GPIO_Init+0xf0>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_GPIO_Init+0xf0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pill_GPIO_Port, LED_Pill_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b8:	4820      	ldr	r0, [pc, #128]	@ (800183c <MX_GPIO_Init+0xf4>)
 80017ba:	f002 f91f 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay1_UPS_Pin|Relay2_BATT_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80017c4:	481e      	ldr	r0, [pc, #120]	@ (8001840 <MX_GPIO_Init+0xf8>)
 80017c6:	f002 f919 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay3_MainPower_Pin|Relay4_InverterPower_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80017d0:	481b      	ldr	r0, [pc, #108]	@ (8001840 <MX_GPIO_Init+0xf8>)
 80017d2:	f002 f913 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pill_Pin */
  GPIO_InitStruct.Pin = LED_Pill_Pin;
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Pill_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4813      	ldr	r0, [pc, #76]	@ (800183c <MX_GPIO_Init+0xf4>)
 80017f0:	f001 ff68 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_UPS_Pin Relay2_BATT_Pin */
  GPIO_InitStruct.Pin = Relay1_UPS_Pin|Relay2_BATT_Pin;
 80017f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017fa:	2311      	movs	r3, #17
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <MX_GPIO_Init+0xf8>)
 800180e:	f001 ff59 	bl	80036c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay3_MainPower_Pin Relay4_InverterPower_Pin */
  GPIO_InitStruct.Pin = Relay3_MainPower_Pin|Relay4_InverterPower_Pin;
 8001812:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_GPIO_Init+0xf8>)
 800182c:	f001 ff4a 	bl	80036c4 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020000 	.word	0x40020000

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184a:	f000 fd81 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184e:	f000 fa25 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001852:	f7ff ff79 	bl	8001748 <MX_GPIO_Init>
  MX_DMA_Init();
 8001856:	f7ff ff57 	bl	8001708 <MX_DMA_Init>
  MX_ADC1_Init();
 800185a:	f7ff fe7b 	bl	8001554 <MX_ADC1_Init>
  MX_TIM2_Init();
 800185e:	f000 fb6b 	bl	8001f38 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001862:	f000 fbb5 	bl	8001fd0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 8001866:	2202      	movs	r2, #2
 8001868:	49ad      	ldr	r1, [pc, #692]	@ (8001b20 <main+0x2dc>)
 800186a:	48ae      	ldr	r0, [pc, #696]	@ (8001b24 <main+0x2e0>)
 800186c:	f000 fe26 	bl	80024bc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001870:	48ad      	ldr	r0, [pc, #692]	@ (8001b28 <main+0x2e4>)
 8001872:	f002 fd6b 	bl	800434c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 8001876:	48ad      	ldr	r0, [pc, #692]	@ (8001b2c <main+0x2e8>)
 8001878:	f002 fdc2 	bl	8004400 <HAL_TIM_Base_Start_IT>

  DelayInit();
 800187c:	f000 fcec 	bl	8002258 <DelayInit>

  relayUpsStatus = ReadStatusRelay1_UPS();
 8001880:	f000 fc12 	bl	80020a8 <ReadStatusRelay1_UPS>
 8001884:	4603      	mov	r3, r0
 8001886:	4aaa      	ldr	r2, [pc, #680]	@ (8001b30 <main+0x2ec>)
 8001888:	6013      	str	r3, [r2, #0]
  relayBatteryCharging = ReadStatusRelay2_BATTERY_CHARGE();
 800188a:	f000 fc29 	bl	80020e0 <ReadStatusRelay2_BATTERY_CHARGE>
 800188e:	4603      	mov	r3, r0
 8001890:	4aa8      	ldr	r2, [pc, #672]	@ (8001b34 <main+0x2f0>)
 8001892:	6013      	str	r3, [r2, #0]
//  relayLineNStatus = ReadStatusRelay3_LineN();
//  relayLineLStatus = ReadStatusRelay4_LineL();
  relayLineMainPowerStatus = ReadStatusRelay3_MainPower();
 8001894:	f000 fc74 	bl	8002180 <ReadStatusRelay3_MainPower>
 8001898:	4603      	mov	r3, r0
 800189a:	4aa7      	ldr	r2, [pc, #668]	@ (8001b38 <main+0x2f4>)
 800189c:	6013      	str	r3, [r2, #0]
  relayLineInverterPowerStatus = ReadStatusRelay4_InverterPower();
 800189e:	f000 fc8b 	bl	80021b8 <ReadStatusRelay4_InverterPower>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4aa5      	ldr	r2, [pc, #660]	@ (8001b3c <main+0x2f8>)
 80018a6:	6013      	str	r3, [r2, #0]

  Initialize_ZMPT101B(&hadc1);
 80018a8:	489e      	ldr	r0, [pc, #632]	@ (8001b24 <main+0x2e0>)
 80018aa:	f7ff fce1 	bl	8001270 <Initialize_ZMPT101B>


  //BatteryCharging = true;
//  SetRelay1_UPS(1);
//  WorkingOnBattery = true;
  SetRelaySSR_4_InverterPower(0);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 fcb8 	bl	8002224 <SetRelaySSR_4_InverterPower>
  DelayUS(2500);
 80018b4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80018b8:	f000 fcf8 	bl	80022ac <DelayUS>
  SetRelaySSR_3_MainPower(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f000 fc97 	bl	80021f0 <SetRelaySSR_3_MainPower>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool acAvailableLastStatus = true;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
  bool isFirstRun = true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71bb      	strb	r3, [r7, #6]

  DelayUS(2000000);
 80018ca:	489d      	ldr	r0, [pc, #628]	@ (8001b40 <main+0x2fc>)
 80018cc:	f000 fcee 	bl	80022ac <DelayUS>
  while (1)
  {
	 if(adc_ready == true)
 80018d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001b44 <main+0x300>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d044      	beq.n	8001964 <main+0x120>
	 {

		 // odczyt z ADC jakim napieciem dysponuje nasz Akumulator
		if(Buffer_DC_TableCount < Channel0_BUF_SIZE && DMA_DC_Was_Filled == false)
 80018da:	4b9b      	ldr	r3, [pc, #620]	@ (8001b48 <main+0x304>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b63      	cmp	r3, #99	@ 0x63
 80018e0:	dc13      	bgt.n	800190a <main+0xc6>
 80018e2:	4b9a      	ldr	r3, [pc, #616]	@ (8001b4c <main+0x308>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	f083 0301 	eor.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00c      	beq.n	800190a <main+0xc6>
		{
			ADC_DC_BATTERY_TABLE[Buffer_DC_TableCount] = adc_buffer[0];
 80018f0:	4b95      	ldr	r3, [pc, #596]	@ (8001b48 <main+0x304>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a8a      	ldr	r2, [pc, #552]	@ (8001b20 <main+0x2dc>)
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4995      	ldr	r1, [pc, #596]	@ (8001b50 <main+0x30c>)
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Buffer_DC_TableCount++;
 80018fe:	4b92      	ldr	r3, [pc, #584]	@ (8001b48 <main+0x304>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a90      	ldr	r2, [pc, #576]	@ (8001b48 <main+0x304>)
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e005      	b.n	8001916 <main+0xd2>
		}
		else
		{
			DMA_DC_Was_Filled = true;
 800190a:	4b90      	ldr	r3, [pc, #576]	@ (8001b4c <main+0x308>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
			Buffer_DC_TableCount = 0;
 8001910:	4b8d      	ldr	r3, [pc, #564]	@ (8001b48 <main+0x304>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
		}

		// odczyt z ADC jakie jest napiecie w sieci
		if(Buffer_AC_TableCount < Channel1_BUF_SIZE && DMA_AC_Was_Filled == false)
 8001916:	4b8f      	ldr	r3, [pc, #572]	@ (8001b54 <main+0x310>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800191e:	da13      	bge.n	8001948 <main+0x104>
 8001920:	4b8d      	ldr	r3, [pc, #564]	@ (8001b58 <main+0x314>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00c      	beq.n	8001948 <main+0x104>
		{
			ADC_AC_POWER_TABLE[Buffer_AC_TableCount] = adc_buffer[1];
 800192e:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <main+0x310>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7b      	ldr	r2, [pc, #492]	@ (8001b20 <main+0x2dc>)
 8001934:	6852      	ldr	r2, [r2, #4]
 8001936:	4989      	ldr	r1, [pc, #548]	@ (8001b5c <main+0x318>)
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Buffer_AC_TableCount++;
 800193c:	4b85      	ldr	r3, [pc, #532]	@ (8001b54 <main+0x310>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a84      	ldr	r2, [pc, #528]	@ (8001b54 <main+0x310>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e005      	b.n	8001954 <main+0x110>

		}
		else
		{
			DMA_AC_Was_Filled = true;
 8001948:	4b83      	ldr	r3, [pc, #524]	@ (8001b58 <main+0x314>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
			Buffer_AC_TableCount = 0;
 800194e:	4b81      	ldr	r3, [pc, #516]	@ (8001b54 <main+0x310>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
			//calibrateLowNoisePointFromDMA(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE); jak jest uruchomione bardzo skacze wynik
		}

		adc_ready = false;
 8001954:	4b7b      	ldr	r3, [pc, #492]	@ (8001b44 <main+0x300>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 800195a:	2202      	movs	r2, #2
 800195c:	4970      	ldr	r1, [pc, #448]	@ (8001b20 <main+0x2dc>)
 800195e:	4871      	ldr	r0, [pc, #452]	@ (8001b24 <main+0x2e0>)
 8001960:	f000 fdac 	bl	80024bc <HAL_ADC_Start_DMA>
	 }




     if (DMA_AC_Was_Filled)
 8001964:	4b7c      	ldr	r3, [pc, #496]	@ (8001b58 <main+0x314>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 809d 	beq.w	8001aa8 <main+0x264>
     {
         DMA_AC_Was_Filled = false;
 800196e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b58 <main+0x314>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]

         // Odczyt statusów przekaźników
         relayUpsStatus               = ReadStatusRelay1_UPS();
 8001974:	f000 fb98 	bl	80020a8 <ReadStatusRelay1_UPS>
 8001978:	4603      	mov	r3, r0
 800197a:	4a6d      	ldr	r2, [pc, #436]	@ (8001b30 <main+0x2ec>)
 800197c:	6013      	str	r3, [r2, #0]
         relayLineMainPowerStatus     = ReadStatusRelay3_MainPower();
 800197e:	f000 fbff 	bl	8002180 <ReadStatusRelay3_MainPower>
 8001982:	4603      	mov	r3, r0
 8001984:	4a6c      	ldr	r2, [pc, #432]	@ (8001b38 <main+0x2f4>)
 8001986:	6013      	str	r3, [r2, #0]
         relayLineInverterPowerStatus = ReadStatusRelay4_InverterPower();
 8001988:	f000 fc16 	bl	80021b8 <ReadStatusRelay4_InverterPower>
 800198c:	4603      	mov	r3, r0
 800198e:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <main+0x2f8>)
 8001990:	6013      	str	r3, [r2, #0]

         // Pomiar napięcia sieci
         calibrateZeroPointWithTolerance(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE, 50);
 8001992:	2232      	movs	r2, #50	@ 0x32
 8001994:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001998:	4870      	ldr	r0, [pc, #448]	@ (8001b5c <main+0x318>)
 800199a:	f7ff fc7f 	bl	800129c <calibrateZeroPointWithTolerance>
         VoltageAC = getVoltageACFromDMABuff(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE, DMA_AC_AdjustSensivity);
 800199e:	4b70      	ldr	r3, [pc, #448]	@ (8001b60 <main+0x31c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80019aa:	486c      	ldr	r0, [pc, #432]	@ (8001b5c <main+0x318>)
 80019ac:	f7ff fce4 	bl	8001378 <getVoltageACFromDMABuff>
 80019b0:	eef0 7a40 	vmov.f32	s15, s0
 80019b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <main+0x320>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
         acAvailable = (VoltageAC > VoltageDrop);
 80019ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001b68 <main+0x324>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <main+0x320>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	bf4c      	ite	mi
 80019d6:	2301      	movmi	r3, #1
 80019d8:	2300      	movpl	r3, #0
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <main+0x328>)
 80019de:	701a      	strb	r2, [r3, #0]

		if(acAvailable != acAvailableLastStatus)
 80019e0:	4b62      	ldr	r3, [pc, #392]	@ (8001b6c <main+0x328>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d05d      	beq.n	8001aa8 <main+0x264>
		{
			if (acAvailable && !isMainACSelected)
 80019ec:	4b5f      	ldr	r3, [pc, #380]	@ (8001b6c <main+0x328>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d026      	beq.n	8001a44 <main+0x200>
 80019f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <main+0x32c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01e      	beq.n	8001a44 <main+0x200>
			{
				SetRelaySSR_4_InverterPower(0);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 fc0c 	bl	8002224 <SetRelaySSR_4_InverterPower>
				DelayUS(MSDelayBetweenACPower);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	@ (8001b74 <main+0x330>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fc4b 	bl	80022ac <DelayUS>
				SetRelaySSR_3_MainPower(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f000 fbea 	bl	80021f0 <SetRelaySSR_3_MainPower>
				ResetADC();
 8001a1c:	f000 f9a6 	bl	8001d6c <ResetADC>
				isMainACSelected = true;
 8001a20:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <main+0x32c>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]

				if(BatteryStatus < OK_BATTERY_HIGH && relayUpsStatus == 1)
 8001a26:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <main+0x334>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d806      	bhi.n	8001a3c <main+0x1f8>
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <main+0x2ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <main+0x1f8>
					SetRelay1_UPS(0);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 fb6e 	bl	8002118 <SetRelay1_UPS>

				acAvailableLastStatus = acAvailable;// jeżeli warunki przełączenia nie są spełnione, lastStatus NIE JEST aktualizowany
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <main+0x328>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e031      	b.n	8001aa8 <main+0x264>
			}
			 //else if (!acAvailable && isMainACSelected && WasChargedEnough)
			else if (!acAvailable && isMainACSelected)
 8001a44:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <main+0x328>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d029      	beq.n	8001aa8 <main+0x264>
 8001a54:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <main+0x32c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d024      	beq.n	8001aa8 <main+0x264>
			 {
				if(BatteryStatus > DISCHARGED_BATTERY && relayUpsStatus == 0)
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <main+0x334>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d906      	bls.n	8001a74 <main+0x230>
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <main+0x2ec>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <main+0x230>
					SetRelay1_UPS(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 fb52 	bl	8002118 <SetRelay1_UPS>

				SetRelaySSR_3_MainPower(0);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 fbbb 	bl	80021f0 <SetRelaySSR_3_MainPower>
				DelayUS(MSDelayBetweenACPower);
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <main+0x330>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fc14 	bl	80022ac <DelayUS>
				SetRelaySSR_4_InverterPower(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f000 fbcd 	bl	8002224 <SetRelaySSR_4_InverterPower>

				// ustabilizowanie sie napiecia baterii po zalaczeniu USP
				if(relayUpsStatus == 0)
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <main+0x2ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <main+0x254>
					DelayUS(5000000);
 8001a92:	483a      	ldr	r0, [pc, #232]	@ (8001b7c <main+0x338>)
 8001a94:	f000 fc0a 	bl	80022ac <DelayUS>

				ResetADC();
 8001a98:	f000 f968 	bl	8001d6c <ResetADC>
				isMainACSelected = false;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <main+0x32c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]


				acAvailableLastStatus = acAvailable; // jeżeli warunki przełączenia nie są spełnione, lastStatus NIE JEST aktualizowany
 8001aa2:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <main+0x328>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]


		}
     }

	 if (DMA_DC_Was_Filled && calculateBattVoltage)
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <main+0x308>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f43f af0f 	beq.w	80018d0 <main+0x8c>
 8001ab2:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <main+0x33c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f43f af09 	beq.w	80018d0 <main+0x8c>
	 {
	     DMA_DC_Was_Filled    = false;
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <main+0x308>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
	     calculateBattVoltage = false;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <main+0x33c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

	     VoltageDCBattery = ReadDCBattVoltageFromADC(ADC_DC_BATTERY_TABLE, Channel0_BUF_SIZE);
 8001aca:	2164      	movs	r1, #100	@ 0x64
 8001acc:	4820      	ldr	r0, [pc, #128]	@ (8001b50 <main+0x30c>)
 8001ace:	f7ff faf7 	bl	80010c0 <ReadDCBattVoltageFromADC>
 8001ad2:	eef0 7a40 	vmov.f32	s15, s0
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <main+0x340>)
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
	     BatteryStatus    = BatteryInformation(batteryDischarged, VoltageDCBattery);
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <main+0x344>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <main+0x340>)
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	eef0 0a47 	vmov.f32	s1, s14
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	f7ff fb42 	bl	8001178 <BatteryInformation>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <main+0x334>)
 8001afa:	701a      	strb	r2, [r3, #0]

		  
		switch (ChargingStatus)
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <main+0x348>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	f200 8094 	bhi.w	8001c2e <main+0x3ea>
 8001b06:	a201      	add	r2, pc, #4	@ (adr r2, 8001b0c <main+0x2c8>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b91 	.word	0x08001b91
 8001b10:	08001b99 	.word	0x08001b99
 8001b14:	08001bcd 	.word	0x08001bcd
 8001b18:	08001bf5 	.word	0x08001bf5
 8001b1c:	08001c0f 	.word	0x08001c0f
 8001b20:	2000094c 	.word	0x2000094c
 8001b24:	200000a4 	.word	0x200000a4
 8001b28:	20000954 	.word	0x20000954
 8001b2c:	2000099c 	.word	0x2000099c
 8001b30:	20000150 	.word	0x20000150
 8001b34:	20000154 	.word	0x20000154
 8001b38:	2000015c 	.word	0x2000015c
 8001b3c:	20000160 	.word	0x20000160
 8001b40:	001e8480 	.word	0x001e8480
 8001b44:	2000014d 	.word	0x2000014d
 8001b48:	20000164 	.word	0x20000164
 8001b4c:	2000016c 	.word	0x2000016c
 8001b50:	2000017c 	.word	0x2000017c
 8001b54:	20000168 	.word	0x20000168
 8001b58:	2000016d 	.word	0x2000016d
 8001b5c:	2000030c 	.word	0x2000030c
 8001b60:	2000014e 	.word	0x2000014e
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	20000158 	.word	0x20000158
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	2000001c 	.word	0x2000001c
 8001b78:	20000174 	.word	0x20000174
 8001b7c:	004c4b40 	.word	0x004c4b40
 8001b80:	2000014c 	.word	0x2000014c
 8001b84:	20000170 	.word	0x20000170
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	20000175 	.word	0x20000175
	    {
			case UNKNOWN:
				ChargingStatus = CHARGING_REQUIRED;
 8001b90:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <main+0x448>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
			break;
 8001b96:	e04a      	b.n	8001c2e <main+0x3ea>

			case CHARGING_REQUIRED:
				if (acAvailable)
 8001b98:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <main+0x44c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d010      	beq.n	8001bc4 <main+0x380>
				{
					if(BatteryStatus <= OK_BATTERY_MID)
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8001c94 <main+0x450>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d803      	bhi.n	8001bb2 <main+0x36e>
					{
						ChargingStatus = CHARGING_BATTERY;
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <main+0x448>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					ChargingStatus = NOT_CHARGING;
				}
			break;			
 8001bb0:	e038      	b.n	8001c24 <main+0x3e0>
					else if(isFirstRun)
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d035      	beq.n	8001c24 <main+0x3e0>
						isFirstRun = false;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	71bb      	strb	r3, [r7, #6]
						ChargingStatus = CHARGING_BATTERY;
 8001bbc:	4b33      	ldr	r3, [pc, #204]	@ (8001c8c <main+0x448>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
			break;			
 8001bc2:	e02f      	b.n	8001c24 <main+0x3e0>
					ChargingStatus = NOT_CHARGING;
 8001bc4:	4b31      	ldr	r3, [pc, #196]	@ (8001c8c <main+0x448>)
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	701a      	strb	r2, [r3, #0]
			break;			
 8001bca:	e02b      	b.n	8001c24 <main+0x3e0>
			
			case CHARGING_BATTERY:
				if (acAvailable)
 8001bcc:	4b30      	ldr	r3, [pc, #192]	@ (8001c90 <main+0x44c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <main+0x3a8>
				{
					SetRelay2_BATTERY_CHARGE(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 fab8 	bl	800214c <SetRelay2_BATTERY_CHARGE>
					if(BatteryStatus == FULL_BATTERY)
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <main+0x450>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d121      	bne.n	8001c28 <main+0x3e4>
					{
						ChargingStatus = CHARGING_END;
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <main+0x448>)
 8001be6:	2203      	movs	r2, #3
 8001be8:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					ChargingStatus = NOT_CHARGING;
				}
			break;
 8001bea:	e01d      	b.n	8001c28 <main+0x3e4>
					ChargingStatus = NOT_CHARGING;
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <main+0x448>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	701a      	strb	r2, [r3, #0]
			break;
 8001bf2:	e019      	b.n	8001c28 <main+0x3e4>
			
			case CHARGING_END:
				if (acAvailable)
 8001bf4:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <main+0x44c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <main+0x3c2>
				{
					ChargingStatus = NOT_CHARGING;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <main+0x448>)
 8001c00:	2204      	movs	r2, #4
 8001c02:	701a      	strb	r2, [r3, #0]
				else
				{
					ChargingStatus = CHARGING_REQUIRED;
				}
				
			break;
 8001c04:	e013      	b.n	8001c2e <main+0x3ea>
					ChargingStatus = CHARGING_REQUIRED;
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <main+0x448>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			break;
 8001c0c:	e00f      	b.n	8001c2e <main+0x3ea>
			
			case NOT_CHARGING:
				SetRelay2_BATTERY_CHARGE(0);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 fa9c 	bl	800214c <SetRelay2_BATTERY_CHARGE>

				if(BatteryStatus <= OK_BATTERY_HIGH)
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <main+0x450>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d807      	bhi.n	8001c2c <main+0x3e8>
				{
					ChargingStatus = CHARGING_REQUIRED;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <main+0x448>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
				}
			break;
 8001c22:	e003      	b.n	8001c2c <main+0x3e8>
			break;			
 8001c24:	bf00      	nop
 8001c26:	e002      	b.n	8001c2e <main+0x3ea>
			break;
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <main+0x3ea>
			break;
 8001c2c:	bf00      	nop
	    }

		switch (BatteryStatus)
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <main+0x450>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	f63f ae4c 	bhi.w	80018d0 <main+0x8c>
 8001c38:	a201      	add	r2, pc, #4	@ (adr r2, 8001c40 <main+0x3fc>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c59 	.word	0x08001c59
 8001c44:	08001c59 	.word	0x08001c59
 8001c48:	08001c61 	.word	0x08001c61
 8001c4c:	080018d1 	.word	0x080018d1
 8001c50:	08001c7f 	.word	0x08001c7f
 8001c54:	08001c7f 	.word	0x08001c7f
		{
			case NO_BATTERY:
			case DISCHARGED_BATTERY:
				SetRelay1_UPS(0);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 fa5d 	bl	8002118 <SetRelay1_UPS>
				break;
 8001c5e:	e014      	b.n	8001c8a <main+0x446>

			case OK_BATTERY_LOW:
					if(acAvailableLastStatus == true && isMainACSelected == false)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00f      	beq.n	8001c86 <main+0x442>
 8001c66:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <main+0x454>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <main+0x442>
					SetRelay1_UPS(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 fa4e 	bl	8002118 <SetRelay1_UPS>
				break;
 8001c7c:	e003      	b.n	8001c86 <main+0x442>
				break;

			case OK_BATTERY_HIGH:
			case FULL_BATTERY:
				// bateria wystarczająco naładowana → inwerter ON
				SetRelay1_UPS(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 fa4a 	bl	8002118 <SetRelay1_UPS>
				break;
 8001c84:	e001      	b.n	8001c8a <main+0x446>
				break;
 8001c86:	bf00      	nop
 8001c88:	e622      	b.n	80018d0 <main+0x8c>
	 if(adc_ready == true)
 8001c8a:	e621      	b.n	80018d0 <main+0x8c>
 8001c8c:	20000175 	.word	0x20000175
 8001c90:	20000158 	.word	0x20000158
 8001c94:	20000174 	.word	0x20000174
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b094      	sub	sp, #80	@ 0x50
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2230      	movs	r2, #48	@ 0x30
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 ff8c 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <SystemClock_Config+0xc8>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	4a26      	ldr	r2, [pc, #152]	@ (8001d64 <SystemClock_Config+0xc8>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <SystemClock_Config+0xc8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <SystemClock_Config+0xcc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d10:	2360      	movs	r3, #96	@ 0x60
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fe9f 	bl	8003a64 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d2c:	f000 f880 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	2302      	movs	r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f901 	bl	8003f54 <HAL_RCC_ClockConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d58:	f000 f86a 	bl	8001e30 <Error_Handler>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3750      	adds	r7, #80	@ 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <ResetADC>:

/* USER CODE BEGIN 4 */

void ResetADC()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001d70:	4810      	ldr	r0, [pc, #64]	@ (8001db4 <ResetADC+0x48>)
 8001d72:	f000 fc97 	bl	80026a4 <HAL_ADC_Stop_DMA>
	memset( ADC_AC_POWER_TABLE, 0, Channel1_BUF_SIZE * sizeof(uint32_t) );
 8001d76:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	480e      	ldr	r0, [pc, #56]	@ (8001db8 <ResetADC+0x4c>)
 8001d7e:	f002 ff23 	bl	8004bc8 <memset>
	memset( adc_buffer, 0, ADC_BUF_SIZE * sizeof(uint32_t) );
 8001d82:	2208      	movs	r2, #8
 8001d84:	2100      	movs	r1, #0
 8001d86:	480d      	ldr	r0, [pc, #52]	@ (8001dbc <ResetADC+0x50>)
 8001d88:	f002 ff1e 	bl	8004bc8 <memset>

	adc_ready = false;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <ResetADC+0x54>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
	DMA_AC_Was_Filled = false;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <ResetADC+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
	DMA_DC_Was_Filled = false;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <ResetADC+0x5c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
	Buffer_AC_TableCount = 0;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <ResetADC+0x60>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
	//DelayUS(1000);//100milisec
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 8001da4:	2202      	movs	r2, #2
 8001da6:	4905      	ldr	r1, [pc, #20]	@ (8001dbc <ResetADC+0x50>)
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <ResetADC+0x48>)
 8001daa:	f000 fb87 	bl	80024bc <HAL_ADC_Start_DMA>

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200000a4 	.word	0x200000a4
 8001db8:	2000030c 	.word	0x2000030c
 8001dbc:	2000094c 	.word	0x2000094c
 8001dc0:	2000014d 	.word	0x2000014d
 8001dc4:	2000016d 	.word	0x2000016d
 8001dc8:	2000016c 	.word	0x2000016c
 8001dcc:	20000168 	.word	0x20000168

08001dd0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	//UNUSED(hadc); // nie wiem czemu tego nie wyremować ??
	HAL_ADC_Stop_DMA(&hadc1); // jesli chcial bym wylaczyc timer
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <HAL_ADC_ConvCpltCallback+0x1c>)
 8001dda:	f000 fc63 	bl	80026a4 <HAL_ADC_Stop_DMA>
	adc_ready = true;
 8001dde:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <HAL_ADC_ConvCpltCallback+0x20>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200000a4 	.word	0x200000a4
 8001df0:	2000014d 	.word	0x2000014d

08001df4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10) // jest odpalany co 1 sek.
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d109      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		ToggleLedOnBlackPill();
 8001e06:	f000 f943 	bl	8002090 <ToggleLedOnBlackPill>
		calculateBattVoltage = true;  // Global flag
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		inrementOneSecTim++;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e18:	6013      	str	r3, [r2, #0]
//		if(DMA_AC_AdjustSensivity == false)
//			DMA_AC_AdjustSensivity = true;
//		else
//			DMA_AC_AdjustSensivity = false;
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40014400 	.word	0x40014400
 8001e28:	2000014c 	.word	0x2000014c
 8001e2c:	20000178 	.word	0x20000178

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <NMI_Handler+0x4>

08001e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee2:	f000 fa87 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ef2:	f002 fae7 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000099c 	.word	0x2000099c

08001f00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <DMA2_Stream0_IRQHandler+0x10>)
 8001f06:	f001 f973 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000ec 	.word	0x200000ec

08001f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <SystemInit+0x20>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <SystemInit+0x20>)
 8001f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f5e:	2263      	movs	r2, #99	@ 0x63
 8001f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001f68:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f6a:	22c7      	movs	r2, #199	@ 0xc7
 8001f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7a:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f7c:	f002 f996 	bl	80042ac <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001f86:	f7ff ff53 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001f98:	f002 fb84 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001fa2:	f7ff ff45 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <MX_TIM2_Init+0x94>)
 8001fb4:	f002 fd86 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001fbe:	f7ff ff37 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000954 	.word	0x20000954

08001fd0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002014 <MX_TIM10_Init+0x44>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001fdc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fe0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001fea:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	@ (8002010 <MX_TIM10_Init+0x40>)
 8001ffe:	f002 f955 	bl	80042ac <HAL_TIM_Base_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002008:	f7ff ff12 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000099c 	.word	0x2000099c
 8002014:	40014400 	.word	0x40014400

08002018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002046:	e01a      	b.n	800207e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0f      	ldr	r2, [pc, #60]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d115      	bne.n	800207e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a0b      	ldr	r2, [pc, #44]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2019      	movs	r0, #25
 8002074:	f000 ff0f 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002078:	2019      	movs	r0, #25
 800207a:	f000 ff28 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40014400 	.word	0x40014400

08002090 <ToggleLedOnBlackPill>:
#include "main.h"
//#include "adc.h"
#include "waweroBasicFunction.h"

void ToggleLedOnBlackPill()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  1 jako ON 0 jako OFF

	  HAL_GPIO_TogglePin(LED_Pill_GPIO_Port, LED_Pill_Pin);
 8002094:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <ToggleLedOnBlackPill+0x14>)
 800209a:	f001 fcc8 	bl	8003a2e <HAL_GPIO_TogglePin>
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020800 	.word	0x40020800

080020a8 <ReadStatusRelay1_UPS>:


}

int ReadStatusRelay1_UPS()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin);
 80020ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020b2:	480a      	ldr	r0, [pc, #40]	@ (80020dc <ReadStatusRelay1_UPS+0x34>)
 80020b4:	f001 fc8a 	bl	80039cc <HAL_GPIO_ReadPin>
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <ReadStatusRelay1_UPS+0x1e>
	{
		return 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e005      	b.n	80020d2 <ReadStatusRelay1_UPS+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <ReadStatusRelay1_UPS+0x28>
	{
		return 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <ReadStatusRelay1_UPS+0x2a>
	}
	else
		return 0;
 80020d0:	2300      	movs	r3, #0

}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40020000 	.word	0x40020000

080020e0 <ReadStatusRelay2_BATTERY_CHARGE>:

int ReadStatusRelay2_BATTERY_CHARGE()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin);
 80020e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ea:	480a      	ldr	r0, [pc, #40]	@ (8002114 <ReadStatusRelay2_BATTERY_CHARGE+0x34>)
 80020ec:	f001 fc6e 	bl	80039cc <HAL_GPIO_ReadPin>
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <ReadStatusRelay2_BATTERY_CHARGE+0x1e>
	{
		return 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e005      	b.n	800210a <ReadStatusRelay2_BATTERY_CHARGE+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <ReadStatusRelay2_BATTERY_CHARGE+0x28>
	{
		return 0;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <ReadStatusRelay2_BATTERY_CHARGE+0x2a>
	}
	else
		return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020000 	.word	0x40020000

08002118 <SetRelay1_UPS>:
//		return 0;
//}


void SetRelay1_UPS(int value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	if(value == 1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <SetRelay1_UPS+0x1c>
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <SetRelay1_UPS+0x30>)
 800212e:	f001 fc65 	bl	80039fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_SET);
}
 8002132:	e005      	b.n	8002140 <SetRelay1_UPS+0x28>
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800213a:	4803      	ldr	r0, [pc, #12]	@ (8002148 <SetRelay1_UPS+0x30>)
 800213c:	f001 fc5e 	bl	80039fc <HAL_GPIO_WritePin>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40020000 	.word	0x40020000

0800214c <SetRelay2_BATTERY_CHARGE>:

void SetRelay2_BATTERY_CHARGE(int value)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	if(value == 1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <SetRelay2_BATTERY_CHARGE+0x1c>
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002160:	4806      	ldr	r0, [pc, #24]	@ (800217c <SetRelay2_BATTERY_CHARGE+0x30>)
 8002162:	f001 fc4b 	bl	80039fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_SET);
}
 8002166:	e005      	b.n	8002174 <SetRelay2_BATTERY_CHARGE+0x28>
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800216e:	4803      	ldr	r0, [pc, #12]	@ (800217c <SetRelay2_BATTERY_CHARGE+0x30>)
 8002170:	f001 fc44 	bl	80039fc <HAL_GPIO_WritePin>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40020000 	.word	0x40020000

08002180 <ReadStatusRelay3_MainPower>:


// =============================================================================================

int ReadStatusRelay3_MainPower()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay3_MainPower_GPIO_Port, Relay3_MainPower_Pin);
 8002186:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800218a:	480a      	ldr	r0, [pc, #40]	@ (80021b4 <ReadStatusRelay3_MainPower+0x34>)
 800218c:	f001 fc1e 	bl	80039cc <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <ReadStatusRelay3_MainPower+0x1e>
	{
		return 0;
 800219a:	2300      	movs	r3, #0
 800219c:	e005      	b.n	80021aa <ReadStatusRelay3_MainPower+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <ReadStatusRelay3_MainPower+0x28>
	{
		return 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <ReadStatusRelay3_MainPower+0x2a>
	}
	else

		return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020000 	.word	0x40020000

080021b8 <ReadStatusRelay4_InverterPower>:

int ReadStatusRelay4_InverterPower()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin);
 80021be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021c2:	480a      	ldr	r0, [pc, #40]	@ (80021ec <ReadStatusRelay4_InverterPower+0x34>)
 80021c4:	f001 fc02 	bl	80039cc <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <ReadStatusRelay4_InverterPower+0x1e>
	{
		return 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e005      	b.n	80021e2 <ReadStatusRelay4_InverterPower+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <ReadStatusRelay4_InverterPower+0x28>
	{
		return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <ReadStatusRelay4_InverterPower+0x2a>
	}
	else

		return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020000 	.word	0x40020000

080021f0 <SetRelaySSR_3_MainPower>:

void SetRelaySSR_3_MainPower(int value)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if(value == 1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <SetRelaySSR_3_MainPower+0x1c>
		HAL_GPIO_WritePin(Relay3_MainPower_GPIO_Port, Relay3_MainPower_Pin, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002204:	4806      	ldr	r0, [pc, #24]	@ (8002220 <SetRelaySSR_3_MainPower+0x30>)
 8002206:	f001 fbf9 	bl	80039fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay3_MainPower_GPIO_Port, Relay3_MainPower_Pin, GPIO_PIN_RESET);

}
 800220a:	e005      	b.n	8002218 <SetRelaySSR_3_MainPower+0x28>
		HAL_GPIO_WritePin(Relay3_MainPower_GPIO_Port, Relay3_MainPower_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002212:	4803      	ldr	r0, [pc, #12]	@ (8002220 <SetRelaySSR_3_MainPower+0x30>)
 8002214:	f001 fbf2 	bl	80039fc <HAL_GPIO_WritePin>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020000 	.word	0x40020000

08002224 <SetRelaySSR_4_InverterPower>:

void SetRelaySSR_4_InverterPower(int value)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
//	if(value == 1)
//		HAL_GPIO_WritePin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin, GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin, GPIO_PIN_SET);

	if(value == 1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <SetRelaySSR_4_InverterPower+0x1c>
		HAL_GPIO_WritePin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002238:	4806      	ldr	r0, [pc, #24]	@ (8002254 <SetRelaySSR_4_InverterPower+0x30>)
 800223a:	f001 fbdf 	bl	80039fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin, GPIO_PIN_RESET);
}
 800223e:	e005      	b.n	800224c <SetRelaySSR_4_InverterPower+0x28>
		HAL_GPIO_WritePin(Relay4_InverterPower_GPIO_Port, Relay4_InverterPower_Pin, GPIO_PIN_RESET);
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002246:	4803      	ldr	r0, [pc, #12]	@ (8002254 <SetRelaySSR_4_InverterPower+0x30>)
 8002248:	f001 fbd8 	bl	80039fc <HAL_GPIO_WritePin>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020000 	.word	0x40020000

08002258 <DelayInit>:
  //ralated to  LoRa ------------------------------------------------- END


//ralated to  delayUS ------------------------------------------------- START
void DelayInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <DelayInit+0x4c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <DelayInit+0x4c>)
 8002262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002266:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <DelayInit+0x4c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <DelayInit+0x4c>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <DelayInit+0x50>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <DelayInit+0x50>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <DelayInit+0x50>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <DelayInit+0x50>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <DelayInit+0x50>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002292:	bf00      	nop
  __ASM volatile ("NOP");
 8002294:	bf00      	nop
  __ASM volatile ("NOP");
 8002296:	bf00      	nop
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000edf0 	.word	0xe000edf0
 80022a8:	e0001000 	.word	0xe0001000

080022ac <DelayUS>:

void DelayUS(uint32_t us) {
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <DelayUS+0x44>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0e      	ldr	r2, [pc, #56]	@ (80022f4 <DelayUS+0x48>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9a      	lsrs	r2, r3, #18
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <DelayUS+0x4c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <DelayUS+0x4c>)
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f6      	bhi.n	80022ce <DelayUS+0x22>
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000020 	.word	0x20000020
 80022f4:	431bde83 	.word	0x431bde83
 80022f8:	e0001000 	.word	0xe0001000

080022fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002300:	f7ff fe08 	bl	8001f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002306:	490d      	ldr	r1, [pc, #52]	@ (800233c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002308:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800231c:	4c0a      	ldr	r4, [pc, #40]	@ (8002348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232a:	f002 fc5b 	bl	8004be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232e:	f7ff fa89 	bl	8001844 <main>
  bx  lr    
 8002332:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800233c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002340:	08004cb0 	.word	0x08004cb0
  ldr r2, =_sbss
 8002344:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002348:	20000b20 	.word	0x20000b20

0800234c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC_IRQHandler>
	...

08002350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002354:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_Init+0x40>)
 800235a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <HAL_Init+0x40>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <HAL_Init+0x40>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 fd81 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fd5a 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fd99 	bl	8002eea <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 fd61 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	@ (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000020 	.word	0x20000020
 80023ec:	20000028 	.word	0x20000028
 80023f0:	20000024 	.word	0x20000024

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000028 	.word	0x20000028
 8002418:	200009e4 	.word	0x200009e4

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200009e4 	.word	0x200009e4

08002434 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e033      	b.n	80024b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f8e0 	bl	8001618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800247a:	f023 0302 	bic.w	r3, r3, #2
 800247e:	f043 0202 	orr.w	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 faac 	bl	80029e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024a2:	e001      	b.n	80024a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Start_DMA+0x22>
 80024da:	2302      	movs	r3, #2
 80024dc:	e0d0      	b.n	8002680 <HAL_ADC_Start_DMA+0x1c4>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d018      	beq.n	8002526 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002504:	4b60      	ldr	r3, [pc, #384]	@ (8002688 <HAL_ADC_Start_DMA+0x1cc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a60      	ldr	r2, [pc, #384]	@ (800268c <HAL_ADC_Start_DMA+0x1d0>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9a      	lsrs	r2, r3, #18
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3b01      	subs	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002534:	d107      	bne.n	8002546 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002544:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 8088 	bne.w	8002666 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002580:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002594:	d106      	bne.n	80025a4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f023 0206 	bic.w	r2, r3, #6
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80025a2:	e002      	b.n	80025aa <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_ADC_Start_DMA+0x1d4>)
 80025b4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	4a36      	ldr	r2, [pc, #216]	@ (8002694 <HAL_ADC_Start_DMA+0x1d8>)
 80025bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	4a35      	ldr	r2, [pc, #212]	@ (8002698 <HAL_ADC_Start_DMA+0x1dc>)
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	4a34      	ldr	r2, [pc, #208]	@ (800269c <HAL_ADC_Start_DMA+0x1e0>)
 80025cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	334c      	adds	r3, #76	@ 0x4c
 8002602:	4619      	mov	r1, r3
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f000 fd2a 	bl	8003060 <HAL_DMA_Start_IT>
 800260c:	4603      	mov	r3, r0
 800260e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d129      	bne.n	800267e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	e020      	b.n	800267e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_ADC_Start_DMA+0x1e4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11b      	bne.n	800267e <HAL_ADC_Start_DMA+0x1c2>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d114      	bne.n	800267e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e00b      	b.n	800267e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800267e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000020 	.word	0x20000020
 800268c:	431bde83 	.word	0x431bde83
 8002690:	40012300 	.word	0x40012300
 8002694:	08002bdd 	.word	0x08002bdd
 8002698:	08002c97 	.word	0x08002c97
 800269c:	08002cb3 	.word	0x08002cb3
 80026a0:	40012000 	.word	0x40012000

080026a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Stop_DMA+0x1a>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e048      	b.n	8002750 <HAL_ADC_Stop_DMA+0xac>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d130      	bne.n	8002746 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d10f      	bne.n	8002722 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd02 	bl	8003110 <HAL_DMA_Abort>
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002730:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1c>
 8002798:	2302      	movs	r3, #2
 800279a:	e113      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x244>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d925      	bls.n	80027f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	3b1e      	subs	r3, #30
 80027c2:	2207      	movs	r2, #7
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	4603      	mov	r3, r0
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4403      	add	r3, r0
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	409a      	lsls	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e022      	b.n	800283e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	2207      	movs	r2, #7
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	4603      	mov	r3, r0
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4403      	add	r3, r0
 8002834:	409a      	lsls	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d824      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b05      	subs	r3, #5
 8002858:	221f      	movs	r2, #31
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	400a      	ands	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	3b05      	subs	r3, #5
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
 800288e:	e04c      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d824      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b23      	subs	r3, #35	@ 0x23
 80028aa:	221f      	movs	r2, #31
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43da      	mvns	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	400a      	ands	r2, r1
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b23      	subs	r3, #35	@ 0x23
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e0:	e023      	b.n	800292a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b41      	subs	r3, #65	@ 0x41
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b41      	subs	r3, #65	@ 0x41
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 800292c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a28      	ldr	r2, [pc, #160]	@ (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b12      	cmp	r3, #18
 800293e:	d10b      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_ADC_ConfigChannel+0x254>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12b      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x1f4>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b11      	cmp	r3, #17
 8002972:	d122      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_ADC_ConfigChannel+0x258>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_ADC_ConfigChannel+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a11      	ldr	r2, [pc, #68]	@ (80029e0 <HAL_ADC_ConfigChannel+0x260>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9a      	lsrs	r2, r3, #18
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40012300 	.word	0x40012300
 80029d4:	40012000 	.word	0x40012000
 80029d8:	10000012 	.word	0x10000012
 80029dc:	20000020 	.word	0x20000020
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ec:	4b79      	ldr	r3, [pc, #484]	@ (8002bd4 <ADC_Init+0x1f0>)
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <ADC_Init+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e00f      	b.n	8002ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0202 	bic.w	r2, r2, #2
 8002af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	035a      	lsls	r2, r3, #13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13c      	bne.n	8002c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d127      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff f8b1 	bl	8001dd0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd75 	bl	800276c <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fd57 	bl	8002758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fd4a 	bl	800276c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	@ (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff3e 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff31 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fa84 	bl	800241c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e099      	b.n	8003054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	e00f      	b.n	8002f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7ff fa6b 	bl	800241c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d908      	bls.n	8002f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e078      	b.n	8003054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e8      	bne.n	8002f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4b38      	ldr	r3, [pc, #224]	@ (800305c <HAL_DMA_Init+0x158>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d117      	bne.n	8003026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fadf 	bl	80035cc <DMA_CheckFifoParam>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003022:	2301      	movs	r3, #1
 8003024:	e016      	b.n	8003054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa96 	bl	8003560 <DMA_CalcBaseAndBitshift>
 8003034:	4603      	mov	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	223f      	movs	r2, #63	@ 0x3f
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	f010803f 	.word	0xf010803f

08003060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_DMA_Start_IT+0x26>
 8003082:	2302      	movs	r3, #2
 8003084:	e040      	b.n	8003108 <HAL_DMA_Start_IT+0xa8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12f      	bne.n	80030fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa28 	bl	8003504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	223f      	movs	r2, #63	@ 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0216 	orr.w	r2, r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e005      	b.n	8003106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800311e:	f7ff f97d 	bl	800241c <HAL_GetTick>
 8003122:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d008      	beq.n	8003142 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e052      	b.n	80031e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003160:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_Abort+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003192:	e013      	b.n	80031bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003194:	f7ff f942 	bl	800241c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d90c      	bls.n	80031bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e015      	b.n	80031e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e4      	bne.n	8003194 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ce:	223f      	movs	r2, #63	@ 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003438 <HAL_DMA_IRQHandler+0x248>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a8e      	ldr	r2, [pc, #568]	@ (800343c <HAL_DMA_IRQHandler+0x24c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	2208      	movs	r2, #8
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01a      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	2208      	movs	r2, #8
 800324a:	409a      	lsls	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	2201      	movs	r2, #1
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	2204      	movs	r2, #4
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	2210      	movs	r2, #16
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d043      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03c      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	2210      	movs	r2, #16
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e01f      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
 8003330:	e016      	b.n	8003360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0208 	bic.w	r2, r2, #8
 800334e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	2220      	movs	r2, #32
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 808f 	beq.w	8003490 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8087 	beq.w	8003490 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	2220      	movs	r2, #32
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b05      	cmp	r3, #5
 8003398:	d136      	bne.n	8003408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0216 	bic.w	r2, r2, #22
 80033a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_DMA_IRQHandler+0x1da>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0208 	bic.w	r2, r2, #8
 80033d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	223f      	movs	r2, #63	@ 0x3f
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d07e      	beq.n	80034fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
        }
        return;
 8003406:	e079      	b.n	80034fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10d      	bne.n	8003440 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	2b00      	cmp	r3, #0
 800342a:	d031      	beq.n	8003490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
 8003434:	e02c      	b.n	8003490 <HAL_DMA_IRQHandler+0x2a0>
 8003436:	bf00      	nop
 8003438:	20000020 	.word	0x20000020
 800343c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e01e      	b.n	8003490 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10f      	bne.n	8003480 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0210 	bic.w	r2, r2, #16
 800346e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	2b00      	cmp	r3, #0
 8003496:	d032      	beq.n	80034fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d022      	beq.n	80034ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2205      	movs	r2, #5
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d307      	bcc.n	80034d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f2      	bne.n	80034bc <HAL_DMA_IRQHandler+0x2cc>
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
 80034fa:	e000      	b.n	80034fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80034fc:	bf00      	nop
    }
  }
}
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d108      	bne.n	8003544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003542:	e007      	b.n	8003554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3b10      	subs	r3, #16
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357a:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <DMA_CalcBaseAndBitshift+0x68>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d909      	bls.n	80035a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	659a      	str	r2, [r3, #88]	@ 0x58
 80035a0:	e007      	b.n	80035b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	aaaaaaab 	.word	0xaaaaaaab
 80035c8:	08004c98 	.word	0x08004c98

080035cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11f      	bne.n	8003626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d856      	bhi.n	800369a <DMA_CheckFifoParam+0xce>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <DMA_CheckFifoParam+0x28>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003617 	.word	0x08003617
 80035fc:	08003605 	.word	0x08003605
 8003600:	0800369b 	.word	0x0800369b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d046      	beq.n	800369e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e043      	b.n	800369e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800361e:	d140      	bne.n	80036a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e03d      	b.n	80036a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362e:	d121      	bne.n	8003674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d837      	bhi.n	80036a6 <DMA_CheckFifoParam+0xda>
 8003636:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <DMA_CheckFifoParam+0x70>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003653 	.word	0x08003653
 8003644:	0800364d 	.word	0x0800364d
 8003648:	08003665 	.word	0x08003665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e030      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d025      	beq.n	80036aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003662:	e022      	b.n	80036aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800366c:	d11f      	bne.n	80036ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003672:	e01c      	b.n	80036ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d903      	bls.n	8003682 <DMA_CheckFifoParam+0xb6>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d003      	beq.n	8003688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003680:	e018      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      break;
 8003686:	e015      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e00b      	b.n	80036b2 <DMA_CheckFifoParam+0xe6>
      break;
 800369a:	bf00      	nop
 800369c:	e00a      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e008      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e006      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e004      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
    }
  } 
  
  return status; 
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e159      	b.n	8003994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8148 	bne.w	800398e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d005      	beq.n	8003716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	2b02      	cmp	r3, #2
 8003714:	d130      	bne.n	8003778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a2 	beq.w	800398e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b57      	ldr	r3, [pc, #348]	@ (80039ac <HAL_GPIO_Init+0x2e8>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	4a56      	ldr	r2, [pc, #344]	@ (80039ac <HAL_GPIO_Init+0x2e8>)
 8003854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003858:	6453      	str	r3, [r2, #68]	@ 0x44
 800385a:	4b54      	ldr	r3, [pc, #336]	@ (80039ac <HAL_GPIO_Init+0x2e8>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003866:	4a52      	ldr	r2, [pc, #328]	@ (80039b0 <HAL_GPIO_Init+0x2ec>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a49      	ldr	r2, [pc, #292]	@ (80039b4 <HAL_GPIO_Init+0x2f0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_Init+0x202>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a48      	ldr	r2, [pc, #288]	@ (80039b8 <HAL_GPIO_Init+0x2f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x1fe>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a47      	ldr	r2, [pc, #284]	@ (80039bc <HAL_GPIO_Init+0x2f8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_Init+0x1fa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a46      	ldr	r2, [pc, #280]	@ (80039c0 <HAL_GPIO_Init+0x2fc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_Init+0x1f6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a45      	ldr	r2, [pc, #276]	@ (80039c4 <HAL_GPIO_Init+0x300>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_Init+0x1f2>
 80038b2:	2304      	movs	r3, #4
 80038b4:	e008      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e004      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038be:	2302      	movs	r3, #2
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_GPIO_Init+0x204>
 80038c6:	2300      	movs	r3, #0
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f002 0203 	and.w	r2, r2, #3
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4093      	lsls	r3, r2
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d8:	4935      	ldr	r1, [pc, #212]	@ (80039b0 <HAL_GPIO_Init+0x2ec>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e6:	4b38      	ldr	r3, [pc, #224]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800390a:	4a2f      	ldr	r2, [pc, #188]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003934:	4a24      	ldr	r2, [pc, #144]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800393a:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003988:	4a0f      	ldr	r2, [pc, #60]	@ (80039c8 <HAL_GPIO_Init+0x304>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f aea2 	bls.w	80036e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3724      	adds	r7, #36	@ 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40013800 	.word	0x40013800
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020c00 	.word	0x40020c00
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e001      	b.n	80039ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a40:	887a      	ldrh	r2, [r7, #2]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	041a      	lsls	r2, r3, #16
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	400b      	ands	r3, r1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e267      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d075      	beq.n	8003b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a82:	4b88      	ldr	r3, [pc, #544]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4b85      	ldr	r3, [pc, #532]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b82      	ldr	r3, [pc, #520]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d157      	bne.n	8003b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e242      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x74>
 8003aca:	4b76      	ldr	r3, [pc, #472]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a75      	ldr	r2, [pc, #468]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x98>
 8003ae2:	4b70      	ldr	r3, [pc, #448]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6c      	ldr	r2, [pc, #432]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003afc:	4b69      	ldr	r3, [pc, #420]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a68      	ldr	r2, [pc, #416]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b66      	ldr	r3, [pc, #408]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fc7e 	bl	800241c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe fc7a 	bl	800241c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e207      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xc0>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe fc6a 	bl	800241c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fc66 	bl	800241c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1f3      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b51      	ldr	r3, [pc, #324]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe8>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b47      	ldr	r3, [pc, #284]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b44      	ldr	r3, [pc, #272]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1c7      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4937      	ldr	r1, [pc, #220]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_RCC_OscConfig+0x244>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fc1f 	bl	800241c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fe fc1b 	bl	800241c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1a8      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b28      	ldr	r3, [pc, #160]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4925      	ldr	r1, [pc, #148]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <HAL_RCC_OscConfig+0x244>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fbfe 	bl	800241c <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fbfa 	bl	800241c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e187      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d036      	beq.n	8003cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <HAL_RCC_OscConfig+0x248>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fbde 	bl	800241c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe fbda 	bl	800241c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e167      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_OscConfig+0x240>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x200>
 8003c82:	e01b      	b.n	8003cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_RCC_OscConfig+0x248>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fbc7 	bl	800241c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e00e      	b.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fe fbc3 	bl	800241c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d907      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e150      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470000 	.word	0x42470000
 8003cac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b88      	ldr	r3, [pc, #544]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ea      	bne.n	8003c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8097 	beq.w	8003df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b81      	ldr	r3, [pc, #516]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cea:	4b7a      	ldr	r3, [pc, #488]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b77      	ldr	r3, [pc, #476]	@ (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d118      	bne.n	8003d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d06:	4b74      	ldr	r3, [pc, #464]	@ (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a73      	ldr	r2, [pc, #460]	@ (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fb83 	bl	800241c <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1a:	f7fe fb7f 	bl	800241c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e10c      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_OscConfig+0x474>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2ea>
 8003d40:	4b64      	ldr	r3, [pc, #400]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a63      	ldr	r2, [pc, #396]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	e01c      	b.n	8003d88 <HAL_RCC_OscConfig+0x324>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x30c>
 8003d56:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d62:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	4a5b      	ldr	r2, [pc, #364]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0x324>
 8003d70:	4b58      	ldr	r3, [pc, #352]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	4a57      	ldr	r2, [pc, #348]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	4b55      	ldr	r3, [pc, #340]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	4a54      	ldr	r2, [pc, #336]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fb44 	bl	800241c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe fb40 	bl	800241c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0cb      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	4b49      	ldr	r3, [pc, #292]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ee      	beq.n	8003d98 <HAL_RCC_OscConfig+0x334>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7fe fb2e 	bl	800241c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fb2a 	bl	800241c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0b5      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dda:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dec:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	4a38      	ldr	r2, [pc, #224]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a1 	beq.w	8003f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e02:	4b34      	ldr	r3, [pc, #208]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d05c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d141      	bne.n	8003e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fafe 	bl	800241c <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe fafa 	bl	800241c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e087      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	491b      	ldr	r1, [pc, #108]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe fad3 	bl	800241c <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7a:	f7fe facf 	bl	800241c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e05c      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8c:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x416>
 8003e98:	e054      	b.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_RCC_OscConfig+0x478>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fabc 	bl	800241c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe fab8 	bl	800241c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e045      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x444>
 8003ec6:	e03d      	b.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e038      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_RCC_OscConfig+0x4ec>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d028      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d121      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d11a      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0cc      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b68      	ldr	r3, [pc, #416]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90c      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b65      	ldr	r3, [pc, #404]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b8      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b59      	ldr	r3, [pc, #356]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a58      	ldr	r2, [pc, #352]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b53      	ldr	r3, [pc, #332]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b50      	ldr	r3, [pc, #320]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494d      	ldr	r1, [pc, #308]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d044      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	2b03      	cmp	r3, #3
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b3f      	ldr	r3, [pc, #252]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e067      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4934      	ldr	r1, [pc, #208]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fe f9ea 	bl	800241c <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe f9e6 	bl	800241c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e04f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b25      	ldr	r3, [pc, #148]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20c      	bcs.n	800409c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b22      	ldr	r3, [pc, #136]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b20      	ldr	r3, [pc, #128]	@ (800410c <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e032      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4916      	ldr	r1, [pc, #88]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490e      	ldr	r1, [pc, #56]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f821 	bl	8004120 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490a      	ldr	r1, [pc, #40]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	4a09      	ldr	r2, [pc, #36]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040f6:	4b09      	ldr	r3, [pc, #36]	@ (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f94a 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00
 8004110:	40023800 	.word	0x40023800
 8004114:	08004c88 	.word	0x08004c88
 8004118:	20000020 	.word	0x20000020
 800411c:	20000024 	.word	0x20000024

08004120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004124:	b090      	sub	sp, #64	@ 0x40
 8004126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004138:	4b59      	ldr	r3, [pc, #356]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d00d      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x40>
 8004144:	2b08      	cmp	r3, #8
 8004146:	f200 80a1 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x16c>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x34>
 800414e:	2b04      	cmp	r3, #4
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x3a>
 8004152:	e09b      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004158:	e09b      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415a:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800415c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800415e:	e098      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004160:	4b4f      	ldr	r3, [pc, #316]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416a:	4b4d      	ldr	r3, [pc, #308]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	2200      	movs	r2, #0
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	627a      	str	r2, [r7, #36]	@ 0x24
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004188:	2100      	movs	r1, #0
 800418a:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800418c:	fb03 f201 	mul.w	r2, r3, r1
 8004190:	2300      	movs	r3, #0
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	4413      	add	r3, r2
 8004198:	4a43      	ldr	r2, [pc, #268]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419a:	fba0 1202 	umull	r1, r2, r0, r2
 800419e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a0:	460a      	mov	r2, r1
 80041a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a6:	4413      	add	r3, r2
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ac:	2200      	movs	r2, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	61fa      	str	r2, [r7, #28]
 80041b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041ba:	f7fc fde9 	bl	8000d90 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4613      	mov	r3, r2
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c6:	e053      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	2200      	movs	r2, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041da:	f04f 0b00 	mov.w	fp, #0
 80041de:	4652      	mov	r2, sl
 80041e0:	465b      	mov	r3, fp
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	0159      	lsls	r1, r3, #5
 80041ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f0:	0150      	lsls	r0, r2, #5
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	ebb2 080a 	subs.w	r8, r2, sl
 80041fa:	eb63 090b 	sbc.w	r9, r3, fp
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800420e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004212:	ebb2 0408 	subs.w	r4, r2, r8
 8004216:	eb63 0509 	sbc.w	r5, r3, r9
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	00eb      	lsls	r3, r5, #3
 8004224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004228:	00e2      	lsls	r2, r4, #3
 800422a:	4614      	mov	r4, r2
 800422c:	461d      	mov	r5, r3
 800422e:	eb14 030a 	adds.w	r3, r4, sl
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	eb45 030b 	adc.w	r3, r5, fp
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004246:	4629      	mov	r1, r5
 8004248:	028b      	lsls	r3, r1, #10
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004250:	4621      	mov	r1, r4
 8004252:	028a      	lsls	r2, r1, #10
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	2200      	movs	r2, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	60fa      	str	r2, [r7, #12]
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	f7fc fd94 	bl	8000d90 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004294:	4618      	mov	r0, r3
 8004296:	3740      	adds	r7, #64	@ 0x40
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	017d7840 	.word	0x017d7840

080042ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e041      	b.n	8004342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fea0 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f000 faca 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e03c      	b.n	80043de <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1e      	ldr	r2, [pc, #120]	@ (80043ec <HAL_TIM_Base_Start+0xa0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start+0x5c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start+0x5c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_TIM_Base_Start+0xa4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start+0x5c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_TIM_Base_Start+0xa8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start+0x5c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_TIM_Base_Start+0xac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start+0x5c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_TIM_Base_Start+0xb0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d010      	beq.n	80043dc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ca:	e007      	b.n	80043dc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40014000 	.word	0x40014000

08004400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d001      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e044      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1e      	ldr	r2, [pc, #120]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x6c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x6c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1a      	ldr	r2, [pc, #104]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x6c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a19      	ldr	r2, [pc, #100]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <HAL_TIM_Base_Start_IT+0xbc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x6c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40014000 	.word	0x40014000

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f999 	bl	8004846 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f98b 	bl	8004832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f99c 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f973 	bl	8004846 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f965 	bl	8004832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f976 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0208 	mvn.w	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f94d 	bl	8004846 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f93f 	bl	8004832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f950 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f927 	bl	8004846 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f919 	bl	8004832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f92a 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fbe2 	bl	8001df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fab0 	bl	8004bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8fb 	bl	800486e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0220 	mvn.w	r2, #32
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa82 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0b4      	b.n	800482a <HAL_TIM_ConfigClockSource+0x186>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f8:	d03e      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xd4>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004706:	f000 8086 	beq.w	8004816 <HAL_TIM_ConfigClockSource+0x172>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470e:	d87f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b70      	cmp	r3, #112	@ 0x70
 8004712:	d01a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xa6>
 8004714:	2b70      	cmp	r3, #112	@ 0x70
 8004716:	d87b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d050      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x11a>
 800471c:	2b60      	cmp	r3, #96	@ 0x60
 800471e:	d877      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b50      	cmp	r3, #80	@ 0x50
 8004722:	d03c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xfa>
 8004724:	2b50      	cmp	r3, #80	@ 0x50
 8004726:	d873      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d058      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x13a>
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d86f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b30      	cmp	r3, #48	@ 0x30
 8004732:	d064      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	2b30      	cmp	r3, #48	@ 0x30
 8004736:	d86b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d060      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d867      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d05a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	e062      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	f000 f993 	bl	8004a84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800476c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04f      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	f000 f97c 	bl	8004a84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e03c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8f0 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	@ 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f949 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 80047bc:	e02c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f90f 	bl	80049ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	@ 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f939 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 80047dc:	e01c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8d0 	bl	8004990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	@ 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f929 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f920 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 800480e:	e003      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e000      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <TIM_Base_SetConfig+0xf0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a34      	ldr	r2, [pc, #208]	@ (8004978 <TIM_Base_SetConfig+0xf4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a33      	ldr	r2, [pc, #204]	@ (800497c <TIM_Base_SetConfig+0xf8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x38>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a32      	ldr	r2, [pc, #200]	@ (8004980 <TIM_Base_SetConfig+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <TIM_Base_SetConfig+0xf0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01b      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048dc:	d017      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <TIM_Base_SetConfig+0xf4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a24      	ldr	r2, [pc, #144]	@ (800497c <TIM_Base_SetConfig+0xf8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <TIM_Base_SetConfig+0xfc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a22      	ldr	r2, [pc, #136]	@ (8004984 <TIM_Base_SetConfig+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a21      	ldr	r2, [pc, #132]	@ (8004988 <TIM_Base_SetConfig+0x104>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0x8a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a20      	ldr	r2, [pc, #128]	@ (800498c <TIM_Base_SetConfig+0x108>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0c      	ldr	r2, [pc, #48]	@ (8004974 <TIM_Base_SetConfig+0xf0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d103      	bne.n	800494e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40010000 	.word	0x40010000
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40000c00 	.word	0x40000c00
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 030a 	bic.w	r3, r3, #10
 80049cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f043 0307 	orr.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e050      	b.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d013      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <memset>:
 8004bc8:	4402      	add	r2, r0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <__errno>:
 8004bd8:	4b01      	ldr	r3, [pc, #4]	@ (8004be0 <__errno+0x8>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	2000002c 	.word	0x2000002c

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c1c <__libc_init_array+0x38>)
 8004be8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c20 <__libc_init_array+0x3c>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c24 <__libc_init_array+0x40>)
 8004bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8004c28 <__libc_init_array+0x44>)
 8004bf8:	f000 f83a 	bl	8004c70 <_init>
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	2600      	movs	r6, #0
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	08004ca8 	.word	0x08004ca8
 8004c20:	08004ca8 	.word	0x08004ca8
 8004c24:	08004ca8 	.word	0x08004ca8
 8004c28:	08004cac 	.word	0x08004cac

08004c2c <sqrtf>:
 8004c2c:	b508      	push	{r3, lr}
 8004c2e:	ed2d 8b02 	vpush	{d8}
 8004c32:	eeb0 8a40 	vmov.f32	s16, s0
 8004c36:	f000 f817 	bl	8004c68 <__ieee754_sqrtf>
 8004c3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d60c      	bvs.n	8004c5e <sqrtf+0x32>
 8004c44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004c64 <sqrtf+0x38>
 8004c48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	d505      	bpl.n	8004c5e <sqrtf+0x32>
 8004c52:	f7ff ffc1 	bl	8004bd8 <__errno>
 8004c56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004c5a:	2321      	movs	r3, #33	@ 0x21
 8004c5c:	6003      	str	r3, [r0, #0]
 8004c5e:	ecbd 8b02 	vpop	{d8}
 8004c62:	bd08      	pop	{r3, pc}
 8004c64:	00000000 	.word	0x00000000

08004c68 <__ieee754_sqrtf>:
 8004c68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004c6c:	4770      	bx	lr
	...

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
