
04.UPS_NewMCU_F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cec  08004cec  00005cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf4  08004cf4  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08004cfc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000007c  08004d78  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  08004d78  00006b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb4b  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a7  00000000  00000000  00012bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000151a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a7  00000000  00000000  00015e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018334  00000000  00000000  000167ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b4  00000000  00000000  0002eb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098674  00000000  00000000  0003eed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d754b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000d7590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004cbc 	.word	0x08004cbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08004cbc 	.word	0x08004cbc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_uldivmod>:
 8000d90:	b953      	cbnz	r3, 8000da8 <__aeabi_uldivmod+0x18>
 8000d92:	b94a      	cbnz	r2, 8000da8 <__aeabi_uldivmod+0x18>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	bf08      	it	eq
 8000d98:	2800      	cmpeq	r0, #0
 8000d9a:	bf1c      	itt	ne
 8000d9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000da0:	f04f 30ff 	movne.w	r0, #4294967295
 8000da4:	f000 b96a 	b.w	800107c <__aeabi_idiv0>
 8000da8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db0:	f000 f806 	bl	8000dc0 <__udivmoddi4>
 8000db4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr

08000dc0 <__udivmoddi4>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	9d08      	ldr	r5, [sp, #32]
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14e      	bne.n	8000e6a <__udivmoddi4+0xaa>
 8000dcc:	4694      	mov	ip, r2
 8000dce:	458c      	cmp	ip, r1
 8000dd0:	4686      	mov	lr, r0
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	d962      	bls.n	8000e9e <__udivmoddi4+0xde>
 8000dd8:	b14a      	cbz	r2, 8000dee <__udivmoddi4+0x2e>
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	4091      	lsls	r1, r2
 8000de0:	fa20 f303 	lsr.w	r3, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	4319      	orrs	r1, r3
 8000dea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df2:	fa1f f68c 	uxth.w	r6, ip
 8000df6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb04 f106 	mul.w	r1, r4, r6
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d90a      	bls.n	8000e24 <__udivmoddi4+0x64>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e16:	f080 8112 	bcs.w	800103e <__udivmoddi4+0x27e>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 810f 	bls.w	800103e <__udivmoddi4+0x27e>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a59      	subs	r1, r3, r1
 8000e26:	fa1f f38e 	uxth.w	r3, lr
 8000e2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e36:	fb00 f606 	mul.w	r6, r0, r6
 8000e3a:	429e      	cmp	r6, r3
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x94>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e46:	f080 80fc 	bcs.w	8001042 <__udivmoddi4+0x282>
 8000e4a:	429e      	cmp	r6, r3
 8000e4c:	f240 80f9 	bls.w	8001042 <__udivmoddi4+0x282>
 8000e50:	4463      	add	r3, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	1b9b      	subs	r3, r3, r6
 8000e56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11d      	cbz	r5, 8000e66 <__udivmoddi4+0xa6>
 8000e5e:	40d3      	lsrs	r3, r2
 8000e60:	2200      	movs	r2, #0
 8000e62:	e9c5 3200 	strd	r3, r2, [r5]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d905      	bls.n	8000e7a <__udivmoddi4+0xba>
 8000e6e:	b10d      	cbz	r5, 8000e74 <__udivmoddi4+0xb4>
 8000e70:	e9c5 0100 	strd	r0, r1, [r5]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4608      	mov	r0, r1
 8000e78:	e7f5      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000e7a:	fab3 f183 	clz	r1, r3
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d146      	bne.n	8000f10 <__udivmoddi4+0x150>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xcc>
 8000e86:	4290      	cmp	r0, r2
 8000e88:	f0c0 80f0 	bcc.w	800106c <__udivmoddi4+0x2ac>
 8000e8c:	1a86      	subs	r6, r0, r2
 8000e8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d0e6      	beq.n	8000e66 <__udivmoddi4+0xa6>
 8000e98:	e9c5 6300 	strd	r6, r3, [r5]
 8000e9c:	e7e3      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	f040 8090 	bne.w	8000fc4 <__udivmoddi4+0x204>
 8000ea4:	eba1 040c 	sub.w	r4, r1, ip
 8000ea8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eba:	fb08 4416 	mls	r4, r8, r6, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb07 f006 	mul.w	r0, r7, r6
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x11c>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x11a>
 8000ed4:	4298      	cmp	r0, r3
 8000ed6:	f200 80cd 	bhi.w	8001074 <__udivmoddi4+0x2b4>
 8000eda:	4626      	mov	r6, r4
 8000edc:	1a1c      	subs	r4, r3, r0
 8000ede:	fa1f f38e 	uxth.w	r3, lr
 8000ee2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ee6:	fb08 4410 	mls	r4, r8, r0, r4
 8000eea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eee:	fb00 f707 	mul.w	r7, r0, r7
 8000ef2:	429f      	cmp	r7, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x148>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x146>
 8000f00:	429f      	cmp	r7, r3
 8000f02:	f200 80b0 	bhi.w	8001066 <__udivmoddi4+0x2a6>
 8000f06:	4620      	mov	r0, r4
 8000f08:	1bdb      	subs	r3, r3, r7
 8000f0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f0e:	e7a5      	b.n	8000e5c <__udivmoddi4+0x9c>
 8000f10:	f1c1 0620 	rsb	r6, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f20:	fa04 f301 	lsl.w	r3, r4, r1
 8000f24:	ea43 030c 	orr.w	r3, r3, ip
 8000f28:	40f4      	lsrs	r4, r6
 8000f2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f2e:	0c38      	lsrs	r0, r7, #16
 8000f30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f34:	fbb4 fef0 	udiv	lr, r4, r0
 8000f38:	fa1f fc87 	uxth.w	ip, r7
 8000f3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000f40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f44:	fb0e f90c 	mul.w	r9, lr, ip
 8000f48:	45a1      	cmp	r9, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d90a      	bls.n	8000f66 <__udivmoddi4+0x1a6>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f56:	f080 8084 	bcs.w	8001062 <__udivmoddi4+0x2a2>
 8000f5a:	45a1      	cmp	r9, r4
 8000f5c:	f240 8081 	bls.w	8001062 <__udivmoddi4+0x2a2>
 8000f60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	eba4 0409 	sub.w	r4, r4, r9
 8000f6a:	fa1f f983 	uxth.w	r9, r3
 8000f6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f72:	fb00 4413 	mls	r4, r0, r3, r4
 8000f76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f7e:	45a4      	cmp	ip, r4
 8000f80:	d907      	bls.n	8000f92 <__udivmoddi4+0x1d2>
 8000f82:	193c      	adds	r4, r7, r4
 8000f84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f88:	d267      	bcs.n	800105a <__udivmoddi4+0x29a>
 8000f8a:	45a4      	cmp	ip, r4
 8000f8c:	d965      	bls.n	800105a <__udivmoddi4+0x29a>
 8000f8e:	3b02      	subs	r3, #2
 8000f90:	443c      	add	r4, r7
 8000f92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f96:	fba0 9302 	umull	r9, r3, r0, r2
 8000f9a:	eba4 040c 	sub.w	r4, r4, ip
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	46ce      	mov	lr, r9
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	d351      	bcc.n	800104a <__udivmoddi4+0x28a>
 8000fa6:	d04e      	beq.n	8001046 <__udivmoddi4+0x286>
 8000fa8:	b155      	cbz	r5, 8000fc0 <__udivmoddi4+0x200>
 8000faa:	ebb8 030e 	subs.w	r3, r8, lr
 8000fae:	eb64 040c 	sbc.w	r4, r4, ip
 8000fb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fb6:	40cb      	lsrs	r3, r1
 8000fb8:	431e      	orrs	r6, r3
 8000fba:	40cc      	lsrs	r4, r1
 8000fbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	e750      	b.n	8000e66 <__udivmoddi4+0xa6>
 8000fc4:	f1c2 0320 	rsb	r3, r2, #32
 8000fc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000fd4:	4094      	lsls	r4, r2
 8000fd6:	430c      	orrs	r4, r1
 8000fd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fdc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe0:	fa1f f78c 	uxth.w	r7, ip
 8000fe4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fe8:	fb08 3110 	mls	r1, r8, r0, r3
 8000fec:	0c23      	lsrs	r3, r4, #16
 8000fee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff2:	fb00 f107 	mul.w	r1, r0, r7
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d908      	bls.n	800100c <__udivmoddi4+0x24c>
 8000ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffe:	f100 36ff 	add.w	r6, r0, #4294967295
 8001002:	d22c      	bcs.n	800105e <__udivmoddi4+0x29e>
 8001004:	4299      	cmp	r1, r3
 8001006:	d92a      	bls.n	800105e <__udivmoddi4+0x29e>
 8001008:	3802      	subs	r0, #2
 800100a:	4463      	add	r3, ip
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	b2a4      	uxth	r4, r4
 8001010:	fbb3 f1f8 	udiv	r1, r3, r8
 8001014:	fb08 3311 	mls	r3, r8, r1, r3
 8001018:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800101c:	fb01 f307 	mul.w	r3, r1, r7
 8001020:	42a3      	cmp	r3, r4
 8001022:	d908      	bls.n	8001036 <__udivmoddi4+0x276>
 8001024:	eb1c 0404 	adds.w	r4, ip, r4
 8001028:	f101 36ff 	add.w	r6, r1, #4294967295
 800102c:	d213      	bcs.n	8001056 <__udivmoddi4+0x296>
 800102e:	42a3      	cmp	r3, r4
 8001030:	d911      	bls.n	8001056 <__udivmoddi4+0x296>
 8001032:	3902      	subs	r1, #2
 8001034:	4464      	add	r4, ip
 8001036:	1ae4      	subs	r4, r4, r3
 8001038:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800103c:	e739      	b.n	8000eb2 <__udivmoddi4+0xf2>
 800103e:	4604      	mov	r4, r0
 8001040:	e6f0      	b.n	8000e24 <__udivmoddi4+0x64>
 8001042:	4608      	mov	r0, r1
 8001044:	e706      	b.n	8000e54 <__udivmoddi4+0x94>
 8001046:	45c8      	cmp	r8, r9
 8001048:	d2ae      	bcs.n	8000fa8 <__udivmoddi4+0x1e8>
 800104a:	ebb9 0e02 	subs.w	lr, r9, r2
 800104e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001052:	3801      	subs	r0, #1
 8001054:	e7a8      	b.n	8000fa8 <__udivmoddi4+0x1e8>
 8001056:	4631      	mov	r1, r6
 8001058:	e7ed      	b.n	8001036 <__udivmoddi4+0x276>
 800105a:	4603      	mov	r3, r0
 800105c:	e799      	b.n	8000f92 <__udivmoddi4+0x1d2>
 800105e:	4630      	mov	r0, r6
 8001060:	e7d4      	b.n	800100c <__udivmoddi4+0x24c>
 8001062:	46d6      	mov	lr, sl
 8001064:	e77f      	b.n	8000f66 <__udivmoddi4+0x1a6>
 8001066:	4463      	add	r3, ip
 8001068:	3802      	subs	r0, #2
 800106a:	e74d      	b.n	8000f08 <__udivmoddi4+0x148>
 800106c:	4606      	mov	r6, r0
 800106e:	4623      	mov	r3, r4
 8001070:	4608      	mov	r0, r1
 8001072:	e70f      	b.n	8000e94 <__udivmoddi4+0xd4>
 8001074:	3e02      	subs	r6, #2
 8001076:	4463      	add	r3, ip
 8001078:	e730      	b.n	8000edc <__udivmoddi4+0x11c>
 800107a:	bf00      	nop

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <ReadDCBattVoltageFromADC>:
 */
#include "BATTERYInfo.h"


float ReadDCBattVoltageFromADC(uint32_t *Buffer, int size)// VoltageOfSensor can be 3.3 or 5
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	uint32_t readValue=0;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
	float voltage =0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < size; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e00a      	b.n	80010b0 <ReadDCBattVoltageFromADC+0x30>
    {
    	readValue += Buffer[i];
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <ReadDCBattVoltageFromADC+0x1a>
    }
    readValue = readValue / size;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]

	//voltage =(float)readValue/4095*(37.5/7.5*VoltageOfSensor); 37,5 oraz 7.5 to rezystory na płytce PCB
	//voltage =(float)readValue/4095*5*VoltageOfPowerSensor;
	//voltage =(float)readValue/4095*(37.5/7.5*VoltageOfSensor); 37,5 oraz 7.5 to rezystory na płytce PCB
	    voltage =(float)readValue/4095*16.5; //(dla 3.3 volta)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010cc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001118 <ReadDCBattVoltageFromADC+0x98>
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800111c <ReadDCBattVoltageFromADC+0x9c>
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	edc7 7a04 	vstr	s15, [r7, #16]
//	    voltage =(float)readValue/4095*25; //(dla 5.0 volta)
	if(voltage <= 0.9)
 80010e0:	6938      	ldr	r0, [r7, #16]
 80010e2:	f7ff f9dd 	bl	80004a0 <__aeabi_f2d>
 80010e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001110 <ReadDCBattVoltageFromADC+0x90>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fcac 	bl	8000a48 <__aeabi_dcmple>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <ReadDCBattVoltageFromADC+0x7c>
	    	voltage = 0;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
	return voltage;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	ee07 3a90 	vmov	s15, r3

}
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	f3af 8000 	nop.w
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	3feccccc 	.word	0x3feccccc
 8001118:	457ff000 	.word	0x457ff000
 800111c:	41840000 	.word	0x41840000

08001120 <BatteryInformation>:


eBatteryStatus BatteryInformation(float batteryVoltage)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a01 	vstr	s0, [r7, #4]
	float batteryDischarged = 11.0;
 800112a:	4b3f      	ldr	r3, [pc, #252]	@ (8001228 <BatteryInformation+0x108>)
 800112c:	60bb      	str	r3, [r7, #8]
	eBatteryStatus batStatus = NO_BATTERY;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

	if(batteryVoltage < 1)
 8001132:	edd7 7a01 	vldr	s15, [r7, #4]
 8001136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d502      	bpl.n	800114a <BatteryInformation+0x2a>
		batStatus = NO_BATTERY;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e05e      	b.n	8001208 <BatteryInformation+0xe8>
	else if(batteryVoltage <= batteryDischarged)
 800114a:	ed97 7a01 	vldr	s14, [r7, #4]
 800114e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d802      	bhi.n	8001162 <BatteryInformation+0x42>
		batStatus = DISCHARGED_BATTERY;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e052      	b.n	8001208 <BatteryInformation+0xe8>
	else if(batteryVoltage > batteryDischarged && batteryVoltage <= 12.5)
 8001162:	ed97 7a01 	vldr	s14, [r7, #4]
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	dd0b      	ble.n	800118c <BatteryInformation+0x6c>
 8001174:	edd7 7a01 	vldr	s15, [r7, #4]
 8001178:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d802      	bhi.n	800118c <BatteryInformation+0x6c>
		batStatus = OK_BATTERY_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e03d      	b.n	8001208 <BatteryInformation+0xe8>
	else if(batteryVoltage > 12.5 && batteryVoltage <= 12.8)
 800118c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001190:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	dd0d      	ble.n	80011ba <BatteryInformation+0x9a>
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff f97e 	bl	80004a0 <__aeabi_f2d>
 80011a4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001218 <BatteryInformation+0xf8>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fc4d 	bl	8000a48 <__aeabi_dcmple>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <BatteryInformation+0x9a>
		batStatus = OK_BATTERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e026      	b.n	8001208 <BatteryInformation+0xe8>
	else if(batteryVoltage > 13.5)
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eeb2 7a0b 	vmov.f32	s14, #43	@ 0x41580000  13.5
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dd02      	ble.n	80011d2 <BatteryInformation+0xb2>
		batStatus = CHARGING_BATTERY;
 80011cc:	2304      	movs	r3, #4
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e01a      	b.n	8001208 <BatteryInformation+0xe8>
	else if(batteryVoltage >= 14.6)
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff f964 	bl	80004a0 <__aeabi_f2d>
 80011d8:	a311      	add	r3, pc, #68	@ (adr r3, 8001220 <BatteryInformation+0x100>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fc3d 	bl	8000a5c <__aeabi_dcmpge>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <BatteryInformation+0xce>
		batStatus = FULL_BATTERY;
 80011e8:	2305      	movs	r3, #5
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e00c      	b.n	8001208 <BatteryInformation+0xe8>
	else
	{
		if(batteryVoltage > 12.8)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f956 	bl	80004a0 <__aeabi_f2d>
 80011f4:	a308      	add	r3, pc, #32	@ (adr r3, 8001218 <BatteryInformation+0xf8>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fc39 	bl	8000a70 <__aeabi_dcmpgt>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <BatteryInformation+0xe8>
			batStatus = OK_BATTERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	73fb      	strb	r3, [r7, #15]
	}

	return batStatus;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	9999999a 	.word	0x9999999a
 800121c:	40299999 	.word	0x40299999
 8001220:	33333333 	.word	0x33333333
 8001224:	402d3333 	.word	0x402d3333
 8001228:	41300000 	.word	0x41300000

0800122c <Initialize_ZMPT101B>:

ADC_HandleTypeDef* hadc;


void Initialize_ZMPT101B(ADC_HandleTypeDef* _hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    hadc = _hadc;
 8001234:	4a05      	ldr	r2, [pc, #20]	@ (800124c <Initialize_ZMPT101B+0x20>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
    //sensitivity = 0.005; //orginalne
    sensitivity = 0.00268; //orginalne
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <Initialize_ZMPT101B+0x24>)
 800123c:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <Initialize_ZMPT101B+0x28>)
 800123e:	601a      	str	r2, [r3, #0]

}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200000a0 	.word	0x200000a0
 8001250:	2000009c 	.word	0x2000009c
 8001254:	3b2fa2f0 	.word	0x3b2fa2f0

08001258 <calibrateZeroPointWithTolerance>:
// Parametry:
// - Buffer: wskaźnik na bufor danych z DMA
// - size: rozmiar bufora
// - tolerance: próg tolerancji dla zmiany wartości `zero`
void calibrateZeroPointWithTolerance(uint32_t *Buffer, int size, int tolerance)
{
 8001258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800125c:	b08a      	sub	sp, #40	@ 0x28
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
    min = ADC_SCALE;  // Inicjalizacja minimalnej wartości jako maksymalna możliwa wartość ADC
 8001266:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <calibrateZeroPointWithTolerance+0xc4>)
 8001268:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800126c:	601a      	str	r2, [r3, #0]
    max = 0;
 800126e:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <calibrateZeroPointWithTolerance+0xc8>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    uint64_t sum = 0;          // Użycie uint64_t, aby uniknąć przepełnienia przy dużej liczbie próbek
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	e9c7 2308 	strd	r2, r3, [r7, #32]


    // Iteracja przez bufor w celu obliczenia sumy i znalezienia minimalnej wartości
    for (int i = 0; i < size; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	e024      	b.n	80012d0 <calibrateZeroPointWithTolerance+0x78>
    {
        uint32_t value = Buffer[i];
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
        sum += value;  // Dodawanie wartości do sumy
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2200      	movs	r2, #0
 8001296:	461c      	mov	r4, r3
 8001298:	4615      	mov	r5, r2
 800129a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800129e:	eb12 0804 	adds.w	r8, r2, r4
 80012a2:	eb43 0905 	adc.w	r9, r3, r5
 80012a6:	e9c7 8908 	strd	r8, r9, [r7, #32]

        // Znajdowanie minimalnej wartości
        if (value < min)
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <calibrateZeroPointWithTolerance+0xc4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d202      	bcs.n	80012ba <calibrateZeroPointWithTolerance+0x62>
        {
            min = value;
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <calibrateZeroPointWithTolerance+0xc4>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	6013      	str	r3, [r2, #0]
        }
        if (value > max)
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <calibrateZeroPointWithTolerance+0xc8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d902      	bls.n	80012ca <calibrateZeroPointWithTolerance+0x72>
        {
        	max = value;
 80012c4:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <calibrateZeroPointWithTolerance+0xc8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < size; i++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbd6      	blt.n	8001286 <calibrateZeroPointWithTolerance+0x2e>
        }
    }

    // Obliczenie średniej wartości
    uint32_t average = sum / size;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	17da      	asrs	r2, r3, #31
 80012dc:	469a      	mov	sl, r3
 80012de:	4693      	mov	fp, r2
 80012e0:	4652      	mov	r2, sl
 80012e2:	465b      	mov	r3, fp
 80012e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012e8:	f7ff fd52 	bl	8000d90 <__aeabi_uldivmod>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4613      	mov	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    // Wprowadzenie tolerancji, aby zredukować wpływ gwałtownych zmian na zero
    if (abs((int32_t)(zero - average)) > tolerance)
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <calibrateZeroPointWithTolerance+0xcc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bfb8      	it	lt
 8001302:	425b      	neglt	r3, r3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	da02      	bge.n	8001310 <calibrateZeroPointWithTolerance+0xb8>
    {
    	zero = average;
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <calibrateZeroPointWithTolerance+0xcc>)
 800130e:	6013      	str	r3, [r2, #0]
    }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	20000098 	.word	0x20000098
 8001324:	20000000 	.word	0x20000000

08001328 <getVoltageACFromDMABuff>:
//	return Vrms;
//}

// Zoptymalizowana funkcja
float getVoltageACFromDMABuff(uint32_t *Buffer, int size, bool adjSensivity)
{
 8001328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800132c:	b08e      	sub	sp, #56	@ 0x38
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	4613      	mov	r3, r2
 8001336:	71fb      	strb	r3, [r7, #7]
    uint64_t Vsum = 0;     // Suma kwadratów
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int32_t Vnow;          // Aktualna wartość pomiaru przesunięta względem zera
    uint32_t *ptr = Buffer;  // Wskaźnik na początek bufora
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t *end = Buffer + size;  // Wskaźnik na koniec bufora
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    int countWithinZero = 0; // Licznik próbek w granicach punktu zero
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
	int tolerance = 400; //
 8001356:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800135a:	623b      	str	r3, [r7, #32]

	// Wyliczenie progu 80% dla wcześniejszego zakończenia pętli
	int thresholdWithinZero = size * 0.8;  // Próg dla zakończenia, jeśli 80% próbek mieści się w granicach zero
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff f88d 	bl	800047c <__aeabi_i2d>
 8001362:	a362      	add	r3, pc, #392	@ (adr r3, 80014ec <getVoltageACFromDMABuff+0x1c4>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f8f2 	bl	8000550 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fb86 	bl	8000a84 <__aeabi_d2iz>
 8001378:	4603      	mov	r3, r0
 800137a:	61fb      	str	r3, [r7, #28]

    // Iteracja przez bufor za pomocą wskaźników
    while (ptr < end) {
 800137c:	e031      	b.n	80013e2 <getVoltageACFromDMABuff+0xba>
        Vnow = (int32_t)(*ptr++) - zero;  // Odczyt wartości i przesunięcie wskaźnika
 800137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001380:	1d1a      	adds	r2, r3, #4
 8001382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b51      	ldr	r3, [pc, #324]	@ (80014d0 <getVoltageACFromDMABuff+0x1a8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
        Vsum += (uint32_t)(Vnow * Vnow);  // Sumowanie kwadratów
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fb03 f303 	mul.w	r3, r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2300      	movs	r3, #0
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013a2:	eb12 0804 	adds.w	r8, r2, r4
 80013a6:	eb43 0905 	adc.w	r9, r3, r5
 80013aa:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30

        // Sprawdzanie, czy wartość mieści się w granicach tolerancji
		if (abs(Vnow) < tolerance)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bfb8      	it	lt
 80013b4:	425b      	neglt	r3, r3
 80013b6:	6a3a      	ldr	r2, [r7, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dd02      	ble.n	80013c2 <getVoltageACFromDMABuff+0x9a>
		{
			countWithinZero++; // Zliczanie próbek w okolicy zero
 80013bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013be:	3301      	adds	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
	    // Sprawdzanie, czy przekroczono próg 80%
	    if (countWithinZero >= thresholdWithinZero || (zero - min) < 400)
 80013c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	da08      	bge.n	80013dc <getVoltageACFromDMABuff+0xb4>
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <getVoltageACFromDMABuff+0x1a8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <getVoltageACFromDMABuff+0x1ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80013da:	d202      	bcs.n	80013e2 <getVoltageACFromDMABuff+0xba>
	    {
	        return 0.0;  // Zwracaj 0V, jeśli 80% próbek jest blisko zerowego punktu
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e067      	b.n	80014b2 <getVoltageACFromDMABuff+0x18a>
    while (ptr < end) {
 80013e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3c9      	bcc.n	800137e <getVoltageACFromDMABuff+0x56>
    }


    // Obliczanie wartości skutecznej (Vrms)
	//float Vrms = sqrtf((float)Vsum / size) / ADC_SCALE * Vref / sensitivity;
    float Vrms = sqrtf((float)Vsum / size) / max * Vref / sensitivity;
 80013ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013ee:	f7ff fc89 	bl	8000d04 <__aeabi_ul2f>
 80013f2:	ee06 0a90 	vmov	s13, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001404:	eeb0 0a47 	vmov.f32	s0, s14
 8001408:	f003 fc36 	bl	8004c78 <sqrtf>
 800140c:	eef0 6a40 	vmov.f32	s13, s0
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <getVoltageACFromDMABuff+0x1b0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <getVoltageACFromDMABuff+0x1b4>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee67 6a27 	vmul.f32	s13, s14, s15
 800142a:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <getVoltageACFromDMABuff+0x1b8>)
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001434:	edc7 7a06 	vstr	s15, [r7, #24]


    // test only - dostrojenie sensivity
    if(adjSensivity== true)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d038      	beq.n	80014b0 <getVoltageACFromDMABuff+0x188>
    {
		 if(Vrms < 236)
 800143e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001442:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80014e4 <getVoltageACFromDMABuff+0x1bc>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d513      	bpl.n	8001478 <getVoltageACFromDMABuff+0x150>
			sensitivity -= 0.00001;
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <getVoltageACFromDMABuff+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f823 	bl	80004a0 <__aeabi_f2d>
 800145a:	a31b      	add	r3, pc, #108	@ (adr r3, 80014c8 <getVoltageACFromDMABuff+0x1a0>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7fe febe 	bl	80001e0 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb32 	bl	8000ad4 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <getVoltageACFromDMABuff+0x1b8>)
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01b      	b.n	80014b0 <getVoltageACFromDMABuff+0x188>
		else if(Vrms > 237)
 8001478:	edd7 7a06 	vldr	s15, [r7, #24]
 800147c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80014e8 <getVoltageACFromDMABuff+0x1c0>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	dd12      	ble.n	80014b0 <getVoltageACFromDMABuff+0x188>
			sensitivity += 0.00001;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <getVoltageACFromDMABuff+0x1b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f806 	bl	80004a0 <__aeabi_f2d>
 8001494:	a30c      	add	r3, pc, #48	@ (adr r3, 80014c8 <getVoltageACFromDMABuff+0x1a0>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7fe fea3 	bl	80001e4 <__adddf3>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fb15 	bl	8000ad4 <__aeabi_d2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <getVoltageACFromDMABuff+0x1b8>)
 80014ae:	6013      	str	r3, [r2, #0]
    }

    return Vrms;
 80014b0:	69bb      	ldr	r3, [r7, #24]
}
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	3738      	adds	r7, #56	@ 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	88e368f1 	.word	0x88e368f1
 80014cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000098 	.word	0x20000098
 80014dc:	20000008 	.word	0x20000008
 80014e0:	2000009c 	.word	0x2000009c
 80014e4:	436c0000 	.word	0x436c0000
 80014e8:	436d0000 	.word	0x436d0000
 80014ec:	9999999a 	.word	0x9999999a
 80014f0:	3fe99999 	.word	0x3fe99999

080014f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001508:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <MX_ADC1_Init+0xc0>)
 800150a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800150c:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800150e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001514:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800151a:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800151c:	2201      	movs	r2, #1
 800151e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001520:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001522:	2200      	movs	r2, #0
 8001524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001538:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001546:	2202      	movs	r2, #2
 8001548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 8001554:	2201      	movs	r2, #1
 8001556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001558:	4815      	ldr	r0, [pc, #84]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800155a:	f000 ff8f 	bl	800247c <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001564:	f000 fc88 	bl	8001e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001570:	2306      	movs	r3, #6
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800157a:	f001 f921 	bl	80027c0 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001584:	f000 fc78 	bl	8001e78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001588:	2301      	movs	r3, #1
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800158c:	2302      	movs	r3, #2
 800158e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001590:	2303      	movs	r3, #3
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_ADC1_Init+0xbc>)
 800159a:	f001 f911 	bl	80027c0 <HAL_ADC_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80015a4:	f000 fc68 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000a4 	.word	0x200000a4
 80015b4:	40012000 	.word	0x40012000

080015b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001690 <HAL_ADC_MspInit+0xd8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d156      	bne.n	8001688 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001612:	2303      	movs	r3, #3
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	481c      	ldr	r0, [pc, #112]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 8001626:	f002 f86d 	bl	8003704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 800162c:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 800164c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001654:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 800166e:	f001 fc69 	bl	8002f44 <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001678:	f000 fbfe 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40012000 	.word	0x40012000
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	200000ec 	.word	0x200000ec
 80016a0:	40026410 	.word	0x40026410

080016a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_DMA_Init+0x3c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a0b      	ldr	r2, [pc, #44]	@ (80016e0 <MX_DMA_Init+0x3c>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_DMA_Init+0x3c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2038      	movs	r0, #56	@ 0x38
 80016cc:	f001 fc03 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016d0:	2038      	movs	r0, #56	@ 0x38
 80016d2:	f001 fc1c 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <MX_GPIO_Init+0xc8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <MX_GPIO_Init+0xc8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <MX_GPIO_Init+0xc8>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_GPIO_Init+0xc8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Pill_GPIO_Port, LED_Pill_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <MX_GPIO_Init+0xcc>)
 8001756:	f002 f971 	bl	8003a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay1_UPS_Pin|Relay2_BATT_Pin|Relay3_LineN_Pin|Relay4_LineL_Pin, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8001760:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <MX_GPIO_Init+0xd0>)
 8001762:	f002 f96b 	bl	8003a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pill_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Pill_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MX_GPIO_Init+0xcc>)
 8001780:	f001 ffc0 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Relay1_UPS_Pin|Relay2_BATT_Pin|Relay3_LineN_Pin|Relay4_LineL_Pin;
 8001784:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800178a:	2311      	movs	r3, #17
 800178c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_GPIO_Init+0xd0>)
 800179e:	f001 ffb1 	bl	8003704 <HAL_GPIO_Init>

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020000 	.word	0x40020000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f000 fdec 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 fac2 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f7ff ff8e 	bl	80016e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c8:	f7ff ff6c 	bl	80016a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80017cc:	f7ff fe92 	bl	80014f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017d0:	f000 fbd6 	bl	8001f80 <MX_TIM2_Init>
  MX_TIM10_Init();
 80017d4:	f000 fc20 	bl	8002018 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 80017d8:	2202      	movs	r2, #2
 80017da:	49a0      	ldr	r1, [pc, #640]	@ (8001a5c <main+0x2a4>)
 80017dc:	48a0      	ldr	r0, [pc, #640]	@ (8001a60 <main+0x2a8>)
 80017de:	f000 fe91 	bl	8002504 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80017e2:	48a0      	ldr	r0, [pc, #640]	@ (8001a64 <main+0x2ac>)
 80017e4:	f002 fdd2 	bl	800438c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 80017e8:	489f      	ldr	r0, [pc, #636]	@ (8001a68 <main+0x2b0>)
 80017ea:	f002 fe29 	bl	8004440 <HAL_TIM_Base_Start_IT>

  DelayInit();
 80017ee:	f000 fd57 	bl	80022a0 <DelayInit>

  relayUpsStatus = ReadStatusRelay1_UPS();
 80017f2:	f000 fc7d 	bl	80020f0 <ReadStatusRelay1_UPS>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a6c <main+0x2b4>)
 80017fa:	6013      	str	r3, [r2, #0]
  relayBatteryCharging = ReadStatusRelay2_BATTERY_CHARGE();
 80017fc:	f000 fc94 	bl	8002128 <ReadStatusRelay2_BATTERY_CHARGE>
 8001800:	4603      	mov	r3, r0
 8001802:	4a9b      	ldr	r2, [pc, #620]	@ (8001a70 <main+0x2b8>)
 8001804:	6013      	str	r3, [r2, #0]
  relayLineNStatus = ReadStatusRelay3_LineN();
 8001806:	f000 fcab 	bl	8002160 <ReadStatusRelay3_LineN>
 800180a:	4603      	mov	r3, r0
 800180c:	4a99      	ldr	r2, [pc, #612]	@ (8001a74 <main+0x2bc>)
 800180e:	6013      	str	r3, [r2, #0]
  relayLineLStatus = ReadStatusRelay4_LineL();
 8001810:	f000 fcc2 	bl	8002198 <ReadStatusRelay4_LineL>
 8001814:	4603      	mov	r3, r0
 8001816:	4a98      	ldr	r2, [pc, #608]	@ (8001a78 <main+0x2c0>)
 8001818:	6013      	str	r3, [r2, #0]

  Initialize_ZMPT101B(&hadc1);
 800181a:	4891      	ldr	r0, [pc, #580]	@ (8001a60 <main+0x2a8>)
 800181c:	f7ff fd06 	bl	800122c <Initialize_ZMPT101B>


  //BatteryCharging = true;
  SetRelay1_UPS(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 fcd5 	bl	80021d0 <SetRelay1_UPS>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DelayUS(5000000);
 8001826:	4895      	ldr	r0, [pc, #596]	@ (8001a7c <main+0x2c4>)
 8001828:	f000 fd64 	bl	80022f4 <DelayUS>
  while (1)
  {
	 if(adc_ready == true)
 800182c:	4b94      	ldr	r3, [pc, #592]	@ (8001a80 <main+0x2c8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d044      	beq.n	80018c0 <main+0x108>
	 {

		 // odczyt z ADC jakim napieciem dysponuje nasz Akumulator
		if(Buffer_DC_TableCount < Channel0_BUF_SIZE && DMA_DC_Was_Filled == false)
 8001836:	4b93      	ldr	r3, [pc, #588]	@ (8001a84 <main+0x2cc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b63      	cmp	r3, #99	@ 0x63
 800183c:	dc13      	bgt.n	8001866 <main+0xae>
 800183e:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <main+0x2d0>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f083 0301 	eor.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00c      	beq.n	8001866 <main+0xae>
		{
			ADC_DC_BATTERY_TABLE[Buffer_DC_TableCount] = adc_buffer[0];
 800184c:	4b8d      	ldr	r3, [pc, #564]	@ (8001a84 <main+0x2cc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a82      	ldr	r2, [pc, #520]	@ (8001a5c <main+0x2a4>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	498d      	ldr	r1, [pc, #564]	@ (8001a8c <main+0x2d4>)
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Buffer_DC_TableCount++;
 800185a:	4b8a      	ldr	r3, [pc, #552]	@ (8001a84 <main+0x2cc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a88      	ldr	r2, [pc, #544]	@ (8001a84 <main+0x2cc>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e005      	b.n	8001872 <main+0xba>
		}
		else
		{
			DMA_DC_Was_Filled = true;
 8001866:	4b88      	ldr	r3, [pc, #544]	@ (8001a88 <main+0x2d0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
			Buffer_DC_TableCount = 0;
 800186c:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <main+0x2cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
		}

		// odczyt z ADC jakie jest napiecie w sieci
		if(Buffer_AC_TableCount < Channel1_BUF_SIZE && DMA_AC_Was_Filled == false)
 8001872:	4b87      	ldr	r3, [pc, #540]	@ (8001a90 <main+0x2d8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800187a:	da13      	bge.n	80018a4 <main+0xec>
 800187c:	4b85      	ldr	r3, [pc, #532]	@ (8001a94 <main+0x2dc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00c      	beq.n	80018a4 <main+0xec>
		{
			ADC_AC_POWER_TABLE[Buffer_AC_TableCount] = adc_buffer[1];
 800188a:	4b81      	ldr	r3, [pc, #516]	@ (8001a90 <main+0x2d8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a73      	ldr	r2, [pc, #460]	@ (8001a5c <main+0x2a4>)
 8001890:	6852      	ldr	r2, [r2, #4]
 8001892:	4981      	ldr	r1, [pc, #516]	@ (8001a98 <main+0x2e0>)
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Buffer_AC_TableCount++;
 8001898:	4b7d      	ldr	r3, [pc, #500]	@ (8001a90 <main+0x2d8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a90 <main+0x2d8>)
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e005      	b.n	80018b0 <main+0xf8>
		}
		else
		{
			DMA_AC_Was_Filled = true;
 80018a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <main+0x2dc>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			Buffer_AC_TableCount = 0;
 80018aa:	4b79      	ldr	r3, [pc, #484]	@ (8001a90 <main+0x2d8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
			//calibrateLowNoisePointFromDMA(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE); jak jest uruchomione bardzo skacze wynik
		}

		adc_ready = false;
 80018b0:	4b73      	ldr	r3, [pc, #460]	@ (8001a80 <main+0x2c8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUF_SIZE);
 80018b6:	2202      	movs	r2, #2
 80018b8:	4968      	ldr	r1, [pc, #416]	@ (8001a5c <main+0x2a4>)
 80018ba:	4869      	ldr	r0, [pc, #420]	@ (8001a60 <main+0x2a8>)
 80018bc:	f000 fe22 	bl	8002504 <HAL_ADC_Start_DMA>

	 }

	 if(DMA_AC_Was_Filled)
 80018c0:	4b74      	ldr	r3, [pc, #464]	@ (8001a94 <main+0x2dc>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0b1      	beq.n	800182c <main+0x74>
	 {

		 DMA_AC_Was_Filled = false;
 80018c8:	4b72      	ldr	r3, [pc, #456]	@ (8001a94 <main+0x2dc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		 relayUpsStatus = ReadStatusRelay1_UPS();
 80018ce:	f000 fc0f 	bl	80020f0 <ReadStatusRelay1_UPS>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a65      	ldr	r2, [pc, #404]	@ (8001a6c <main+0x2b4>)
 80018d6:	6013      	str	r3, [r2, #0]
		 relayLineNStatus = ReadStatusRelay3_LineN();
 80018d8:	f000 fc42 	bl	8002160 <ReadStatusRelay3_LineN>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a65      	ldr	r2, [pc, #404]	@ (8001a74 <main+0x2bc>)
 80018e0:	6013      	str	r3, [r2, #0]
		 relayLineLStatus = ReadStatusRelay4_LineL();
 80018e2:	f000 fc59 	bl	8002198 <ReadStatusRelay4_LineL>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a63      	ldr	r2, [pc, #396]	@ (8001a78 <main+0x2c0>)
 80018ea:	6013      	str	r3, [r2, #0]
		 //calibrateAverageZeroPointFromDMA(ADC_AC_POWER_TABLE, 200, 50);
		 //calibrateLowNoisePointFromDMA(ADC_AC_POWER_TABLE, 400);
		 //VoltageAC = getVoltageACFromDMABuff(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE);


		 calibrateZeroPointWithTolerance(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE,50);
 80018ec:	2232      	movs	r2, #50	@ 0x32
 80018ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80018f2:	4869      	ldr	r0, [pc, #420]	@ (8001a98 <main+0x2e0>)
 80018f4:	f7ff fcb0 	bl	8001258 <calibrateZeroPointWithTolerance>
		 VoltageAC = getVoltageACFromDMABuff(ADC_AC_POWER_TABLE, Channel1_BUF_SIZE, DMA_AC_AdjustSensivity);
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <main+0x2e4>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001904:	4864      	ldr	r0, [pc, #400]	@ (8001a98 <main+0x2e0>)
 8001906:	f7ff fd0f 	bl	8001328 <getVoltageACFromDMABuff>
 800190a:	eef0 7a40 	vmov.f32	s15, s0
 800190e:	4b64      	ldr	r3, [pc, #400]	@ (8001aa0 <main+0x2e8>)
 8001910:	edc3 7a00 	vstr	s15, [r3]

		 if(VoltageAC <= VoltageDrop && WorkingOnBattery == false && BatteryStatus >= OK_BATTERY_LOW && WasDischarded == false)
 8001914:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <main+0x2ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001920:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa0 <main+0x2e8>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	db54      	blt.n	80019da <main+0x222>
 8001930:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa8 <main+0x2f0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04d      	beq.n	80019da <main+0x222>
 800193e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <main+0x2f4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d949      	bls.n	80019da <main+0x222>
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <main+0x2f8>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d042      	beq.n	80019da <main+0x222>
		 {
			 relayUpsStatus = ReadStatusRelay1_UPS();
 8001954:	f000 fbcc 	bl	80020f0 <ReadStatusRelay1_UPS>
 8001958:	4603      	mov	r3, r0
 800195a:	4a44      	ldr	r2, [pc, #272]	@ (8001a6c <main+0x2b4>)
 800195c:	6013      	str	r3, [r2, #0]
			 if(relayUpsStatus == 0)
 800195e:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <main+0x2b4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11b      	bne.n	800199e <main+0x1e6>
			 {
				 SetRelay1_UPS(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 fc32 	bl	80021d0 <SetRelay1_UPS>
				 if(relayLineNStatus == 0 && relayLineLStatus == 0)
 800196c:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <main+0x2bc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 80ca 	bne.w	8001b0a <main+0x352>
 8001976:	4b40      	ldr	r3, [pc, #256]	@ (8001a78 <main+0x2c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 80c5 	bne.w	8001b0a <main+0x352>
				 {
					 SetRelay4_LineL(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 fc73 	bl	800226c <SetRelay4_LineL>
					 SetRelay3_LineN(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fc56 	bl	8002238 <SetRelay3_LineN>
					 WorkingOnBattery = true;
 800198c:	4b46      	ldr	r3, [pc, #280]	@ (8001aa8 <main+0x2f0>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
					 DelayUS(WaitMS);
 8001992:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <main+0x2fc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fcac 	bl	80022f4 <DelayUS>
			 if(relayUpsStatus == 0)
 800199c:	e0b5      	b.n	8001b0a <main+0x352>
				 else
				 {
					 // something is wrong beep or do something ?!
				 }
			 }
			 else if (relayUpsStatus == 1)
 800199e:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <main+0x2b4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80b1 	bne.w	8001b0a <main+0x352>
			 {
				 if(relayLineNStatus == 0 && relayLineLStatus == 0)
 80019a8:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <main+0x2bc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 80ac 	bne.w	8001b0a <main+0x352>
 80019b2:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <main+0x2c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80a7 	bne.w	8001b0a <main+0x352>
				 {
					 SetRelay4_LineL(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f000 fc55 	bl	800226c <SetRelay4_LineL>
					 SetRelay3_LineN(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 fc38 	bl	8002238 <SetRelay3_LineN>
					 WorkingOnBattery = true;
 80019c8:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <main+0x2f0>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
					 DelayUS(WaitMS);
 80019ce:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <main+0x2fc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fc8e 	bl	80022f4 <DelayUS>
			 if(relayUpsStatus == 0)
 80019d8:	e097      	b.n	8001b0a <main+0x352>
					 // something is wrong beep or do something ?!
				 }
			 }

		 }
		 else if(VoltageAC <= VoltageDrop && WorkingOnBattery == true && BatteryStatus > NO_BATTERY && BatteryStatus <= DISCHARGED_BATTERY)
 80019da:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <main+0x2ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <main+0x2e8>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	db18      	blt.n	8001a28 <main+0x270>
 80019f6:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <main+0x2f0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d014      	beq.n	8001a28 <main+0x270>
 80019fe:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <main+0x2f4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <main+0x270>
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <main+0x2f4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d80c      	bhi.n	8001a28 <main+0x270>
		 {
			 SetRelay1_UPS(0);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 fbde 	bl	80021d0 <SetRelay1_UPS>
			 SetRelay4_LineL(0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 fc29 	bl	800226c <SetRelay4_LineL>
			 SetRelay3_LineN(0);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 fc0c 	bl	8002238 <SetRelay3_LineN>
//			 WorkingOnBattery = false;
			 WasDischarded = true;
 8001a20:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <main+0x2f8>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e071      	b.n	8001b0c <main+0x354>
			 //DelayUS(WaitMS);
		 }
		 else if(VoltageAC > VoltageDrop && WorkingOnBattery == true)
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <main+0x2ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <main+0x2e8>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d539      	bpl.n	8001ab8 <main+0x300>
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <main+0x2f0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d035      	beq.n	8001ab8 <main+0x300>
		 {

			 SetRelay4_LineL(0);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fc0d 	bl	800226c <SetRelay4_LineL>
			 //SetRelay1_UPS(0); // przetwornica najlepiej zeby chodzila ciągle
			 SetRelay3_LineN(0);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 fbf0 	bl	8002238 <SetRelay3_LineN>
 8001a58:	e058      	b.n	8001b0c <main+0x354>
 8001a5a:	bf00      	nop
 8001a5c:	20000954 	.word	0x20000954
 8001a60:	200000a4 	.word	0x200000a4
 8001a64:	2000095c 	.word	0x2000095c
 8001a68:	200009a4 	.word	0x200009a4
 8001a6c:	20000150 	.word	0x20000150
 8001a70:	20000154 	.word	0x20000154
 8001a74:	20000158 	.word	0x20000158
 8001a78:	2000015c 	.word	0x2000015c
 8001a7c:	004c4b40 	.word	0x004c4b40
 8001a80:	2000014d 	.word	0x2000014d
 8001a84:	20000160 	.word	0x20000160
 8001a88:	20000168 	.word	0x20000168
 8001a8c:	20000184 	.word	0x20000184
 8001a90:	20000164 	.word	0x20000164
 8001a94:	20000169 	.word	0x20000169
 8001a98:	20000314 	.word	0x20000314
 8001a9c:	2000014e 	.word	0x2000014e
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	20000018 	.word	0x20000018
 8001aa8:	20000180 	.word	0x20000180
 8001aac:	20000170 	.word	0x20000170
 8001ab0:	20000181 	.word	0x20000181
 8001ab4:	2000001c 	.word	0x2000001c
			 //WorkingOnBattery = false;
			 //DelayUS(WaitMS);
		 }
		 else if(VoltageAC > VoltageDrop && WorkingOnBattery == false && WasDischarded == false)
 8001ab8:	4b93      	ldr	r3, [pc, #588]	@ (8001d08 <main+0x550>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac4:	4b91      	ldr	r3, [pc, #580]	@ (8001d0c <main+0x554>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d51b      	bpl.n	8001b0c <main+0x354>
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d10 <main+0x558>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f083 0301 	eor.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d014      	beq.n	8001b0c <main+0x354>
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	@ (8001d14 <main+0x55c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	f083 0301 	eor.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <main+0x354>
		 {
			 relayUpsStatus = ReadStatusRelay1_UPS();
 8001af0:	f000 fafe 	bl	80020f0 <ReadStatusRelay1_UPS>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a88      	ldr	r2, [pc, #544]	@ (8001d18 <main+0x560>)
 8001af8:	6013      	str	r3, [r2, #0]
			 if(relayUpsStatus == 0)
 8001afa:	4b87      	ldr	r3, [pc, #540]	@ (8001d18 <main+0x560>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <main+0x354>
			 {
				 SetRelay1_UPS(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f000 fb64 	bl	80021d0 <SetRelay1_UPS>
 8001b08:	e000      	b.n	8001b0c <main+0x354>
			 if(relayUpsStatus == 0)
 8001b0a:	bf00      	nop
			 }
		 }


		 if(DMA_DC_Was_Filled && calculateBattVoltage)
 8001b0c:	4b83      	ldr	r3, [pc, #524]	@ (8001d1c <main+0x564>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f43f ae8b 	beq.w	800182c <main+0x74>
 8001b16:	4b82      	ldr	r3, [pc, #520]	@ (8001d20 <main+0x568>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f43f ae85 	beq.w	800182c <main+0x74>
		 {
			 // wylicz ile akumulator ma Volt odpalany co 1 sek
			 VoltageDCBattery = ReadDCBattVoltageFromADC(ADC_DC_BATTERY_TABLE, Channel0_BUF_SIZE);
 8001b22:	2164      	movs	r1, #100	@ 0x64
 8001b24:	487f      	ldr	r0, [pc, #508]	@ (8001d24 <main+0x56c>)
 8001b26:	f7ff faab 	bl	8001080 <ReadDCBattVoltageFromADC>
 8001b2a:	eef0 7a40 	vmov.f32	s15, s0
 8001b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d28 <main+0x570>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
			 //VoltageDCBattery = 14.2;
			 BatteryStatus = BatteryInformation(VoltageDCBattery);
 8001b34:	4b7c      	ldr	r3, [pc, #496]	@ (8001d28 <main+0x570>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff faef 	bl	8001120 <BatteryInformation>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b79      	ldr	r3, [pc, #484]	@ (8001d2c <main+0x574>)
 8001b48:	701a      	strb	r2, [r3, #0]
			 DMA_DC_Was_Filled = false;
 8001b4a:	4b74      	ldr	r3, [pc, #464]	@ (8001d1c <main+0x564>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
			 calculateBattVoltage = false;
 8001b50:	4b73      	ldr	r3, [pc, #460]	@ (8001d20 <main+0x568>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
//			 {
//				 BatteryStatus= FULL_BATTERY;
//				 inrementOneSecTim = 0;
//			 }

			 if(VoltageAC > VoltageDrop)
 8001b56:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <main+0x550>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b62:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <main+0x554>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	f140 8088 	bpl.w	8001c84 <main+0x4cc>
			 {
				 if(WorkingOnBattery == true && BatteryCharging == false && BatteryStatus > NO_BATTERY && BatteryStatus <= DISCHARGED_BATTERY )
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <main+0x558>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d028      	beq.n	8001bce <main+0x416>
 8001b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d30 <main+0x578>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d021      	beq.n	8001bce <main+0x416>
 8001b8a:	4b68      	ldr	r3, [pc, #416]	@ (8001d2c <main+0x574>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01d      	beq.n	8001bce <main+0x416>
 8001b92:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <main+0x574>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d819      	bhi.n	8001bce <main+0x416>
			 //if( WorkingOnBattery == false && BatteryCharging == false && BatteryStatus > NO_BATTERY && BatteryStatus <= DISCHARGED_BATTERY ) // Test Only
				 {
					 if(ReadStatusRelay2_BATTERY_CHARGE() == 0)
 8001b9a:	f000 fac5 	bl	8002128 <ReadStatusRelay2_BATTERY_CHARGE>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <main+0x3f2>
						 SetRelay2_BATTERY_CHARGE(1);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 fb2d 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					 BatteryCharging = true;
 8001baa:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <main+0x578>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
					 BatteryStatus = CHARGING_BATTERY;
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <main+0x574>)
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	701a      	strb	r2, [r3, #0]
					 BatteryChargingStartTime = inrementOneSecTim;
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <main+0x57c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5f      	ldr	r2, [pc, #380]	@ (8001d38 <main+0x580>)
 8001bbc:	6013      	str	r3, [r2, #0]
					 BatteryChargingTime = BatteryChargingTimeLONG;
 8001bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001d3c <main+0x584>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d40 <main+0x588>)
 8001bc4:	6013      	str	r3, [r2, #0]
					 WorkingOnBattery = false;
 8001bc6:	4b52      	ldr	r3, [pc, #328]	@ (8001d10 <main+0x558>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e068      	b.n	8001ca0 <main+0x4e8>
				 }
				 else if(WorkingOnBattery == true && BatteryCharging == false && BatteryStatus >= DISCHARGED_BATTERY && BatteryStatus <= OK_BATTERY_LOW)
 8001bce:	4b50      	ldr	r3, [pc, #320]	@ (8001d10 <main+0x558>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d028      	beq.n	8001c28 <main+0x470>
 8001bd6:	4b56      	ldr	r3, [pc, #344]	@ (8001d30 <main+0x578>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d021      	beq.n	8001c28 <main+0x470>
 8001be4:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <main+0x574>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01d      	beq.n	8001c28 <main+0x470>
 8001bec:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <main+0x574>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d819      	bhi.n	8001c28 <main+0x470>
				 {
					 if(ReadStatusRelay2_BATTERY_CHARGE() == 0)
 8001bf4:	f000 fa98 	bl	8002128 <ReadStatusRelay2_BATTERY_CHARGE>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <main+0x44c>
						 SetRelay2_BATTERY_CHARGE(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 fb00 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					 BatteryCharging = true;
 8001c04:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <main+0x578>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
					 BatteryStatus = CHARGING_BATTERY;
 8001c0a:	4b48      	ldr	r3, [pc, #288]	@ (8001d2c <main+0x574>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	701a      	strb	r2, [r3, #0]
					 BatteryChargingStartTime = inrementOneSecTim;
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <main+0x57c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <main+0x580>)
 8001c16:	6013      	str	r3, [r2, #0]
					 BatteryChargingTime = BatteryChargingTimeSHORT;
 8001c18:	4b4a      	ldr	r3, [pc, #296]	@ (8001d44 <main+0x58c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a48      	ldr	r2, [pc, #288]	@ (8001d40 <main+0x588>)
 8001c1e:	6013      	str	r3, [r2, #0]

					 WorkingOnBattery = false;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <main+0x558>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e03b      	b.n	8001ca0 <main+0x4e8>
				 }
				 else if(BatteryStatus > DISCHARGED_BATTERY && BatteryStatus <= OK_BATTERY_LOW)
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <main+0x574>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d91d      	bls.n	8001c6c <main+0x4b4>
 8001c30:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <main+0x574>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d819      	bhi.n	8001c6c <main+0x4b4>
				 {
					 if(ReadStatusRelay2_BATTERY_CHARGE() == 0)
 8001c38:	f000 fa76 	bl	8002128 <ReadStatusRelay2_BATTERY_CHARGE>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <main+0x490>
						 SetRelay2_BATTERY_CHARGE(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 fade 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					 BatteryCharging = true;
 8001c48:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <main+0x578>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
					 BatteryStatus = CHARGING_BATTERY;
 8001c4e:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <main+0x574>)
 8001c50:	2204      	movs	r2, #4
 8001c52:	701a      	strb	r2, [r3, #0]
					 BatteryChargingStartTime = inrementOneSecTim;
 8001c54:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <main+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a37      	ldr	r2, [pc, #220]	@ (8001d38 <main+0x580>)
 8001c5a:	6013      	str	r3, [r2, #0]
					 BatteryChargingTime = BatteryChargingTimeSHORT;
 8001c5c:	4b39      	ldr	r3, [pc, #228]	@ (8001d44 <main+0x58c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a37      	ldr	r2, [pc, #220]	@ (8001d40 <main+0x588>)
 8001c62:	6013      	str	r3, [r2, #0]

					 WorkingOnBattery = false;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <main+0x558>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e019      	b.n	8001ca0 <main+0x4e8>
				 }
				 else if(WorkingOnBattery == true && BatteryStatus > OK_BATTERY_LOW )
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <main+0x558>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d015      	beq.n	8001ca0 <main+0x4e8>
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <main+0x574>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d911      	bls.n	8001ca0 <main+0x4e8>
				 {
					 WorkingOnBattery = false;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <main+0x558>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e00d      	b.n	8001ca0 <main+0x4e8>
				 }
			 }
			 else if(BatteryCharging == true)
 8001c84:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <main+0x578>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <main+0x4e8>
			 {
					BatteryChargingStartTime = inrementOneSecTim;
 8001c8c:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <main+0x57c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a29      	ldr	r2, [pc, #164]	@ (8001d38 <main+0x580>)
 8001c92:	6013      	str	r3, [r2, #0]
					 // Ustaw następny czas startu na bieżący
					SetRelay2_BATTERY_CHARGE(0);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 fab5 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					BatteryCharging = false;
 8001c9a:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <main+0x578>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			 }


			 if(BatteryCharging == true && BatteryStatus == CHARGING_BATTERY)
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <main+0x578>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01a      	beq.n	8001cde <main+0x526>
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <main+0x574>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d116      	bne.n	8001cde <main+0x526>
			 {
				if ((inrementOneSecTim >= (BatteryChargingStartTime + BatteryChargingTime)) )
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <main+0x580>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a22      	ldr	r2, [pc, #136]	@ (8001d40 <main+0x588>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	441a      	add	r2, r3
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <main+0x57c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d809      	bhi.n	8001cd6 <main+0x51e>
				{
					BatteryChargingStartTime = inrementOneSecTim;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <main+0x57c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <main+0x580>)
 8001cc8:	6013      	str	r3, [r2, #0]
					 // Ustaw następny czas startu na bieżący
					SetRelay2_BATTERY_CHARGE(0);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 fa9a 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					BatteryCharging = false;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <main+0x578>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
				}

				WasDischarded = false; // to oznacza ze mozna uzyc ponownie
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <main+0x55c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e013      	b.n	8001d06 <main+0x54e>

			 }
			 else if (BatteryCharging == true && BatteryStatus == FULL_BATTERY)
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <main+0x578>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f43f ada2 	beq.w	800182c <main+0x74>
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <main+0x574>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	f47f ad9d 	bne.w	800182c <main+0x74>
			 {
					BatteryChargingStartTime = inrementOneSecTim;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <main+0x57c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <main+0x580>)
 8001cf8:	6013      	str	r3, [r2, #0]
					 // Ustaw następny czas startu na bieżący
					SetRelay2_BATTERY_CHARGE(0);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 fa82 	bl	8002204 <SetRelay2_BATTERY_CHARGE>
					BatteryCharging = false;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <main+0x578>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	 if(adc_ready == true)
 8001d06:	e591      	b.n	800182c <main+0x74>
 8001d08:	20000018 	.word	0x20000018
 8001d0c:	20000014 	.word	0x20000014
 8001d10:	20000180 	.word	0x20000180
 8001d14:	20000181 	.word	0x20000181
 8001d18:	20000150 	.word	0x20000150
 8001d1c:	20000168 	.word	0x20000168
 8001d20:	2000014c 	.word	0x2000014c
 8001d24:	20000184 	.word	0x20000184
 8001d28:	2000016c 	.word	0x2000016c
 8001d2c:	20000170 	.word	0x20000170
 8001d30:	20000171 	.word	0x20000171
 8001d34:	2000017c 	.word	0x2000017c
 8001d38:	20000174 	.word	0x20000174
 8001d3c:	2000000c 	.word	0x2000000c
 8001d40:	20000178 	.word	0x20000178
 8001d44:	20000010 	.word	0x20000010

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	@ 0x50
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2230      	movs	r2, #48	@ 0x30
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 ff5c 	bl	8004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <SystemClock_Config+0xc8>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <SystemClock_Config+0xc8>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <SystemClock_Config+0xc8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <SystemClock_Config+0xcc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <SystemClock_Config+0xcc>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <SystemClock_Config+0xcc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001db8:	230c      	movs	r3, #12
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001dbc:	2360      	movs	r3, #96	@ 0x60
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fe69 	bl	8003aa4 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dd8:	f000 f84e 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2103      	movs	r1, #3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 f8cb 	bl	8003f94 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e04:	f000 f838 	bl	8001e78 <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	@ 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

	//UNUSED(hadc); // nie wiem czemu tego nie wyremować ??
	HAL_ADC_Stop_DMA(&hadc1); // jesli chcial bym wylaczyc timer
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e22:	f000 fc5f 	bl	80026e4 <HAL_ADC_Stop_DMA>
	adc_ready = true;
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x20>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200000a4 	.word	0x200000a4
 8001e38:	2000014d 	.word	0x2000014d

08001e3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10) // jest odpalany co 1 sek.
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a08      	ldr	r2, [pc, #32]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d109      	bne.n	8001e62 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		ToggleLedOnBlackPill();
 8001e4e:	f000 f943 	bl	80020d8 <ToggleLedOnBlackPill>
		calculateBattVoltage = true;  // Global flag
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
		inrementOneSecTim++;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e60:	6013      	str	r3, [r2, #0]
//		if(DMA_AC_AdjustSensivity == false)
//			DMA_AC_AdjustSensivity = true;
//		else
//			DMA_AC_AdjustSensivity = false;
	}
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	2000014c 	.word	0x2000014c
 8001e74:	2000017c 	.word	0x2000017c

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <Error_Handler+0x8>

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <NMI_Handler+0x4>

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f000 fa87 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f3a:	f002 fae3 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200009a4 	.word	0x200009a4

08001f48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA2_Stream0_IRQHandler+0x10>)
 8001f4e:	f001 f96f 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200000ec 	.word	0x200000ec

08001f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fa6:	2263      	movs	r2, #99	@ 0x63
 8001fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fb2:	22c7      	movs	r2, #199	@ 0xc7
 8001fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc2:	4814      	ldr	r0, [pc, #80]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fc4:	f002 f992 	bl	80042ec <HAL_TIM_Base_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001fce:	f7ff ff53 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001fe0:	f002 fb80 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f7ff ff45 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <MX_TIM2_Init+0x94>)
 8001ffc:	f002 fd88 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002006:	f7ff ff37 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000095c 	.word	0x2000095c

08002018 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_TIM10_Init+0x40>)
 800201e:	4a0f      	ldr	r2, [pc, #60]	@ (800205c <MX_TIM10_Init+0x44>)
 8002020:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <MX_TIM10_Init+0x40>)
 8002024:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002028:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_TIM10_Init+0x40>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_TIM10_Init+0x40>)
 8002032:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002036:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <MX_TIM10_Init+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_TIM10_Init+0x40>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_TIM10_Init+0x40>)
 8002046:	f002 f951 	bl	80042ec <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002050:	f7ff ff12 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200009a4 	.word	0x200009a4
 800205c:	40014400 	.word	0x40014400

08002060 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a15      	ldr	r2, [pc, #84]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800208e:	e01a      	b.n	80020c6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <HAL_TIM_Base_MspInit+0x74>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d115      	bne.n	80020c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_TIM_Base_MspInit+0x70>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2019      	movs	r0, #25
 80020bc:	f000 ff0b 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c0:	2019      	movs	r0, #25
 80020c2:	f000 ff24 	bl	8002f0e <HAL_NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40014400 	.word	0x40014400

080020d8 <ToggleLedOnBlackPill>:
#include "main.h"
//#include "adc.h"
#include "waweroBasicFunction.h"

void ToggleLedOnBlackPill()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  1 jako ON 0 jako OFF

	  HAL_GPIO_TogglePin(LED_Pill_GPIO_Port, LED_Pill_Pin);
 80020dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <ToggleLedOnBlackPill+0x14>)
 80020e2:	f001 fcc4 	bl	8003a6e <HAL_GPIO_TogglePin>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40020800 	.word	0x40020800

080020f0 <ReadStatusRelay1_UPS>:


}

int ReadStatusRelay1_UPS()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin);
 80020f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020fa:	480a      	ldr	r0, [pc, #40]	@ (8002124 <ReadStatusRelay1_UPS+0x34>)
 80020fc:	f001 fc86 	bl	8003a0c <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <ReadStatusRelay1_UPS+0x1e>
	{
		return 1;
 800210a:	2301      	movs	r3, #1
 800210c:	e005      	b.n	800211a <ReadStatusRelay1_UPS+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <ReadStatusRelay1_UPS+0x28>
	{
		return 0;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <ReadStatusRelay1_UPS+0x2a>
	}
	else
		return 0;
 8002118:	2300      	movs	r3, #0

}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020000 	.word	0x40020000

08002128 <ReadStatusRelay2_BATTERY_CHARGE>:

int ReadStatusRelay2_BATTERY_CHARGE()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin);
 800212e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002132:	480a      	ldr	r0, [pc, #40]	@ (800215c <ReadStatusRelay2_BATTERY_CHARGE+0x34>)
 8002134:	f001 fc6a 	bl	8003a0c <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <ReadStatusRelay2_BATTERY_CHARGE+0x1e>
	{
		return 1;
 8002142:	2301      	movs	r3, #1
 8002144:	e005      	b.n	8002152 <ReadStatusRelay2_BATTERY_CHARGE+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <ReadStatusRelay2_BATTERY_CHARGE+0x28>
	{
		return 0;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <ReadStatusRelay2_BATTERY_CHARGE+0x2a>
	}
	else
		return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40020000 	.word	0x40020000

08002160 <ReadStatusRelay3_LineN>:

int ReadStatusRelay3_LineN()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay3_LineN_GPIO_Port, Relay3_LineN_Pin);
 8002166:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800216a:	480a      	ldr	r0, [pc, #40]	@ (8002194 <ReadStatusRelay3_LineN+0x34>)
 800216c:	f001 fc4e 	bl	8003a0c <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <ReadStatusRelay3_LineN+0x1e>
	{
		return 1;
 800217a:	2301      	movs	r3, #1
 800217c:	e005      	b.n	800218a <ReadStatusRelay3_LineN+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <ReadStatusRelay3_LineN+0x28>
	{
		return 0;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <ReadStatusRelay3_LineN+0x2a>
	}
	else
		return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020000 	.word	0x40020000

08002198 <ReadStatusRelay4_LineL>:

int ReadStatusRelay4_LineL()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(Relay4_LineL_GPIO_Port, Relay4_LineL_Pin);
 800219e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021a2:	480a      	ldr	r0, [pc, #40]	@ (80021cc <ReadStatusRelay4_LineL+0x34>)
 80021a4:	f001 fc32 	bl	8003a0c <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	71fb      	strb	r3, [r7, #7]
	if(state == GPIO_PIN_RESET)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <ReadStatusRelay4_LineL+0x1e>
	{
		return 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e005      	b.n	80021c2 <ReadStatusRelay4_LineL+0x2a>
	}
	else if(state == GPIO_PIN_SET)
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <ReadStatusRelay4_LineL+0x28>
	{
		return 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <ReadStatusRelay4_LineL+0x2a>
	}
	else
		return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40020000 	.word	0x40020000

080021d0 <SetRelay1_UPS>:


void SetRelay1_UPS(int value)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	if(value == 1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <SetRelay1_UPS+0x1c>
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021e4:	4806      	ldr	r0, [pc, #24]	@ (8002200 <SetRelay1_UPS+0x30>)
 80021e6:	f001 fc29 	bl	8003a3c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_SET);
}
 80021ea:	e005      	b.n	80021f8 <SetRelay1_UPS+0x28>
		HAL_GPIO_WritePin(Relay1_UPS_GPIO_Port, Relay1_UPS_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021f2:	4803      	ldr	r0, [pc, #12]	@ (8002200 <SetRelay1_UPS+0x30>)
 80021f4:	f001 fc22 	bl	8003a3c <HAL_GPIO_WritePin>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020000 	.word	0x40020000

08002204 <SetRelay2_BATTERY_CHARGE>:

void SetRelay2_BATTERY_CHARGE(int value)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if(value == 1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d106      	bne.n	8002220 <SetRelay2_BATTERY_CHARGE+0x1c>
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002218:	4806      	ldr	r0, [pc, #24]	@ (8002234 <SetRelay2_BATTERY_CHARGE+0x30>)
 800221a:	f001 fc0f 	bl	8003a3c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_SET);
}
 800221e:	e005      	b.n	800222c <SetRelay2_BATTERY_CHARGE+0x28>
		HAL_GPIO_WritePin(Relay2_BATT_GPIO_Port, Relay2_BATT_Pin, GPIO_PIN_SET);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002226:	4803      	ldr	r0, [pc, #12]	@ (8002234 <SetRelay2_BATTERY_CHARGE+0x30>)
 8002228:	f001 fc08 	bl	8003a3c <HAL_GPIO_WritePin>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020000 	.word	0x40020000

08002238 <SetRelay3_LineN>:

void SetRelay3_LineN(int value)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if(value == 1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d106      	bne.n	8002254 <SetRelay3_LineN+0x1c>
		HAL_GPIO_WritePin(Relay3_LineN_GPIO_Port, Relay3_LineN_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <SetRelay3_LineN+0x30>)
 800224e:	f001 fbf5 	bl	8003a3c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay3_LineN_GPIO_Port, Relay3_LineN_Pin, GPIO_PIN_SET);
}
 8002252:	e005      	b.n	8002260 <SetRelay3_LineN+0x28>
		HAL_GPIO_WritePin(Relay3_LineN_GPIO_Port, Relay3_LineN_Pin, GPIO_PIN_SET);
 8002254:	2201      	movs	r2, #1
 8002256:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800225a:	4803      	ldr	r0, [pc, #12]	@ (8002268 <SetRelay3_LineN+0x30>)
 800225c:	f001 fbee 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40020000 	.word	0x40020000

0800226c <SetRelay4_LineL>:

void SetRelay4_LineL(int value)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if(value == 1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <SetRelay4_LineL+0x1c>
		HAL_GPIO_WritePin(Relay4_LineL_GPIO_Port, Relay4_LineL_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002280:	4806      	ldr	r0, [pc, #24]	@ (800229c <SetRelay4_LineL+0x30>)
 8002282:	f001 fbdb 	bl	8003a3c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(Relay4_LineL_GPIO_Port, Relay4_LineL_Pin, GPIO_PIN_SET);
}
 8002286:	e005      	b.n	8002294 <SetRelay4_LineL+0x28>
		HAL_GPIO_WritePin(Relay4_LineL_GPIO_Port, Relay4_LineL_Pin, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800228e:	4803      	ldr	r0, [pc, #12]	@ (800229c <SetRelay4_LineL+0x30>)
 8002290:	f001 fbd4 	bl	8003a3c <HAL_GPIO_WritePin>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40020000 	.word	0x40020000

080022a0 <DelayInit>:
  //ralated to  LoRa ------------------------------------------------- END


//ralated to  delayUS ------------------------------------------------- START
void DelayInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <DelayInit+0x4c>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <DelayInit+0x4c>)
 80022aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <DelayInit+0x4c>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <DelayInit+0x4c>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <DelayInit+0x50>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	@ (80022f0 <DelayInit+0x50>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <DelayInit+0x50>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <DelayInit+0x50>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <DelayInit+0x50>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80022da:	bf00      	nop
  __ASM volatile ("NOP");
 80022dc:	bf00      	nop
  __ASM volatile ("NOP");
 80022de:	bf00      	nop
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000edf0 	.word	0xe000edf0
 80022f0:	e0001000 	.word	0xe0001000

080022f4 <DelayUS>:

void DelayUS(uint32_t us) {
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <DelayUS+0x44>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <DelayUS+0x48>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9a      	lsrs	r2, r3, #18
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <DelayUS+0x4c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <DelayUS+0x4c>)
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f6      	bhi.n	8002316 <DelayUS+0x22>
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000020 	.word	0x20000020
 800233c:	431bde83 	.word	0x431bde83
 8002340:	e0001000 	.word	0xe0001000

08002344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800237c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002348:	f7ff fe08 	bl	8001f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	@ (8002390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002372:	f002 fc5d 	bl	8004c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002376:	f7ff fa1f 	bl	80017b8 <main>
  bx  lr    
 800237a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800237c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002388:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 800238c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002390:	20000b28 	.word	0x20000b28

08002394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_Init+0x40>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <HAL_Init+0x40>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <HAL_Init+0x40>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 fd7d 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c6:	200f      	movs	r0, #15
 80023c8:	f000 f808 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023cc:	f7ff fd5a 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023c00 	.word	0x40023c00

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_InitTick+0x54>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x58>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fd95 	bl	8002f2a <HAL_SYSTICK_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00e      	b.n	8002428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0f      	cmp	r3, #15
 800240e:	d80a      	bhi.n	8002426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002410:	2200      	movs	r2, #0
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f000 fd5d 	bl	8002ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800241c:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <HAL_InitTick+0x5c>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000020 	.word	0x20000020
 8002434:	20000028 	.word	0x20000028
 8002438:	20000024 	.word	0x20000024

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000028 	.word	0x20000028
 8002460:	200009ec 	.word	0x200009ec

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	200009ec 	.word	0x200009ec

0800247c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e033      	b.n	80024fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff f88c 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024c2:	f023 0302 	bic.w	r3, r3, #2
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 faa8 	bl	8002a24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ea:	e001      	b.n	80024f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Start_DMA+0x1e>
 800251e:	2302      	movs	r3, #2
 8002520:	e0ce      	b.n	80026c0 <HAL_ADC_Start_DMA+0x1bc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d018      	beq.n	800256a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002548:	4b5f      	ldr	r3, [pc, #380]	@ (80026c8 <HAL_ADC_Start_DMA+0x1c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5f      	ldr	r2, [pc, #380]	@ (80026cc <HAL_ADC_Start_DMA+0x1c8>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9a      	lsrs	r2, r3, #18
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	3b01      	subs	r3, #1
 8002562:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002578:	d107      	bne.n	800258a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002588:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	f040 8086 	bne.w	80026a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d8:	d106      	bne.n	80025e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f023 0206 	bic.w	r2, r3, #6
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80025e6:	e002      	b.n	80025ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <HAL_ADC_Start_DMA+0x1cc>)
 80025f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	4a35      	ldr	r2, [pc, #212]	@ (80026d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	4a34      	ldr	r2, [pc, #208]	@ (80026d8 <HAL_ADC_Start_DMA+0x1d4>)
 8002608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	4a33      	ldr	r2, [pc, #204]	@ (80026dc <HAL_ADC_Start_DMA+0x1d8>)
 8002610:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800261a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800262a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	334c      	adds	r3, #76	@ 0x4c
 8002646:	4619      	mov	r1, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f000 fd28 	bl	80030a0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10f      	bne.n	800267c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d129      	bne.n	80026be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	e020      	b.n	80026be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <HAL_ADC_Start_DMA+0x1dc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11b      	bne.n	80026be <HAL_ADC_Start_DMA+0x1ba>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e00b      	b.n	80026be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000020 	.word	0x20000020
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	40012300 	.word	0x40012300
 80026d4:	08002c1d 	.word	0x08002c1d
 80026d8:	08002cd7 	.word	0x08002cd7
 80026dc:	08002cf3 	.word	0x08002cf3
 80026e0:	40012000 	.word	0x40012000

080026e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Stop_DMA+0x1a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e048      	b.n	8002790 <HAL_ADC_Stop_DMA+0xac>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d130      	bne.n	8002786 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002732:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d10f      	bne.n	8002762 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fd02 	bl	8003150 <HAL_DMA_Abort>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002770:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c>
 80027d8:	2302      	movs	r3, #2
 80027da:	e113      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x244>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d925      	bls.n	8002838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3b1e      	subs	r3, #30
 8002802:	2207      	movs	r2, #7
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	4603      	mov	r3, r0
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4403      	add	r3, r0
 800282a:	3b1e      	subs	r3, #30
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e022      	b.n	800287e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	2207      	movs	r2, #7
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4603      	mov	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4403      	add	r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d824      	bhi.n	80028d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b05      	subs	r3, #5
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ce:	e04c      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	@ 0x23
 80028ea:	221f      	movs	r2, #31
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b23      	subs	r3, #35	@ 0x23
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002920:	e023      	b.n	800296a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	@ 0x41
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b41      	subs	r3, #65	@ 0x41
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296a:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_ADC_ConfigChannel+0x250>)
 800296c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a28      	ldr	r2, [pc, #160]	@ (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10f      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <HAL_ADC_ConfigChannel+0x254>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x1f4>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d122      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_ADC_ConfigChannel+0x258>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d6:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <HAL_ADC_ConfigChannel+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a11      	ldr	r2, [pc, #68]	@ (8002a20 <HAL_ADC_ConfigChannel+0x260>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9a      	lsrs	r2, r3, #18
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012300 	.word	0x40012300
 8002a14:	40012000 	.word	0x40012000
 8002a18:	10000012 	.word	0x10000012
 8002a1c:	20000020 	.word	0x20000020
 8002a20:	431bde83 	.word	0x431bde83

08002a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b79      	ldr	r3, [pc, #484]	@ (8002c14 <ADC_Init+0x1f0>)
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	4a58      	ldr	r2, [pc, #352]	@ (8002c18 <ADC_Init+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e00f      	b.n	8002b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0202 	bic.w	r2, r2, #2
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e1b      	ldrb	r3, [r3, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	035a      	lsls	r2, r3, #13
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e007      	b.n	8002b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	051a      	lsls	r2, r3, #20
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bda:	025a      	lsls	r2, r3, #9
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	029a      	lsls	r2, r3, #10
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40012300 	.word	0x40012300
 8002c18:	0f000001 	.word	0x0f000001

08002c1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13c      	bne.n	8002cb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12b      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d127      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0220 	bic.w	r2, r2, #32
 8002c82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff f8b5 	bl	8001e18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cae:	e00e      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd75 	bl	80027ac <HAL_ADC_ErrorCallback>
}
 8002cc2:	e004      	b.n	8002cce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fd57 	bl	8002798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2240      	movs	r2, #64	@ 0x40
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff fd4a 	bl	80027ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	@ (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	@ (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	@ (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff3e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff31 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa2 	bl	8002e7c <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f50:	f7ff fa88 	bl	8002464 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e099      	b.n	8003094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f80:	e00f      	b.n	8002fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f82:	f7ff fa6f 	bl	8002464 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d908      	bls.n	8002fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e078      	b.n	8003094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e8      	bne.n	8002f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b38      	ldr	r3, [pc, #224]	@ (800309c <HAL_DMA_Init+0x158>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	2b04      	cmp	r3, #4
 8003034:	d117      	bne.n	8003066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fadf 	bl	800360c <DMA_CheckFifoParam>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	@ 0x40
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	e016      	b.n	8003094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa96 	bl	80035a0 <DMA_CalcBaseAndBitshift>
 8003074:	4603      	mov	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	223f      	movs	r2, #63	@ 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f010803f 	.word	0xf010803f

080030a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Start_IT+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e040      	b.n	8003148 <HAL_DMA_Start_IT+0xa8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d12f      	bne.n	800313a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa28 	bl	8003544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	223f      	movs	r2, #63	@ 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0216 	orr.w	r2, r2, #22
 800310e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e005      	b.n	8003146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800315e:	f7ff f981 	bl	8002464 <HAL_GetTick>
 8003162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d008      	beq.n	8003182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	@ 0x80
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e052      	b.n	8003228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0216 	bic.w	r2, r2, #22
 8003190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_DMA_Abort+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0208 	bic.w	r2, r2, #8
 80031c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d2:	e013      	b.n	80031fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d4:	f7ff f946 	bl	8002464 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d90c      	bls.n	80031fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2203      	movs	r2, #3
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e015      	b.n	8003228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e4      	bne.n	80031d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	223f      	movs	r2, #63	@ 0x3f
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800323c:	4b8e      	ldr	r3, [pc, #568]	@ (8003478 <HAL_DMA_IRQHandler+0x248>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a8e      	ldr	r2, [pc, #568]	@ (800347c <HAL_DMA_IRQHandler+0x24c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2208      	movs	r2, #8
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01a      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	2208      	movs	r2, #8
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	2201      	movs	r2, #1
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	2204      	movs	r2, #4
 80032f6:	409a      	lsls	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	2210      	movs	r2, #16
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d043      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03c      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	2210      	movs	r2, #16
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d018      	beq.n	8003372 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d024      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	e01f      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e016      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0208 	bic.w	r2, r2, #8
 800338e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	2220      	movs	r2, #32
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808f 	beq.w	80034d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8087 	beq.w	80034d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	2220      	movs	r2, #32
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d136      	bne.n	8003448 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0216 	bic.w	r2, r2, #22
 80033e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_DMA_IRQHandler+0x1da>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	223f      	movs	r2, #63	@ 0x3f
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	d07e      	beq.n	800353c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
        }
        return;
 8003446:	e079      	b.n	800353c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	2b00      	cmp	r3, #0
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e02c      	b.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
 8003476:	bf00      	nop
 8003478:	20000020 	.word	0x20000020
 800347c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d023      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
 8003490:	e01e      	b.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0210 	bic.w	r2, r2, #16
 80034ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d032      	beq.n	800353e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d022      	beq.n	800352a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2205      	movs	r2, #5
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3301      	adds	r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	d307      	bcc.n	8003518 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f2      	bne.n	80034fc <HAL_DMA_IRQHandler+0x2cc>
 8003516:	e000      	b.n	800351a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003518:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
 800353a:	e000      	b.n	800353e <HAL_DMA_IRQHandler+0x30e>
        return;
 800353c:	bf00      	nop
    }
  }
}
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d108      	bne.n	8003584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003582:	e007      	b.n	8003594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3b10      	subs	r3, #16
 80035b0:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <DMA_CalcBaseAndBitshift+0x64>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ba:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <DMA_CalcBaseAndBitshift+0x68>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d909      	bls.n	80035e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	1d1a      	adds	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e0:	e007      	b.n	80035f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	aaaaaaab 	.word	0xaaaaaaab
 8003608:	08004ce4 	.word	0x08004ce4

0800360c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11f      	bne.n	8003666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d856      	bhi.n	80036da <DMA_CheckFifoParam+0xce>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <DMA_CheckFifoParam+0x28>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003645 	.word	0x08003645
 8003638:	08003657 	.word	0x08003657
 800363c:	08003645 	.word	0x08003645
 8003640:	080036db 	.word	0x080036db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d046      	beq.n	80036de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e043      	b.n	80036de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800365e:	d140      	bne.n	80036e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e03d      	b.n	80036e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366e:	d121      	bne.n	80036b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d837      	bhi.n	80036e6 <DMA_CheckFifoParam+0xda>
 8003676:	a201      	add	r2, pc, #4	@ (adr r2, 800367c <DMA_CheckFifoParam+0x70>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003693 	.word	0x08003693
 8003684:	0800368d 	.word	0x0800368d
 8003688:	080036a5 	.word	0x080036a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e030      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d025      	beq.n	80036ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e022      	b.n	80036ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b2:	e01c      	b.n	80036ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d903      	bls.n	80036c2 <DMA_CheckFifoParam+0xb6>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d003      	beq.n	80036c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c0:	e018      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      break;
 80036c6:	e015      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e00b      	b.n	80036f2 <DMA_CheckFifoParam+0xe6>
      break;
 80036da:	bf00      	nop
 80036dc:	e00a      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e008      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e006      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e004      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
    }
  } 
  
  return status; 
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e159      	b.n	80039d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 8148 	bne.w	80039ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d005      	beq.n	8003756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003752:	2b02      	cmp	r3, #2
 8003754:	d130      	bne.n	80037b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0201 	and.w	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d017      	beq.n	80037f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a2 	beq.w	80039ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003898:	6453      	str	r3, [r2, #68]	@ 0x44
 800389a:	4b54      	ldr	r3, [pc, #336]	@ (80039ec <HAL_GPIO_Init+0x2e8>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a52      	ldr	r2, [pc, #328]	@ (80039f0 <HAL_GPIO_Init+0x2ec>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_GPIO_Init+0x2f0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x202>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2f4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x1fe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a47      	ldr	r2, [pc, #284]	@ (80039fc <HAL_GPIO_Init+0x2f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <HAL_GPIO_Init+0x2fc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x1f6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a45      	ldr	r2, [pc, #276]	@ (8003a04 <HAL_GPIO_Init+0x300>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x1f2>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e008      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x204>
 80038fe:	2302      	movs	r3, #2
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x204>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x204>
 8003906:	2300      	movs	r3, #0
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003918:	4935      	ldr	r1, [pc, #212]	@ (80039f0 <HAL_GPIO_Init+0x2ec>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003926:	4b38      	ldr	r3, [pc, #224]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800394a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003950:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003974:	4a24      	ldr	r2, [pc, #144]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800397a:	4b23      	ldr	r3, [pc, #140]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a4:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a08 <HAL_GPIO_Init+0x304>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b0f      	cmp	r3, #15
 80039d8:	f67f aea2 	bls.w	8003720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3724      	adds	r7, #36	@ 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40020000 	.word	0x40020000
 80039f8:	40020400 	.word	0x40020400
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e001      	b.n	8003a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a4c:	787b      	ldrb	r3, [r7, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a58:	e003      	b.n	8003a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	041a      	lsls	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	619a      	str	r2, [r3, #24]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a80:	887a      	ldrh	r2, [r7, #2]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	041a      	lsls	r2, r3, #16
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43d9      	mvns	r1, r3
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	400b      	ands	r3, r1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	619a      	str	r2, [r3, #24]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e267      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d075      	beq.n	8003bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ac2:	4b88      	ldr	r3, [pc, #544]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b85      	ldr	r3, [pc, #532]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d112      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b82      	ldr	r3, [pc, #520]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e242      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x74>
 8003b0a:	4b76      	ldr	r3, [pc, #472]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a75      	ldr	r2, [pc, #468]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b70      	ldr	r3, [pc, #448]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6c      	ldr	r2, [pc, #432]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	4b69      	ldr	r3, [pc, #420]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b66      	ldr	r3, [pc, #408]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a65      	ldr	r2, [pc, #404]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fc82 	bl	8002464 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fc7e 	bl	8002464 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e207      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe fc6e 	bl	8002464 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe fc6a 	bl	8002464 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1f3      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b51      	ldr	r3, [pc, #324]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b44      	ldr	r3, [pc, #272]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1c7      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4937      	ldr	r1, [pc, #220]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fc23 	bl	8002464 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe fc1f 	bl	8002464 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1a8      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4925      	ldr	r1, [pc, #148]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fc02 	bl	8002464 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fe fbfe 	bl	8002464 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e187      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d036      	beq.n	8003cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_RCC_OscConfig+0x248>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fbe2 	bl	8002464 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fbde 	bl	8002464 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e167      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x200>
 8003cc2:	e01b      	b.n	8003cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_RCC_OscConfig+0x248>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cca:	f7fe fbcb 	bl	8002464 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fbc7 	bl	8002464 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e150      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470000 	.word	0x42470000
 8003cec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ea      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b81      	ldr	r3, [pc, #516]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	4a7c      	ldr	r2, [pc, #496]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b77      	ldr	r3, [pc, #476]	@ (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d118      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b74      	ldr	r3, [pc, #464]	@ (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a73      	ldr	r2, [pc, #460]	@ (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fb87 	bl	8002464 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fe fb83 	bl	8002464 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e10c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2ea>
 8003d80:	4b64      	ldr	r3, [pc, #400]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a63      	ldr	r2, [pc, #396]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	e01c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x30c>
 8003d96:	4b5f      	ldr	r3, [pc, #380]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003db0:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a57      	ldr	r2, [pc, #348]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbc:	4b55      	ldr	r3, [pc, #340]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc0:	4a54      	ldr	r2, [pc, #336]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 0304 	bic.w	r3, r3, #4
 8003dc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fe fb48 	bl	8002464 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fe fb44 	bl	8002464 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0cb      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	4b49      	ldr	r3, [pc, #292]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0ee      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x334>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fb32 	bl	8002464 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fe fb2e 	bl	8002464 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0b5      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	4a38      	ldr	r2, [pc, #224]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a1 	beq.w	8003f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e42:	4b34      	ldr	r3, [pc, #208]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d05c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d141      	bne.n	8003eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb02 	bl	8002464 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe fafe 	bl	8002464 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e087      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	491b      	ldr	r1, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fad7 	bl	8002464 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fad3 	bl	8002464 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e05c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x416>
 8003ed8:	e054      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fac0 	bl	8002464 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe fabc 	bl	8002464 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e045      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x444>
 8003f06:	e03d      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e038      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <HAL_RCC_OscConfig+0x4ec>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cc      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b68      	ldr	r3, [pc, #416]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d003      	beq.n	8004052 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404e:	2b03      	cmp	r3, #3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3f      	ldr	r3, [pc, #252]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	4b3b      	ldr	r3, [pc, #236]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e067      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b37      	ldr	r3, [pc, #220]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4934      	ldr	r1, [pc, #208]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fe f9ee 	bl	8002464 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fe f9ea 	bl	8002464 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b25      	ldr	r3, [pc, #148]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20c      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b22      	ldr	r3, [pc, #136]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	@ (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004106:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	490a      	ldr	r1, [pc, #40]	@ (8004154 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	@ (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	@ (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe f94e 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08004cd4 	.word	0x08004cd4
 8004158:	20000020 	.word	0x20000020
 800415c:	20000024 	.word	0x20000024

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b090      	sub	sp, #64	@ 0x40
 8004166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4b59      	ldr	r3, [pc, #356]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d00d      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 80a1 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x16c>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3a>
 8004192:	e09b      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b53      	ldr	r3, [pc, #332]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004196:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004198:	e09b      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419a:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800419e:	e098      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041aa:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d028      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041c8:	2100      	movs	r1, #0
 80041ca:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041cc:	fb03 f201 	mul.w	r2, r3, r1
 80041d0:	2300      	movs	r3, #0
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	4a43      	ldr	r2, [pc, #268]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041da:	fba0 1202 	umull	r1, r2, r0, r2
 80041de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e0:	460a      	mov	r2, r1
 80041e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e6:	4413      	add	r3, r2
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	2200      	movs	r2, #0
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	61fa      	str	r2, [r7, #28]
 80041f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041fa:	f7fc fdc9 	bl	8000d90 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4613      	mov	r3, r2
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004206:	e053      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004208:	4b35      	ldr	r3, [pc, #212]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	2200      	movs	r2, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	617a      	str	r2, [r7, #20]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800421a:	f04f 0b00 	mov.w	fp, #0
 800421e:	4652      	mov	r2, sl
 8004220:	465b      	mov	r3, fp
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004230:	0150      	lsls	r0, r2, #5
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	ebb2 080a 	subs.w	r8, r2, sl
 800423a:	eb63 090b 	sbc.w	r9, r3, fp
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800424a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800424e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004252:	ebb2 0408 	subs.w	r4, r2, r8
 8004256:	eb63 0509 	sbc.w	r5, r3, r9
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	00eb      	lsls	r3, r5, #3
 8004264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004268:	00e2      	lsls	r2, r4, #3
 800426a:	4614      	mov	r4, r2
 800426c:	461d      	mov	r5, r3
 800426e:	eb14 030a 	adds.w	r3, r4, sl
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	eb45 030b 	adc.w	r3, r5, fp
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004286:	4629      	mov	r1, r5
 8004288:	028b      	lsls	r3, r1, #10
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004290:	4621      	mov	r1, r4
 8004292:	028a      	lsls	r2, r1, #10
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429a:	2200      	movs	r2, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	60fa      	str	r2, [r7, #12]
 80042a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a4:	f7fc fd74 	bl	8000d90 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3740      	adds	r7, #64	@ 0x40
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	017d7840 	.word	0x017d7840

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd fea4 	bl	8002060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 faca 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e03c      	b.n	800441e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <HAL_TIM_Base_Start+0xa0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_TIM_Base_Start+0x5c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d013      	beq.n	80043e8 <HAL_TIM_Base_Start+0x5c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_TIM_Base_Start+0xa4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_Base_Start+0x5c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_TIM_Base_Start+0xa8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start+0x5c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_TIM_Base_Start+0xac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_Base_Start+0x5c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a16      	ldr	r2, [pc, #88]	@ (800443c <HAL_TIM_Base_Start+0xb0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	e007      	b.n	800441c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e044      	b.n	80044e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x6c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d013      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x6c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1a      	ldr	r2, [pc, #104]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x6c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a19      	ldr	r2, [pc, #100]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x6c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <HAL_TIM_Base_Start_IT+0xbc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x6c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <HAL_TIM_Base_Start_IT+0xc0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d010      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	e007      	b.n	80044e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000

08004504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0202 	mvn.w	r2, #2
 8004538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f999 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f98b 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f99c 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0204 	mvn.w	r2, #4
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f973 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f965 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f976 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d020      	beq.n	8004600 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01b      	beq.n	8004600 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0208 	mvn.w	r2, #8
 80045d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f94d 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 80045ec:	e005      	b.n	80045fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f93f 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f950 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d020      	beq.n	800464c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0210 	mvn.w	r2, #16
 800461c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2208      	movs	r2, #8
 8004622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f927 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f919 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f92a 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0201 	mvn.w	r2, #1
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd fbe6 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fab6 	bl	8004c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8fb 	bl	80048ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0220 	mvn.w	r2, #32
 80046d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa88 	bl	8004bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_ConfigClockSource+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0b4      	b.n	800486a <HAL_TIM_ConfigClockSource+0x186>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004738:	d03e      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0xd4>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473e:	f200 8087 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004746:	f000 8086 	beq.w	8004856 <HAL_TIM_ConfigClockSource+0x172>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474e:	d87f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b70      	cmp	r3, #112	@ 0x70
 8004752:	d01a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xa6>
 8004754:	2b70      	cmp	r3, #112	@ 0x70
 8004756:	d87b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b60      	cmp	r3, #96	@ 0x60
 800475a:	d050      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x11a>
 800475c:	2b60      	cmp	r3, #96	@ 0x60
 800475e:	d877      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b50      	cmp	r3, #80	@ 0x50
 8004762:	d03c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xfa>
 8004764:	2b50      	cmp	r3, #80	@ 0x50
 8004766:	d873      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	d058      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x13a>
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d86f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b30      	cmp	r3, #48	@ 0x30
 8004772:	d064      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b30      	cmp	r3, #48	@ 0x30
 8004776:	d86b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d060      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d867      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d05a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	e062      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	f000 f999 	bl	8004ad0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
      break;
 80047b6:	e04f      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	f000 f982 	bl	8004ad0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8f6 	bl	80049dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2150      	movs	r1, #80	@ 0x50
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f94f 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 80047fc:	e02c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480a:	461a      	mov	r2, r3
 800480c:	f000 f915 	bl	8004a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2160      	movs	r1, #96	@ 0x60
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f93f 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800481c:	e01c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	461a      	mov	r2, r3
 800482c:	f000 f8d6 	bl	80049dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	@ 0x40
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f92f 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800483c:	e00c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 f926 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 800484e:	e003      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e000      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	@ (80049c0 <TIM_Base_SetConfig+0xfc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a37      	ldr	r2, [pc, #220]	@ (80049c4 <TIM_Base_SetConfig+0x100>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a36      	ldr	r2, [pc, #216]	@ (80049c8 <TIM_Base_SetConfig+0x104>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a35      	ldr	r2, [pc, #212]	@ (80049cc <TIM_Base_SetConfig+0x108>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2b      	ldr	r2, [pc, #172]	@ (80049c0 <TIM_Base_SetConfig+0xfc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	@ (80049c4 <TIM_Base_SetConfig+0x100>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	@ (80049c8 <TIM_Base_SetConfig+0x104>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	@ (80049cc <TIM_Base_SetConfig+0x108>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	@ (80049d0 <TIM_Base_SetConfig+0x10c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	@ (80049d4 <TIM_Base_SetConfig+0x110>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <TIM_Base_SetConfig+0x114>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <TIM_Base_SetConfig+0xfc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]
  }
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 030a 	bic.w	r3, r3, #10
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f023 0210 	bic.w	r2, r3, #16
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f043 0307 	orr.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e050      	b.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b74:	d013      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a18      	ldr	r2, [pc, #96]	@ (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a13      	ldr	r2, [pc, #76]	@ (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40014000 	.word	0x40014000

08004bec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <memset>:
 8004c14:	4402      	add	r2, r0
 8004c16:	4603      	mov	r3, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <__errno>:
 8004c24:	4b01      	ldr	r3, [pc, #4]	@ (8004c2c <__errno+0x8>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	2000002c 	.word	0x2000002c

08004c30 <__libc_init_array>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4d0d      	ldr	r5, [pc, #52]	@ (8004c68 <__libc_init_array+0x38>)
 8004c34:	4c0d      	ldr	r4, [pc, #52]	@ (8004c6c <__libc_init_array+0x3c>)
 8004c36:	1b64      	subs	r4, r4, r5
 8004c38:	10a4      	asrs	r4, r4, #2
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	42a6      	cmp	r6, r4
 8004c3e:	d109      	bne.n	8004c54 <__libc_init_array+0x24>
 8004c40:	4d0b      	ldr	r5, [pc, #44]	@ (8004c70 <__libc_init_array+0x40>)
 8004c42:	4c0c      	ldr	r4, [pc, #48]	@ (8004c74 <__libc_init_array+0x44>)
 8004c44:	f000 f83a 	bl	8004cbc <_init>
 8004c48:	1b64      	subs	r4, r4, r5
 8004c4a:	10a4      	asrs	r4, r4, #2
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	42a6      	cmp	r6, r4
 8004c50:	d105      	bne.n	8004c5e <__libc_init_array+0x2e>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c58:	4798      	blx	r3
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7ee      	b.n	8004c3c <__libc_init_array+0xc>
 8004c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c62:	4798      	blx	r3
 8004c64:	3601      	adds	r6, #1
 8004c66:	e7f2      	b.n	8004c4e <__libc_init_array+0x1e>
 8004c68:	08004cf4 	.word	0x08004cf4
 8004c6c:	08004cf4 	.word	0x08004cf4
 8004c70:	08004cf4 	.word	0x08004cf4
 8004c74:	08004cf8 	.word	0x08004cf8

08004c78 <sqrtf>:
 8004c78:	b508      	push	{r3, lr}
 8004c7a:	ed2d 8b02 	vpush	{d8}
 8004c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8004c82:	f000 f817 	bl	8004cb4 <__ieee754_sqrtf>
 8004c86:	eeb4 8a48 	vcmp.f32	s16, s16
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d60c      	bvs.n	8004caa <sqrtf+0x32>
 8004c90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004cb0 <sqrtf+0x38>
 8004c94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	d505      	bpl.n	8004caa <sqrtf+0x32>
 8004c9e:	f7ff ffc1 	bl	8004c24 <__errno>
 8004ca2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004ca6:	2321      	movs	r3, #33	@ 0x21
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	ecbd 8b02 	vpop	{d8}
 8004cae:	bd08      	pop	{r3, pc}
 8004cb0:	00000000 	.word	0x00000000

08004cb4 <__ieee754_sqrtf>:
 8004cb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004cb8:	4770      	bx	lr
	...

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
